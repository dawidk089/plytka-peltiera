
kalorie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d2  00800060  00800060  000007d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b2b  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abe  00000000  00000000  0000243b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c0  00000000  00000000  00002ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  000034bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000665  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000714  00000000  00000000  00003d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004489  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	39 c3       	rjmp	.+1650   	; 0x68a <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_start>:
  26:	4a 01       	movw	r8, r20

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d4 e0       	ldi	r29, 0x04	; 4
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	23 e0       	ldi	r18, 0x03	; 3
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a2 33       	cpi	r26, 0x32	; 50
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>

00000044 <__do_global_ctors>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	c8 e2       	ldi	r28, 0x28	; 40
  48:	d0 e0       	ldi	r29, 0x00	; 0
  4a:	03 c0       	rjmp	.+6      	; 0x52 <__do_global_ctors+0xe>
  4c:	22 97       	sbiw	r28, 0x02	; 2
  4e:	fe 01       	movw	r30, r28
  50:	6f d3       	rcall	.+1758   	; 0x730 <__tablejump__>
  52:	c6 32       	cpi	r28, 0x26	; 38
  54:	d1 07       	cpc	r29, r17
  56:	d1 f7       	brne	.-12     	; 0x4c <__do_global_ctors+0x8>
  58:	40 d0       	rcall	.+128    	; 0xda <main>
  5a:	6e c3       	rjmp	.+1756   	; 0x738 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z5statev>:
#include <avr/io.h>
#include "../modules/Usart.h"

const uint8_t state()
{
	Usart::buffer[0] = DDRB;
  5e:	87 b3       	in	r24, 0x17	; 23
  60:	80 93 32 01 	sts	0x0132, r24
	Usart::buffer[1] = DDRC;
  64:	84 b3       	in	r24, 0x14	; 20
  66:	80 93 33 01 	sts	0x0133, r24
	Usart::buffer[2] = DDRD;
  6a:	81 b3       	in	r24, 0x11	; 17
  6c:	80 93 34 01 	sts	0x0134, r24
	Usart::buffer[3] = PORTB;
  70:	88 b3       	in	r24, 0x18	; 24
  72:	80 93 35 01 	sts	0x0135, r24
	Usart::buffer[4] = PORTC;
  76:	85 b3       	in	r24, 0x15	; 21
  78:	80 93 36 01 	sts	0x0136, r24
	Usart::buffer[5] = PORTD;
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 93 37 01 	sts	0x0137, r24
	Usart::buffer[6] = PINB;
  82:	86 b3       	in	r24, 0x16	; 22
  84:	80 93 38 01 	sts	0x0138, r24
	Usart::buffer[7] = PINC;
  88:	83 b3       	in	r24, 0x13	; 19
  8a:	80 93 39 01 	sts	0x0139, r24
	Usart::buffer[8] = PIND;
  8e:	80 b3       	in	r24, 0x10	; 16
  90:	80 93 3a 01 	sts	0x013A, r24
	return 9;
}
  94:	89 e0       	ldi	r24, 0x09	; 9
  96:	08 95       	ret

00000098 <_Z17temperatureSensorv>:

#include "../modules/Usart.h"
#include "../modules/Adc.h"

const uint8_t temperatureSensor()
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	00 d0       	rcall	.+0      	; 0x9e <_Z17temperatureSensorv+0x6>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	Adc::configure(Adc::V2_56, 5);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	89 83       	std	Y+1, r24	; 0x01
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 83       	std	Y+2, r24	; 0x02
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	8b 83       	std	Y+3, r24	; 0x03
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	be 01       	movw	r22, r28
  b8:	6e 5f       	subi	r22, 0xFE	; 254
  ba:	7f 4f       	sbci	r23, 0xFF	; 255
  bc:	ce 01       	movw	r24, r28
  be:	03 96       	adiw	r24, 0x03	; 3
  c0:	34 d0       	rcall	.+104    	; 0x12a <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE>
	Adc::RegisterState measurement = Adc::result();
  c2:	63 d0       	rcall	.+198    	; 0x18a <_ZN3Adc6resultEv>
	Usart::buffer[0] = measurement.low;
  c4:	80 93 32 01 	sts	0x0132, r24
	Usart::buffer[1] = measurement.high;
  c8:	90 93 33 01 	sts	0x0133, r25
	return 2;
}
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:
#include "modules/Usart.h"
#include "modules/Adc.h"

int main(void)
{
	Usart::init();
  da:	e9 d2       	rcall	.+1490   	; 0x6ae <_ZN5Usart4initEv>
Usart::pushFunction(state, 32);
  dc:	60 e2       	ldi	r22, 0x20	; 32
  de:	8f e2       	ldi	r24, 0x2F	; 47
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	1b d3       	rcall	.+1590   	; 0x71a <_ZN5Usart12pushFunctionEPFKhvEh>
  e4:	61 e2       	ldi	r22, 0x21	; 33
  e6:	8c e4       	ldi	r24, 0x4C	; 76
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	17 d3       	rcall	.+1582   	; 0x71a <_ZN5Usart12pushFunctionEPFKhvEh>
	#include "config/scenario_register.h"
	Usart::run();
  ec:	ec d2       	rcall	.+1496   	; 0x6c6 <_ZN5Usart3runEv>
	return 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE>:
	isConfigured = true;
}

void Adc::startConfigure(const uint8_t &admux, const PRESCALER &prescaler)
{
	if (isConfigured)
  f4:	20 91 60 00 	lds	r18, 0x0060
  f8:	22 23       	and	r18, r18
  fa:	61 f0       	breq	.+24     	; 0x114 <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x20>
	{
		while (ADCSRA & (1<<ADIF));
  fc:	34 99       	sbic	0x06, 4	; 6
  fe:	fe cf       	rjmp	.-4      	; 0xfc <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x8>
		ADCSRA &= ~(1<<ADEN);
 100:	37 98       	cbi	0x06, 7	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f e3       	ldi	r18, 0x3F	; 63
 104:	33 e1       	ldi	r19, 0x13	; 19
 106:	47 e0       	ldi	r20, 0x07	; 7
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x14>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x1e>
 112:	00 00       	nop
		_delay_ms(ADC_SLEEP_TIME);
	}
	ADCSRA = (1<<ADEN) | prescaler;
 114:	fb 01       	movw	r30, r22
 116:	20 81       	ld	r18, Z
 118:	20 68       	ori	r18, 0x80	; 128
 11a:	26 b9       	out	0x06, r18	; 6
	ADMUX |= admux;
 11c:	27 b1       	in	r18, 0x07	; 7
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	28 2b       	or	r18, r24
 124:	27 b9       	out	0x07, r18	; 7
	sei();
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE>:
	startConfigure(specialVref, prescaler);
	isConfigured = true;
}
*/
void Adc::configure(const VREF &vref, const uint8_t &pin, const PRESCALER &prescaler)
{
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	00 d0       	rcall	.+0      	; 0x134 <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE+0xa>
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	8b 01       	movw	r16, r22
	startConfigure(vref | (pin & 0x0f), prescaler);
 13a:	fb 01       	movw	r30, r22
 13c:	20 81       	ld	r18, Z
 13e:	2f 70       	andi	r18, 0x0F	; 15
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	28 2b       	or	r18, r24
 146:	29 83       	std	Y+1, r18	; 0x01
 148:	ba 01       	movw	r22, r20
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	d2 df       	rcall	.-92     	; 0xf4 <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE>
 150:	27 e1       	ldi	r18, 0x17	; 23
	for (uint8_t i = 0; i < 6; ++i)
		Pin::get(23 + i).pullUp();
 152:	29 83       	std	Y+1, r18	; 0x01
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	2a 83       	std	Y+2, r18	; 0x02
 15a:	81 d0       	rcall	.+258    	; 0x25e <_ZN3Pin3getERKh>
 15c:	6d d0       	rcall	.+218    	; 0x238 <_ZN3Pin6pullUpEv>
 15e:	2a 81       	ldd	r18, Y+2	; 0x02
 160:	2f 5f       	subi	r18, 0xFF	; 255
}
*/
void Adc::configure(const VREF &vref, const uint8_t &pin, const PRESCALER &prescaler)
{
	startConfigure(vref | (pin & 0x0f), prescaler);
	for (uint8_t i = 0; i < 6; ++i)
 162:	2d 31       	cpi	r18, 0x1D	; 29
 164:	b1 f7       	brne	.-20     	; 0x152 <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE+0x28>
		Pin::get(23 + i).pullUp();
	Pin::get(23 + pin).read();
 166:	f8 01       	movw	r30, r16
 168:	80 81       	ld	r24, Z
 16a:	89 5e       	subi	r24, 0xE9	; 233
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	75 d0       	rcall	.+234    	; 0x25e <_ZN3Pin3getERKh>
 174:	4e d0       	rcall	.+156    	; 0x212 <_ZN3Pin4readEv>
	isConfigured = true;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 60 00 	sts	0x0060, r24
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <_ZN3Adc6resultEv>:
	sei();
}

const Adc::RegisterState Adc::result()
{
	if (!isConfigured)
 18a:	80 91 60 00 	lds	r24, 0x0060
 18e:	81 11       	cpse	r24, r1
 190:	03 c0       	rjmp	.+6      	; 0x198 <_ZN3Adc6resultEv+0xe>
		return Adc::RegisterState();
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	9f ef       	ldi	r25, 0xFF	; 255
 196:	08 95       	ret
	ADCSRA |= (1<<ADSC);
 198:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADIF));
 19a:	34 99       	sbic	0x06, 4	; 6
 19c:	fe cf       	rjmp	.-4      	; 0x19a <_ZN3Adc6resultEv+0x10>
#include "Adc.h"

bool Adc::isConfigured = false;

Adc::RegisterState::RegisterState(const Register::ADDR &low, const Register::ADDR &high)
: low(low), high(high)
 19e:	84 b1       	in	r24, 0x04	; 4
 1a0:	95 b1       	in	r25, 0x05	; 5
	if (!isConfigured)
		return Adc::RegisterState();
	ADCSRA |= (1<<ADSC);
	while (ADCSRA & (1<<ADIF));
	return Adc::RegisterState(ADCL, ADCH);
 1a2:	08 95       	ret

000001a4 <_ZN3Pin6setLowEv>:
};

// interface

void Pin::setLow()
{
 1a4:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
 1a6:	a1 81       	ldd	r26, Z+1	; 0x01
 1a8:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
 1aa:	4c 91       	ld	r20, X
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	9c 01       	movw	r18, r24
 1b2:	07 80       	ldd	r0, Z+7	; 0x07
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_ZN3Pin6setLowEv+0x16>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <_ZN3Pin6setLowEv+0x12>
 1be:	42 2b       	or	r20, r18
 1c0:	4c 93       	st	X, r20
	Register::setOff(outState, addrMask);
 1c2:	a5 81       	ldd	r26, Z+5	; 0x05
 1c4:	b6 81       	ldd	r27, Z+6	; 0x06
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
 1c6:	2c 91       	ld	r18, X
 1c8:	07 80       	ldd	r0, Z+7	; 0x07
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <_ZN3Pin6setLowEv+0x2c>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <_ZN3Pin6setLowEv+0x28>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	8c 93       	st	X, r24
 1da:	08 95       	ret

000001dc <_ZN3Pin7setHighEv>:
}

void Pin::setHigh()
{
 1dc:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
 1de:	a1 81       	ldd	r26, Z+1	; 0x01
 1e0:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
 1e2:	4c 91       	ld	r20, X
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9c 01       	movw	r18, r24
 1ea:	07 80       	ldd	r0, Z+7	; 0x07
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <_ZN3Pin7setHighEv+0x16>
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <_ZN3Pin7setHighEv+0x12>
 1f6:	42 2b       	or	r20, r18
 1f8:	4c 93       	st	X, r20
	Register::setOn(outState, addrMask);
 1fa:	a5 81       	ldd	r26, Z+5	; 0x05
 1fc:	b6 81       	ldd	r27, Z+6	; 0x06
 1fe:	2c 91       	ld	r18, X
 200:	07 80       	ldd	r0, Z+7	; 0x07
 202:	02 c0       	rjmp	.+4      	; 0x208 <_ZN3Pin7setHighEv+0x2c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <_ZN3Pin7setHighEv+0x28>
 20c:	28 2b       	or	r18, r24
 20e:	2c 93       	st	X, r18
 210:	08 95       	ret

00000212 <_ZN3Pin4readEv>:
	return Register::isHigh(inState, addrMask);
}

void Pin::read()
{
	Register::setOff(direction, addrMask);
 212:	dc 01       	movw	r26, r24
 214:	11 96       	adiw	r26, 0x01	; 1
 216:	ed 91       	ld	r30, X+
 218:	fc 91       	ld	r31, X
 21a:	12 97       	sbiw	r26, 0x02	; 2
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
 21c:	40 81       	ld	r20, Z
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	17 96       	adiw	r26, 0x07	; 7
 224:	0c 90       	ld	r0, X
 226:	02 c0       	rjmp	.+4      	; 0x22c <_ZN3Pin4readEv+0x1a>
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <_ZN3Pin4readEv+0x16>
 230:	20 95       	com	r18
 232:	24 23       	and	r18, r20
 234:	20 83       	st	Z, r18
	setLow();
 236:	b6 cf       	rjmp	.-148    	; 0x1a4 <_ZN3Pin6setLowEv>

00000238 <_ZN3Pin6pullUpEv>:
}

void Pin::pullUp()
{
	Register::setOff(direction, addrMask);
 238:	dc 01       	movw	r26, r24
 23a:	11 96       	adiw	r26, 0x01	; 1
 23c:	ed 91       	ld	r30, X+
 23e:	fc 91       	ld	r31, X
 240:	12 97       	sbiw	r26, 0x02	; 2
 242:	40 81       	ld	r20, Z
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	17 96       	adiw	r26, 0x07	; 7
 24a:	0c 90       	ld	r0, X
 24c:	02 c0       	rjmp	.+4      	; 0x252 <_ZN3Pin6pullUpEv+0x1a>
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <_ZN3Pin6pullUpEv+0x16>
 256:	20 95       	com	r18
 258:	24 23       	and	r18, r20
 25a:	20 83       	st	Z, r18
	setHigh();
 25c:	bf cf       	rjmp	.-130    	; 0x1dc <_ZN3Pin7setHighEv>

0000025e <_ZN3Pin3getERKh>:

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
	{
		if (index == instances[i].nr)
 25e:	fc 01       	movw	r30, r24
 260:	80 81       	ld	r24, Z
 262:	e1 e6       	ldi	r30, 0x61	; 97
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	89 13       	cpse	r24, r25
 26e:	09 c0       	rjmp	.+18     	; 0x282 <_ZN3Pin3getERKh+0x24>
			return instances[i];
 270:	49 e0       	ldi	r20, 0x09	; 9
 272:	42 9f       	mul	r20, r18
 274:	c0 01       	movw	r24, r0
 276:	43 9f       	mul	r20, r19
 278:	90 0d       	add	r25, r0
 27a:	11 24       	eor	r1, r1
 27c:	8f 59       	subi	r24, 0x9F	; 159
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	08 95       	ret
 282:	2f 5f       	subi	r18, 0xFF	; 255
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	39 96       	adiw	r30, 0x09	; 9
	setHigh();
}

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
 288:	27 31       	cpi	r18, 0x17	; 23
 28a:	31 05       	cpc	r19, r1
 28c:	71 f7       	brne	.-36     	; 0x26a <_ZN3Pin3getERKh+0xc>
	{
		if (index == instances[i].nr)
			return instances[i];
	}
	return instances[0];
 28e:	81 e6       	ldi	r24, 0x61	; 97
 290:	90 e0       	ldi	r25, 0x00	; 0
}
 292:	08 95       	ret

00000294 <_GLOBAL__sub_I__ZN3Pin9instancesE>:
// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
{
 294:	6f 92       	push	r6
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
}

// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
 2b0:	dd 24       	eor	r13, r13
 2b2:	d3 94       	inc	r13
 2b4:	d0 92 61 00 	sts	0x0061, r13
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	e8 2e       	mov	r14, r24
 2bc:	f1 2c       	mov	r15, r1
 2be:	f0 92 63 00 	sts	0x0063, r15
 2c2:	e0 92 62 00 	sts	0x0062, r14
 2c6:	03 e3       	ldi	r16, 0x33	; 51
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	10 93 65 00 	sts	0x0065, r17
 2ce:	00 93 64 00 	sts	0x0064, r16
 2d2:	c5 e3       	ldi	r28, 0x35	; 53
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	d0 93 67 00 	sts	0x0067, r29
 2da:	c0 93 66 00 	sts	0x0066, r28
 2de:	96 e0       	ldi	r25, 0x06	; 6
 2e0:	89 2e       	mov	r8, r25
 2e2:	80 92 68 00 	sts	0x0068, r8
 2e6:	10 92 69 00 	sts	0x0069, r1
 2ea:	22 e0       	ldi	r18, 0x02	; 2
 2ec:	92 2e       	mov	r9, r18
 2ee:	90 92 6a 00 	sts	0x006A, r9
 2f2:	a1 e3       	ldi	r26, 0x31	; 49
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	b0 93 6c 00 	sts	0x006C, r27
 2fa:	a0 93 6b 00 	sts	0x006B, r26
 2fe:	e0 e3       	ldi	r30, 0x30	; 48
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	f0 93 6e 00 	sts	0x006E, r31
 306:	e0 93 6d 00 	sts	0x006D, r30
 30a:	62 e3       	ldi	r22, 0x32	; 50
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	70 93 70 00 	sts	0x0070, r23
 312:	60 93 6f 00 	sts	0x006F, r22
 316:	10 92 71 00 	sts	0x0071, r1
 31a:	10 92 72 00 	sts	0x0072, r1
 31e:	33 e0       	ldi	r19, 0x03	; 3
 320:	a3 2e       	mov	r10, r19
 322:	a0 92 73 00 	sts	0x0073, r10
 326:	b0 93 75 00 	sts	0x0075, r27
 32a:	a0 93 74 00 	sts	0x0074, r26
 32e:	f0 93 77 00 	sts	0x0077, r31
 332:	e0 93 76 00 	sts	0x0076, r30
 336:	70 93 79 00 	sts	0x0079, r23
 33a:	60 93 78 00 	sts	0x0078, r22
 33e:	d0 92 7a 00 	sts	0x007A, r13
 342:	10 92 7b 00 	sts	0x007B, r1
 346:	44 e0       	ldi	r20, 0x04	; 4
 348:	b4 2e       	mov	r11, r20
 34a:	b0 92 7c 00 	sts	0x007C, r11
 34e:	b0 93 7e 00 	sts	0x007E, r27
 352:	a0 93 7d 00 	sts	0x007D, r26
 356:	f0 93 80 00 	sts	0x0080, r31
 35a:	e0 93 7f 00 	sts	0x007F, r30
 35e:	70 93 82 00 	sts	0x0082, r23
 362:	60 93 81 00 	sts	0x0081, r22
 366:	90 92 83 00 	sts	0x0083, r9
 36a:	d0 92 84 00 	sts	0x0084, r13
 36e:	55 e0       	ldi	r21, 0x05	; 5
 370:	c5 2e       	mov	r12, r21
 372:	c0 92 85 00 	sts	0x0085, r12
 376:	b0 93 87 00 	sts	0x0087, r27
 37a:	a0 93 86 00 	sts	0x0086, r26
 37e:	f0 93 89 00 	sts	0x0089, r31
 382:	e0 93 88 00 	sts	0x0088, r30
 386:	70 93 8b 00 	sts	0x008B, r23
 38a:	60 93 8a 00 	sts	0x008A, r22
 38e:	a0 92 8c 00 	sts	0x008C, r10
 392:	d0 92 8d 00 	sts	0x008D, r13
 396:	80 92 8e 00 	sts	0x008E, r8
 39a:	b0 93 90 00 	sts	0x0090, r27
 39e:	a0 93 8f 00 	sts	0x008F, r26
 3a2:	f0 93 92 00 	sts	0x0092, r31
 3a6:	e0 93 91 00 	sts	0x0091, r30
 3aa:	70 93 94 00 	sts	0x0094, r23
 3ae:	60 93 93 00 	sts	0x0093, r22
 3b2:	b0 92 95 00 	sts	0x0095, r11
 3b6:	d0 92 96 00 	sts	0x0096, r13
 3ba:	89 e0       	ldi	r24, 0x09	; 9
 3bc:	80 93 97 00 	sts	0x0097, r24
 3c0:	47 e3       	ldi	r20, 0x37	; 55
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	50 93 99 00 	sts	0x0099, r21
 3c8:	40 93 98 00 	sts	0x0098, r20
 3cc:	26 e3       	ldi	r18, 0x36	; 54
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	30 93 9b 00 	sts	0x009B, r19
 3d4:	20 93 9a 00 	sts	0x009A, r18
 3d8:	88 e3       	ldi	r24, 0x38	; 56
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	90 93 9d 00 	sts	0x009D, r25
 3e0:	80 93 9c 00 	sts	0x009C, r24
 3e4:	80 92 9e 00 	sts	0x009E, r8
 3e8:	d0 92 9f 00 	sts	0x009F, r13
 3ec:	0f 2e       	mov	r0, r31
 3ee:	fa e0       	ldi	r31, 0x0A	; 10
 3f0:	7f 2e       	mov	r7, r31
 3f2:	f0 2d       	mov	r31, r0
 3f4:	70 92 a0 00 	sts	0x00A0, r7
 3f8:	50 93 a2 00 	sts	0x00A2, r21
 3fc:	40 93 a1 00 	sts	0x00A1, r20
 400:	30 93 a4 00 	sts	0x00A4, r19
 404:	20 93 a3 00 	sts	0x00A3, r18
 408:	90 93 a6 00 	sts	0x00A6, r25
 40c:	80 93 a5 00 	sts	0x00A5, r24
 410:	0f 2e       	mov	r0, r31
 412:	f7 e0       	ldi	r31, 0x07	; 7
 414:	7f 2e       	mov	r7, r31
 416:	f0 2d       	mov	r31, r0
 418:	70 92 a7 00 	sts	0x00A7, r7
 41c:	d0 92 a8 00 	sts	0x00A8, r13
 420:	0f 2e       	mov	r0, r31
 422:	fb e0       	ldi	r31, 0x0B	; 11
 424:	6f 2e       	mov	r6, r31
 426:	f0 2d       	mov	r31, r0
 428:	60 92 a9 00 	sts	0x00A9, r6
 42c:	b0 93 ab 00 	sts	0x00AB, r27
 430:	a0 93 aa 00 	sts	0x00AA, r26
 434:	f0 93 ad 00 	sts	0x00AD, r31
 438:	e0 93 ac 00 	sts	0x00AC, r30
 43c:	70 93 af 00 	sts	0x00AF, r23
 440:	60 93 ae 00 	sts	0x00AE, r22
 444:	c0 92 b0 00 	sts	0x00B0, r12
 448:	d0 92 b1 00 	sts	0x00B1, r13
 44c:	0f 2e       	mov	r0, r31
 44e:	fc e0       	ldi	r31, 0x0C	; 12
 450:	6f 2e       	mov	r6, r31
 452:	f0 2d       	mov	r31, r0
 454:	60 92 b2 00 	sts	0x00B2, r6
 458:	b0 93 b4 00 	sts	0x00B4, r27
 45c:	a0 93 b3 00 	sts	0x00B3, r26
 460:	f0 93 b6 00 	sts	0x00B6, r31
 464:	e0 93 b5 00 	sts	0x00B5, r30
 468:	70 93 b8 00 	sts	0x00B8, r23
 46c:	60 93 b7 00 	sts	0x00B7, r22
 470:	80 92 b9 00 	sts	0x00B9, r8
 474:	d0 92 ba 00 	sts	0x00BA, r13
 478:	0f 2e       	mov	r0, r31
 47a:	fd e0       	ldi	r31, 0x0D	; 13
 47c:	8f 2e       	mov	r8, r31
 47e:	f0 2d       	mov	r31, r0
 480:	80 92 bb 00 	sts	0x00BB, r8
 484:	b0 93 bd 00 	sts	0x00BD, r27
 488:	a0 93 bc 00 	sts	0x00BC, r26
 48c:	f0 93 bf 00 	sts	0x00BF, r31
 490:	e0 93 be 00 	sts	0x00BE, r30
 494:	70 93 c1 00 	sts	0x00C1, r23
 498:	60 93 c0 00 	sts	0x00C0, r22
 49c:	70 92 c2 00 	sts	0x00C2, r7
 4a0:	d0 92 c3 00 	sts	0x00C3, r13
 4a4:	6e e0       	ldi	r22, 0x0E	; 14
 4a6:	60 93 c4 00 	sts	0x00C4, r22
 4aa:	50 93 c6 00 	sts	0x00C6, r21
 4ae:	40 93 c5 00 	sts	0x00C5, r20
 4b2:	30 93 c8 00 	sts	0x00C8, r19
 4b6:	20 93 c7 00 	sts	0x00C7, r18
 4ba:	90 93 ca 00 	sts	0x00CA, r25
 4be:	80 93 c9 00 	sts	0x00C9, r24
 4c2:	10 92 cb 00 	sts	0x00CB, r1
 4c6:	d0 92 cc 00 	sts	0x00CC, r13
 4ca:	6f e0       	ldi	r22, 0x0F	; 15
 4cc:	60 93 cd 00 	sts	0x00CD, r22
 4d0:	50 93 cf 00 	sts	0x00CF, r21
 4d4:	40 93 ce 00 	sts	0x00CE, r20
 4d8:	30 93 d1 00 	sts	0x00D1, r19
 4dc:	20 93 d0 00 	sts	0x00D0, r18
 4e0:	90 93 d3 00 	sts	0x00D3, r25
 4e4:	80 93 d2 00 	sts	0x00D2, r24
 4e8:	d0 92 d4 00 	sts	0x00D4, r13
 4ec:	d0 92 d5 00 	sts	0x00D5, r13
 4f0:	60 e1       	ldi	r22, 0x10	; 16
 4f2:	60 93 d6 00 	sts	0x00D6, r22
 4f6:	50 93 d8 00 	sts	0x00D8, r21
 4fa:	40 93 d7 00 	sts	0x00D7, r20
 4fe:	30 93 da 00 	sts	0x00DA, r19
 502:	20 93 d9 00 	sts	0x00D9, r18
 506:	90 93 dc 00 	sts	0x00DC, r25
 50a:	80 93 db 00 	sts	0x00DB, r24
 50e:	90 92 dd 00 	sts	0x00DD, r9
 512:	d0 92 de 00 	sts	0x00DE, r13
 516:	61 e1       	ldi	r22, 0x11	; 17
 518:	60 93 df 00 	sts	0x00DF, r22
 51c:	50 93 e1 00 	sts	0x00E1, r21
 520:	40 93 e0 00 	sts	0x00E0, r20
 524:	30 93 e3 00 	sts	0x00E3, r19
 528:	20 93 e2 00 	sts	0x00E2, r18
 52c:	90 93 e5 00 	sts	0x00E5, r25
 530:	80 93 e4 00 	sts	0x00E4, r24
 534:	a0 92 e6 00 	sts	0x00E6, r10
 538:	10 92 e7 00 	sts	0x00E7, r1
 53c:	62 e1       	ldi	r22, 0x12	; 18
 53e:	60 93 e8 00 	sts	0x00E8, r22
 542:	50 93 ea 00 	sts	0x00EA, r21
 546:	40 93 e9 00 	sts	0x00E9, r20
 54a:	30 93 ec 00 	sts	0x00EC, r19
 54e:	20 93 eb 00 	sts	0x00EB, r18
 552:	90 93 ee 00 	sts	0x00EE, r25
 556:	80 93 ed 00 	sts	0x00ED, r24
 55a:	b0 92 ef 00 	sts	0x00EF, r11
 55e:	10 92 f0 00 	sts	0x00F0, r1
 562:	63 e1       	ldi	r22, 0x13	; 19
 564:	60 93 f1 00 	sts	0x00F1, r22
 568:	50 93 f3 00 	sts	0x00F3, r21
 56c:	40 93 f2 00 	sts	0x00F2, r20
 570:	30 93 f5 00 	sts	0x00F5, r19
 574:	20 93 f4 00 	sts	0x00F4, r18
 578:	90 93 f7 00 	sts	0x00F7, r25
 57c:	80 93 f6 00 	sts	0x00F6, r24
 580:	c0 92 f8 00 	sts	0x00F8, r12
 584:	10 92 f9 00 	sts	0x00F9, r1
 588:	87 e1       	ldi	r24, 0x17	; 23
 58a:	80 93 fa 00 	sts	0x00FA, r24
 58e:	f0 92 fc 00 	sts	0x00FC, r15
 592:	e0 92 fb 00 	sts	0x00FB, r14
 596:	10 93 fe 00 	sts	0x00FE, r17
 59a:	00 93 fd 00 	sts	0x00FD, r16
 59e:	d0 93 00 01 	sts	0x0100, r29
 5a2:	c0 93 ff 00 	sts	0x00FF, r28
 5a6:	10 92 01 01 	sts	0x0101, r1
 5aa:	d0 92 02 01 	sts	0x0102, r13
 5ae:	88 e1       	ldi	r24, 0x18	; 24
 5b0:	80 93 03 01 	sts	0x0103, r24
 5b4:	f0 92 05 01 	sts	0x0105, r15
 5b8:	e0 92 04 01 	sts	0x0104, r14
 5bc:	10 93 07 01 	sts	0x0107, r17
 5c0:	00 93 06 01 	sts	0x0106, r16
 5c4:	d0 93 09 01 	sts	0x0109, r29
 5c8:	c0 93 08 01 	sts	0x0108, r28
 5cc:	d0 92 0a 01 	sts	0x010A, r13
 5d0:	d0 92 0b 01 	sts	0x010B, r13
 5d4:	89 e1       	ldi	r24, 0x19	; 25
 5d6:	80 93 0c 01 	sts	0x010C, r24
 5da:	f0 92 0e 01 	sts	0x010E, r15
 5de:	e0 92 0d 01 	sts	0x010D, r14
 5e2:	10 93 10 01 	sts	0x0110, r17
 5e6:	00 93 0f 01 	sts	0x010F, r16
 5ea:	d0 93 12 01 	sts	0x0112, r29
 5ee:	c0 93 11 01 	sts	0x0111, r28
 5f2:	90 92 13 01 	sts	0x0113, r9
 5f6:	d0 92 14 01 	sts	0x0114, r13
 5fa:	8a e1       	ldi	r24, 0x1A	; 26
 5fc:	80 93 15 01 	sts	0x0115, r24
 600:	f0 92 17 01 	sts	0x0117, r15
 604:	e0 92 16 01 	sts	0x0116, r14
 608:	10 93 19 01 	sts	0x0119, r17
 60c:	00 93 18 01 	sts	0x0118, r16
 610:	d0 93 1b 01 	sts	0x011B, r29
 614:	c0 93 1a 01 	sts	0x011A, r28
 618:	a0 92 1c 01 	sts	0x011C, r10
 61c:	d0 92 1d 01 	sts	0x011D, r13
 620:	8b e1       	ldi	r24, 0x1B	; 27
 622:	80 93 1e 01 	sts	0x011E, r24
 626:	f0 92 20 01 	sts	0x0120, r15
 62a:	e0 92 1f 01 	sts	0x011F, r14
 62e:	10 93 22 01 	sts	0x0122, r17
 632:	00 93 21 01 	sts	0x0121, r16
 636:	d0 93 24 01 	sts	0x0124, r29
 63a:	c0 93 23 01 	sts	0x0123, r28
 63e:	b0 92 25 01 	sts	0x0125, r11
 642:	d0 92 26 01 	sts	0x0126, r13
 646:	8c e1       	ldi	r24, 0x1C	; 28
 648:	80 93 27 01 	sts	0x0127, r24
 64c:	f0 92 29 01 	sts	0x0129, r15
 650:	e0 92 28 01 	sts	0x0128, r14
 654:	10 93 2b 01 	sts	0x012B, r17
 658:	00 93 2a 01 	sts	0x012A, r16
 65c:	d0 93 2d 01 	sts	0x012D, r29
 660:	c0 93 2c 01 	sts	0x012C, r28
 664:	c0 92 2e 01 	sts	0x012E, r12
 668:	d0 92 2f 01 	sts	0x012F, r13
{
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	7f 90       	pop	r7
 686:	6f 90       	pop	r6
 688:	08 95       	ret

0000068a <__vector_11>:
char Usart::incomeChar;
bool Usart::newCharReceived;

// definicja wektora przerwan odbioru danych USART
ISR(USART_RXC_vect)
{
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	8f 93       	push	r24
	Usart::incomeChar = UDR;
 696:	8c b1       	in	r24, 0x0c	; 12
 698:	80 93 31 01 	sts	0x0131, r24
	Usart::newCharReceived = true;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	80 93 30 01 	sts	0x0130, r24
}
 6a2:	8f 91       	pop	r24
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <_ZN5Usart4initEv>:

void Usart::init()
{
	// wlaczenie transmisji, wlaczenie odbioru, wlaczenie przerwania odbioru
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
 6ae:	88 e9       	ldi	r24, 0x98	; 152
 6b0:	8a b9       	out	0x0a, r24	; 10
	//nastaw 8-bitowej ramki
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
 6b2:	86 e8       	ldi	r24, 0x86	; 134
 6b4:	80 bd       	out	0x20, r24	; 32
	// for 9600 baud at 1MHz
	UBRRL = 71;
 6b6:	87 e4       	ldi	r24, 0x47	; 71
 6b8:	89 b9       	out	0x09, r24	; 9
	sei();
 6ba:	78 94       	sei
 6bc:	08 95       	ret

000006be <_ZN5Usart4sendEc>:
	}
}

void Usart::send(char toSend)
{
	while (!(UCSRA & (1<<UDRE)));
 6be:	5d 9b       	sbis	0x0b, 5	; 11
 6c0:	fe cf       	rjmp	.-4      	; 0x6be <_ZN5Usart4sendEc>
	UDR = toSend;
 6c2:	8c b9       	out	0x0c, r24	; 12
 6c4:	08 95       	ret

000006c6 <_ZN5Usart3runEv>:
	UBRRL = 71;
	sei();
}

void Usart::run()
{
 6c6:	02 e3       	ldi	r16, 0x32	; 50
 6c8:	11 e0       	ldi	r17, 0x01	; 1
 6ca:	81 e5       	ldi	r24, 0x51	; 81
 6cc:	9b e0       	ldi	r25, 0x0B	; 11
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <_ZN5Usart3runEv+0x8>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <_ZN5Usart3runEv+0xe>
 6d4:	00 00       	nop
	while (true)
	{
		_delay_ms(USART_SLEEP_TIME);
		if (!newCharReceived)
 6d6:	80 91 30 01 	lds	r24, 0x0130
 6da:	88 23       	and	r24, r24
 6dc:	b1 f3       	breq	.-20     	; 0x6ca <_ZN5Usart3runEv+0x4>
			continue;
		char charRecv = incomeChar;
 6de:	c0 91 31 01 	lds	r28, 0x0131
		newCharReceived = false;
 6e2:	10 92 30 01 	sts	0x0130, r1
		if (charRecv >= 32 && functions[charRecv - 32])
 6e6:	c0 32       	cpi	r28, 0x20	; 32
 6e8:	80 f3       	brcs	.-32     	; 0x6ca <_ZN5Usart3runEv+0x4>
 6ea:	ec 2f       	mov	r30, r28
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	ee 5c       	subi	r30, 0xCE	; 206
 6f4:	fe 4f       	sbci	r31, 0xFE	; 254
 6f6:	01 90       	ld	r0, Z+
 6f8:	f0 81       	ld	r31, Z
 6fa:	e0 2d       	mov	r30, r0
 6fc:	30 97       	sbiw	r30, 0x00	; 0
 6fe:	29 f3       	breq	.-54     	; 0x6ca <_ZN5Usart3runEv+0x4>
		{
			const uint8_t bufferSize = functions[charRecv - 32]();
 700:	09 95       	icall
 702:	f8 2e       	mov	r15, r24
			send(charRecv);
 704:	8c 2f       	mov	r24, r28
 706:	db df       	rcall	.-74     	; 0x6be <_ZN5Usart4sendEc>
			for (uint8_t i = 0; i < bufferSize; ++i)
 708:	c2 e3       	ldi	r28, 0x32	; 50
 70a:	d1 e0       	ldi	r29, 0x01	; 1
 70c:	8c 2f       	mov	r24, r28
 70e:	80 1b       	sub	r24, r16
 710:	8f 15       	cp	r24, r15
 712:	d8 f6       	brcc	.-74     	; 0x6ca <_ZN5Usart3runEv+0x4>
			send(buffer[i]);
 714:	89 91       	ld	r24, Y+
 716:	d3 df       	rcall	.-90     	; 0x6be <_ZN5Usart4sendEc>
 718:	f9 cf       	rjmp	.-14     	; 0x70c <_ZN5Usart3runEv+0x46>

0000071a <_ZN5Usart12pushFunctionEPFKhvEh>:
	UDR = toSend;
}

void Usart::pushFunction(const uint8_t (*fun)(), uint8_t id)
{
	functions[id - 32] = fun;
 71a:	e6 2f       	mov	r30, r22
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	ee 5c       	subi	r30, 0xCE	; 206
 724:	fe 4f       	sbci	r31, 0xFE	; 254
 726:	91 83       	std	Z+1, r25	; 0x01
 728:	80 83       	st	Z, r24
 72a:	08 95       	ret

0000072c <__tablejump2__>:
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31

00000730 <__tablejump__>:
 730:	05 90       	lpm	r0, Z+
 732:	f4 91       	lpm	r31, Z
 734:	e0 2d       	mov	r30, r0
 736:	09 94       	ijmp

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
