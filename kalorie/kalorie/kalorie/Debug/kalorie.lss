
kalorie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000804  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000804  00000898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d2  00800060  00800060  00000898  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000130  00000000  00000000  00000ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000197e  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089a  00000000  00000000  00002a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000943  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  00003ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e0  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	7f c1       	rjmp	.+766    	; 0x316 <__vector_11>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
  26:	f4 01       	movw	r30, r8

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d4 e0       	ldi	r29, 0x04	; 4
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e4 e0       	ldi	r30, 0x04	; 4
  3c:	f8 e0       	ldi	r31, 0x08	; 8
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a0 36       	cpi	r26, 0x60	; 96
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	13 e0       	ldi	r17, 0x03	; 3
  4c:	a0 e6       	ldi	r26, 0x60	; 96
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a2 33       	cpi	r26, 0x32	; 50
  56:	b1 07       	cpc	r27, r17
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c8 e2       	ldi	r28, 0x28	; 40
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	22 97       	sbiw	r28, 0x02	; 2
  64:	fe 01       	movw	r30, r28
  66:	c8 d3       	rcall	.+1936   	; 0x7f8 <__tablejump__>
  68:	c6 32       	cpi	r28, 0x26	; 38
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	af d1       	rcall	.+862    	; 0x3ce <main>
  70:	c7 c3       	rjmp	.+1934   	; 0x800 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5statev>:
#include <avr/io.h>
#include "../modules/Usart.h"

const uint8_t state()
{
	Usart::buffer[0] = DDRB;
  74:	87 b3       	in	r24, 0x17	; 23
  76:	80 93 32 01 	sts	0x0132, r24
	Usart::buffer[1] = DDRC;
  7a:	84 b3       	in	r24, 0x14	; 20
  7c:	80 93 33 01 	sts	0x0133, r24
	Usart::buffer[2] = DDRD;
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 93 34 01 	sts	0x0134, r24
	Usart::buffer[3] = PORTB;
  86:	88 b3       	in	r24, 0x18	; 24
  88:	80 93 35 01 	sts	0x0135, r24
	Usart::buffer[4] = PORTC;
  8c:	85 b3       	in	r24, 0x15	; 21
  8e:	80 93 36 01 	sts	0x0136, r24
	Usart::buffer[5] = PORTD;
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 93 37 01 	sts	0x0137, r24
	Usart::buffer[6] = PINB;
  98:	86 b3       	in	r24, 0x16	; 22
  9a:	80 93 38 01 	sts	0x0138, r24
	Usart::buffer[7] = PINC;
  9e:	83 b3       	in	r24, 0x13	; 19
  a0:	80 93 39 01 	sts	0x0139, r24
	Usart::buffer[8] = PIND;
  a4:	80 b3       	in	r24, 0x10	; 16
  a6:	80 93 3a 01 	sts	0x013A, r24
	return 9;
}
  aa:	89 e0       	ldi	r24, 0x09	; 9
  ac:	08 95       	ret

000000ae <_Z17temperatureSensorv>:

#include "../modules/Usart.h"
#include "../modules/Adc.h"

const uint8_t temperatureSensor()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <_Z17temperatureSensorv+0x6>
  b4:	0f 92       	push	r0
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	Adc::configure(Adc::V2_56, 5);
  ba:	80 ec       	ldi	r24, 0xC0	; 192
  bc:	8b 83       	std	Y+3, r24	; 0x03
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	8a 83       	std	Y+2, r24	; 0x02
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	ce 01       	movw	r24, r28
  c8:	03 96       	adiw	r24, 0x03	; 3
  ca:	be 01       	movw	r22, r28
  cc:	6e 5f       	subi	r22, 0xFE	; 254
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	ae 01       	movw	r20, r28
  d2:	4f 5f       	subi	r20, 0xFF	; 255
  d4:	5f 4f       	sbci	r21, 0xFF	; 255
  d6:	34 d0       	rcall	.+104    	; 0x140 <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE>
	Adc::RegisterState measurement = Adc::result();
  d8:	66 d0       	rcall	.+204    	; 0x1a6 <_ZN3Adc6resultEv>
	Usart::buffer[0] = measurement.low;
  da:	80 93 32 01 	sts	0x0132, r24
	Usart::buffer[1] = measurement.high;
  de:	90 93 33 01 	sts	0x0133, r25
	return 2;
}
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <_ZN3Adc13RegisterStateC1ERVKhS2_>:
#include "Adc.h"

bool Adc::isConfigured = false;

Adc::RegisterState::RegisterState(const Register::ADDR &low, const Register::ADDR &high)
  f0:	fc 01       	movw	r30, r24
: low(low), high(high)
  f2:	db 01       	movw	r26, r22
  f4:	8c 91       	ld	r24, X
  f6:	80 83       	st	Z, r24
  f8:	da 01       	movw	r26, r20
  fa:	8c 91       	ld	r24, X
  fc:	81 83       	std	Z+1, r24	; 0x01
{
}
  fe:	08 95       	ret

00000100 <_ZN3Adc13RegisterStateC1Ev>:

Adc::RegisterState::RegisterState()
 100:	fc 01       	movw	r30, r24
: low(0xff), high(0xff)
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	80 83       	st	Z, r24
 106:	81 83       	std	Z+1, r24	; 0x01
{
}
 108:	08 95       	ret

0000010a <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE>:
	isConfigured = true;
}

void Adc::startConfigure(const uint8_t &admux, const PRESCALER &prescaler)
{
	if (isConfigured)
 10a:	20 91 60 00 	lds	r18, 0x0060
 10e:	22 23       	and	r18, r18
 110:	61 f0       	breq	.+24     	; 0x12a <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x20>
	{
		while (ADCSRA & (1<<ADIF));
 112:	34 99       	sbic	0x06, 4	; 6
 114:	fe cf       	rjmp	.-4      	; 0x112 <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x8>
		ADCSRA &= ~(1<<ADEN);
 116:	37 98       	cbi	0x06, 7	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f e3       	ldi	r18, 0x3F	; 63
 11a:	33 e1       	ldi	r19, 0x13	; 19
 11c:	47 e0       	ldi	r20, 0x07	; 7
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	40 40       	sbci	r20, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x14>
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE+0x1e>
 128:	00 00       	nop
		_delay_ms(ADC_SLEEP_TIME);
	}
	ADCSRA = (1<<ADEN) | prescaler;
 12a:	fb 01       	movw	r30, r22
 12c:	20 81       	ld	r18, Z
 12e:	20 68       	ori	r18, 0x80	; 128
 130:	26 b9       	out	0x06, r18	; 6
	ADMUX |= admux;
 132:	27 b1       	in	r18, 0x07	; 7
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	28 2b       	or	r18, r24
 13a:	27 b9       	out	0x07, r18	; 7
	sei();
 13c:	78 94       	sei
}
 13e:	08 95       	ret

00000140 <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE>:
	startConfigure(specialVref, prescaler);
	isConfigured = true;
}
*/
void Adc::configure(const VREF &vref, const uint8_t &pin, const PRESCALER &prescaler)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE+0xa>
 14a:	00 d0       	rcall	.+0      	; 0x14c <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE+0xc>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	8b 01       	movw	r16, r22
 152:	ba 01       	movw	r22, r20
	startConfigure(vref | (pin & 0x0f), prescaler);
 154:	f8 01       	movw	r30, r16
 156:	20 81       	ld	r18, Z
 158:	2f 70       	andi	r18, 0x0F	; 15
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	28 2b       	or	r18, r24
 160:	2b 83       	std	Y+3, r18	; 0x03
 162:	ce 01       	movw	r24, r28
 164:	03 96       	adiw	r24, 0x03	; 3
 166:	d1 df       	rcall	.-94     	; 0x10a <_ZN3Adc14startConfigureERKhRKNS_9PRESCALERE>
 168:	27 e1       	ldi	r18, 0x17	; 23
	for (uint8_t i = 0; i < 6; ++i)
		Pin::get(23 + i).hi_z();
 16a:	2a 83       	std	Y+2, r18	; 0x02
 16c:	ce 01       	movw	r24, r28
 16e:	02 96       	adiw	r24, 0x02	; 2
 170:	2c 83       	std	Y+4, r18	; 0x04
 172:	93 d0       	rcall	.+294    	; 0x29a <_ZN3Pin3getERKh>
 174:	6a d0       	rcall	.+212    	; 0x24a <_ZN3Pin4hi_zEv>
 176:	2c 81       	ldd	r18, Y+4	; 0x04
 178:	2f 5f       	subi	r18, 0xFF	; 255
}
*/
void Adc::configure(const VREF &vref, const uint8_t &pin, const PRESCALER &prescaler)
{
	startConfigure(vref | (pin & 0x0f), prescaler);
	for (uint8_t i = 0; i < 6; ++i)
 17a:	2d 31       	cpi	r18, 0x1D	; 29
 17c:	b1 f7       	brne	.-20     	; 0x16a <_ZN3Adc9configureERKNS_4VREFERKhRKNS_9PRESCALERE+0x2a>
		Pin::get(23 + i).hi_z();
	Pin::get(23 + pin).pull_up();
 17e:	f8 01       	movw	r30, r16
 180:	80 81       	ld	r24, Z
 182:	89 5e       	subi	r24, 0xE9	; 233
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	87 d0       	rcall	.+270    	; 0x29a <_ZN3Pin3getERKh>
 18c:	72 d0       	rcall	.+228    	; 0x272 <_ZN3Pin7pull_upEv>
	isConfigured = true;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 60 00 	sts	0x0060, r24
}
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <_ZN3Adc6resultEv>:
	sei();
}

const Adc::RegisterState Adc::result()
{
	if (!isConfigured)
 1a6:	80 91 60 00 	lds	r24, 0x0060
 1aa:	88 23       	and	r24, r24
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <_ZN3Adc6resultEv+0xe>
		return Adc::RegisterState();
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	08 95       	ret
	ADCSRA |= (1<<ADSC);
 1b4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADIF));
 1b6:	34 99       	sbic	0x06, 4	; 6
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <_ZN3Adc6resultEv+0x10>
#include "Adc.h"

bool Adc::isConfigured = false;

Adc::RegisterState::RegisterState(const Register::ADDR &low, const Register::ADDR &high)
: low(low), high(high)
 1ba:	84 b1       	in	r24, 0x04	; 4
 1bc:	95 b1       	in	r25, 0x05	; 5
	if (!isConfigured)
		return Adc::RegisterState();
	ADCSRA |= (1<<ADSC);
	while (ADCSRA & (1<<ADIF));
	return Adc::RegisterState(ADCL, ADCH);
 1be:	08 95       	ret

000001c0 <_ZN3Pin3lowEv>:
};

// interface

void Pin::low()
{
 1c0:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
 1c2:	a1 81       	ldd	r26, Z+1	; 0x01
 1c4:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
 1c6:	4c 91       	ld	r20, X
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	c9 01       	movw	r24, r18
 1ce:	07 80       	ldd	r0, Z+7	; 0x07
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <_ZN3Pin3lowEv+0x16>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <_ZN3Pin3lowEv+0x12>
 1da:	48 2b       	or	r20, r24
 1dc:	4c 93       	st	X, r20
	Register::setOff(outState, addrMask);
 1de:	a5 81       	ldd	r26, Z+5	; 0x05
 1e0:	b6 81       	ldd	r27, Z+6	; 0x06
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
 1e2:	8c 91       	ld	r24, X
 1e4:	07 80       	ldd	r0, Z+7	; 0x07
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <_ZN3Pin3lowEv+0x2c>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <_ZN3Pin3lowEv+0x28>
 1f0:	20 95       	com	r18
 1f2:	28 23       	and	r18, r24
 1f4:	2c 93       	st	X, r18
}
 1f6:	08 95       	ret

000001f8 <_ZN3Pin4highEv>:

void Pin::high()
{
 1f8:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
 1fa:	a1 81       	ldd	r26, Z+1	; 0x01
 1fc:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
 1fe:	4c 91       	ld	r20, X
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	c9 01       	movw	r24, r18
 206:	07 80       	ldd	r0, Z+7	; 0x07
 208:	02 c0       	rjmp	.+4      	; 0x20e <_ZN3Pin4highEv+0x16>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <_ZN3Pin4highEv+0x12>
 212:	48 2b       	or	r20, r24
 214:	4c 93       	st	X, r20
	Register::setOn(outState, addrMask);
 216:	a5 81       	ldd	r26, Z+5	; 0x05
 218:	b6 81       	ldd	r27, Z+6	; 0x06
 21a:	8c 91       	ld	r24, X
 21c:	07 80       	ldd	r0, Z+7	; 0x07
 21e:	02 c0       	rjmp	.+4      	; 0x224 <_ZN3Pin4highEv+0x2c>
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <_ZN3Pin4highEv+0x28>
 228:	82 2b       	or	r24, r18
 22a:	8c 93       	st	X, r24
}
 22c:	08 95       	ret

0000022e <_ZNK3Pin6isHighEv>:

const bool Pin::isHigh() const
{
 22e:	fc 01       	movw	r30, r24
	return Register::isHigh(inState, addrMask);
 230:	a3 81       	ldd	r26, Z+3	; 0x03
 232:	b4 81       	ldd	r27, Z+4	; 0x04
		addr &= ~(1<<bitNr);
	}
	
	static const bool isHigh(const ADDR &addr, const BIT_NR &bitNr)
	{
		return addr & (1<<bitNr);
 234:	2c 91       	ld	r18, X
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	07 80       	ldd	r0, Z+7	; 0x07
 23a:	02 c0       	rjmp	.+4      	; 0x240 <_ZNK3Pin6isHighEv+0x12>
 23c:	35 95       	asr	r19
 23e:	27 95       	ror	r18
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <_ZNK3Pin6isHighEv+0xe>
}
 244:	82 2f       	mov	r24, r18
 246:	81 70       	andi	r24, 0x01	; 1
 248:	08 95       	ret

0000024a <_ZN3Pin4hi_zEv>:

void Pin::hi_z()
{
	Register::setOff(direction, addrMask);
 24a:	dc 01       	movw	r26, r24
 24c:	11 96       	adiw	r26, 0x01	; 1
 24e:	ed 91       	ld	r30, X+
 250:	fc 91       	ld	r31, X
 252:	12 97       	sbiw	r26, 0x02	; 2
		addr |= (1<<bitNr);
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
 254:	40 81       	ld	r20, Z
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	17 96       	adiw	r26, 0x07	; 7
 25c:	0c 90       	ld	r0, X
 25e:	02 c0       	rjmp	.+4      	; 0x264 <_ZN3Pin4hi_zEv+0x1a>
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <_ZN3Pin4hi_zEv+0x16>
 268:	20 95       	com	r18
 26a:	24 23       	and	r18, r20
 26c:	20 83       	st	Z, r18
	low();
 26e:	a8 df       	rcall	.-176    	; 0x1c0 <_ZN3Pin3lowEv>
}
 270:	08 95       	ret

00000272 <_ZN3Pin7pull_upEv>:

void Pin::pull_up()
{
	Register::setOff(direction, addrMask);
 272:	dc 01       	movw	r26, r24
 274:	11 96       	adiw	r26, 0x01	; 1
 276:	ed 91       	ld	r30, X+
 278:	fc 91       	ld	r31, X
 27a:	12 97       	sbiw	r26, 0x02	; 2
 27c:	40 81       	ld	r20, Z
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	17 96       	adiw	r26, 0x07	; 7
 284:	0c 90       	ld	r0, X
 286:	02 c0       	rjmp	.+4      	; 0x28c <_ZN3Pin7pull_upEv+0x1a>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <_ZN3Pin7pull_upEv+0x16>
 290:	20 95       	com	r18
 292:	24 23       	and	r18, r20
 294:	20 83       	st	Z, r18
	high();
 296:	b0 df       	rcall	.-160    	; 0x1f8 <_ZN3Pin4highEv>
}
 298:	08 95       	ret

0000029a <_ZN3Pin3getERKh>:

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
	{
		if (index == instances[i].nr)
 29a:	fc 01       	movw	r30, r24
 29c:	80 81       	ld	r24, Z
 29e:	e1 e6       	ldi	r30, 0x61	; 97
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	90 81       	ld	r25, Z
 2a8:	89 17       	cp	r24, r25
 2aa:	59 f4       	brne	.+22     	; 0x2c2 <_ZN3Pin3getERKh+0x28>
			return instances[i];
 2ac:	c9 01       	movw	r24, r18
 2ae:	43 e0       	ldi	r20, 0x03	; 3
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	4a 95       	dec	r20
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <_ZN3Pin3getERKh+0x16>
 2b8:	82 0f       	add	r24, r18
 2ba:	93 1f       	adc	r25, r19
 2bc:	8f 59       	subi	r24, 0x9F	; 159
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	08 95       	ret
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	39 96       	adiw	r30, 0x09	; 9
	high();
}

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
 2c8:	27 31       	cpi	r18, 0x17	; 23
 2ca:	31 05       	cpc	r19, r1
 2cc:	61 f7       	brne	.-40     	; 0x2a6 <_ZN3Pin3getERKh+0xc>
	{
		if (index == instances[i].nr)
			return instances[i];
	}
	return instances[0];
 2ce:	81 e6       	ldi	r24, 0x61	; 97
 2d0:	90 e0       	ldi	r25, 0x00	; 0
}
 2d2:	08 95       	ret

000002d4 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>:

// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
 2d4:	cf 92       	push	r12
 2d6:	df 92       	push	r13
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	fc 01       	movw	r30, r24
 2e6:	e7 01       	movw	r28, r14
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
 2e8:	db 01       	movw	r26, r22
 2ea:	8c 91       	ld	r24, X
 2ec:	80 83       	st	Z, r24
 2ee:	52 83       	std	Z+2, r21	; 0x02
 2f0:	41 83       	std	Z+1, r20	; 0x01
 2f2:	34 83       	std	Z+4, r19	; 0x04
 2f4:	23 83       	std	Z+3, r18	; 0x03
 2f6:	16 83       	std	Z+6, r17	; 0x06
 2f8:	05 83       	std	Z+5, r16	; 0x05
 2fa:	88 81       	ld	r24, Y
 2fc:	87 83       	std	Z+7, r24	; 0x07
 2fe:	d6 01       	movw	r26, r12
 300:	8c 91       	ld	r24, X
 302:	80 87       	std	Z+8, r24	; 0x08
{
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	df 90       	pop	r13
 312:	cf 90       	pop	r12
 314:	08 95       	ret

00000316 <__vector_11>:
char Usart::incomeChar;
bool Usart::newCharReceived;

// definicja wektora przerwan odbioru danych USART
ISR(USART_RXC_vect)
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	8f 93       	push	r24
	Usart::incomeChar = UDR;
 322:	8c b1       	in	r24, 0x0c	; 12
 324:	80 93 31 01 	sts	0x0131, r24
	Usart::newCharReceived = true;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 30 01 	sts	0x0130, r24
}
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <_ZN5Usart4initEv>:

void Usart::init()
{
	// wlaczenie transmisji, wlaczenie odbioru, wlaczenie przerwania odbioru
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
 33a:	88 e9       	ldi	r24, 0x98	; 152
 33c:	8a b9       	out	0x0a, r24	; 10
	//nastaw 8-bitowej ramki
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
 33e:	86 e8       	ldi	r24, 0x86	; 134
 340:	80 bd       	out	0x20, r24	; 32
	// for 9600 baud at 1MHz
	UBRRL = 71;
 342:	87 e4       	ldi	r24, 0x47	; 71
 344:	89 b9       	out	0x09, r24	; 9
	sei();
 346:	78 94       	sei
}
 348:	08 95       	ret

0000034a <_ZN5Usart4sendEc>:
	}
}

void Usart::send(char toSend)
{
	while (!(UCSRA & (1<<UDRE)));
 34a:	5d 9b       	sbis	0x0b, 5	; 11
 34c:	fe cf       	rjmp	.-4      	; 0x34a <_ZN5Usart4sendEc>
	UDR = toSend;
 34e:	8c b9       	out	0x0c, r24	; 12
}
 350:	08 95       	ret

00000352 <_ZN5Usart3runEv>:
 352:	81 e5       	ldi	r24, 0x51	; 81
 354:	9b e0       	ldi	r25, 0x0B	; 11
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <_ZN5Usart3runEv+0x4>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <_ZN5Usart3runEv+0xa>
 35c:	00 00       	nop
void Usart::run()
{
	while (true)
	{
		_delay_ms(USART_SLEEP_TIME);
		if (!newCharReceived)
 35e:	80 91 30 01 	lds	r24, 0x0130
 362:	88 23       	and	r24, r24
 364:	b1 f3       	breq	.-20     	; 0x352 <_ZN5Usart3runEv>
			continue;
		char charRecv = incomeChar;
 366:	c0 91 31 01 	lds	r28, 0x0131
		newCharReceived = false;
 36a:	10 92 30 01 	sts	0x0130, r1
		if (charRecv >= 32 && functions[charRecv - 32])
 36e:	c0 32       	cpi	r28, 0x20	; 32
 370:	80 f3       	brcs	.-32     	; 0x352 <_ZN5Usart3runEv>
 372:	ec 2f       	mov	r30, r28
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	ee 5c       	subi	r30, 0xCE	; 206
 37c:	fe 4f       	sbci	r31, 0xFE	; 254
 37e:	01 90       	ld	r0, Z+
 380:	f0 81       	ld	r31, Z
 382:	e0 2d       	mov	r30, r0
 384:	30 97       	sbiw	r30, 0x00	; 0
 386:	29 f3       	breq	.-54     	; 0x352 <_ZN5Usart3runEv>
		{
			const uint8_t bufferSize = functions[charRecv - 32]();
 388:	09 95       	icall
 38a:	08 2f       	mov	r16, r24
			send(charRecv);
 38c:	8c 2f       	mov	r24, r28
 38e:	dd df       	rcall	.-70     	; 0x34a <_ZN5Usart4sendEc>
 390:	c2 e3       	ldi	r28, 0x32	; 50
 392:	d1 e0       	ldi	r29, 0x01	; 1
			for (uint8_t i = 0; i < bufferSize; ++i)
 394:	10 e0       	ldi	r17, 0x00	; 0
 396:	03 c0       	rjmp	.+6      	; 0x39e <_ZN5Usart3runEv+0x4c>
			send(buffer[i]);
 398:	89 91       	ld	r24, Y+
 39a:	d7 df       	rcall	.-82     	; 0x34a <_ZN5Usart4sendEc>
		newCharReceived = false;
		if (charRecv >= 32 && functions[charRecv - 32])
		{
			const uint8_t bufferSize = functions[charRecv - 32]();
			send(charRecv);
			for (uint8_t i = 0; i < bufferSize; ++i)
 39c:	1f 5f       	subi	r17, 0xFF	; 255
 39e:	10 17       	cp	r17, r16
 3a0:	d9 f7       	brne	.-10     	; 0x398 <_ZN5Usart3runEv+0x46>
 3a2:	d7 cf       	rjmp	.-82     	; 0x352 <_ZN5Usart3runEv>

000003a4 <_ZN5Usart12pushFunctionEPFKhvEh>:
	UDR = toSend;
}

void Usart::pushFunction(const uint8_t (*fun)(), uint8_t id)
{
	functions[id - 32] = fun;
 3a4:	e6 2f       	mov	r30, r22
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	ee 5c       	subi	r30, 0xCE	; 206
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	91 83       	std	Z+1, r25	; 0x01
 3b2:	80 83       	st	Z, r24
}
 3b4:	08 95       	ret

000003b6 <_ZN5Usart8pushTextEPKch>:

void Usart::pushText(const char *text, uint8_t pos)
{
 3b6:	fc 01       	movw	r30, r24
	while (*text != '\0')
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <_ZN5Usart8pushTextEPKch+0x10>
		buffer[pos++] = *text++;
 3ba:	a6 2f       	mov	r26, r22
 3bc:	b0 e0       	ldi	r27, 0x00	; 0
 3be:	ae 5c       	subi	r26, 0xCE	; 206
 3c0:	be 4f       	sbci	r27, 0xFE	; 254
 3c2:	8c 93       	st	X, r24
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
	functions[id - 32] = fun;
}

void Usart::pushText(const char *text, uint8_t pos)
{
	while (*text != '\0')
 3c6:	81 91       	ld	r24, Z+
 3c8:	88 23       	and	r24, r24
 3ca:	b9 f7       	brne	.-18     	; 0x3ba <_ZN5Usart8pushTextEPKch+0x4>
		buffer[pos++] = *text++;
 3cc:	08 95       	ret

000003ce <main>:
#include "modules/Usart.h"
#include "modules/Adc.h"

int main(void)
{
	Usart::init();
 3ce:	b5 df       	rcall	.-150    	; 0x33a <_ZN5Usart4initEv>
Usart::pushFunction(state, 32);
 3d0:	8a e3       	ldi	r24, 0x3A	; 58
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	60 e2       	ldi	r22, 0x20	; 32
 3d6:	e6 df       	rcall	.-52     	; 0x3a4 <_ZN5Usart12pushFunctionEPFKhvEh>
 3d8:	87 e5       	ldi	r24, 0x57	; 87
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	61 e2       	ldi	r22, 0x21	; 33
 3de:	e2 df       	rcall	.-60     	; 0x3a4 <_ZN5Usart12pushFunctionEPFKhvEh>
	#include "config/scenario_register.h"
	Usart::run();
 3e0:	b8 df       	rcall	.-144    	; 0x352 <_ZN5Usart3runEv>
	return 0;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <_GLOBAL__sub_I__ZN3Pin9instancesE>:
 3e8:	2f 92       	push	r2
 3ea:	3f 92       	push	r3
 3ec:	5f 92       	push	r5
 3ee:	6f 92       	push	r6
 3f0:	7f 92       	push	r7
 3f2:	8f 92       	push	r8
 3f4:	9f 92       	push	r9
 3f6:	af 92       	push	r10
 3f8:	bf 92       	push	r11
 3fa:	cf 92       	push	r12
 3fc:	df 92       	push	r13
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
}

// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
 40a:	51 e6       	ldi	r21, 0x61	; 97
 40c:	65 2e       	mov	r6, r21
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	75 2e       	mov	r7, r21
 412:	e1 e0       	ldi	r30, 0x01	; 1
 414:	e0 93 61 00 	sts	0x0061, r30
 418:	04 e3       	ldi	r16, 0x34	; 52
 41a:	10 e0       	ldi	r17, 0x00	; 0
 41c:	10 93 63 00 	sts	0x0063, r17
 420:	00 93 62 00 	sts	0x0062, r16
 424:	63 e3       	ldi	r22, 0x33	; 51
 426:	e6 2e       	mov	r14, r22
 428:	f1 2c       	mov	r15, r1
 42a:	f0 92 65 00 	sts	0x0065, r15
 42e:	e0 92 64 00 	sts	0x0064, r14
 432:	75 e3       	ldi	r23, 0x35	; 53
 434:	c7 2e       	mov	r12, r23
 436:	d1 2c       	mov	r13, r1
 438:	d0 92 67 00 	sts	0x0067, r13
 43c:	c0 92 66 00 	sts	0x0066, r12
 440:	f6 e0       	ldi	r31, 0x06	; 6
 442:	f0 93 68 00 	sts	0x0068, r31
 446:	10 92 69 00 	sts	0x0069, r1
 44a:	a2 e0       	ldi	r26, 0x02	; 2
 44c:	ba 2e       	mov	r11, r26
 44e:	b0 92 6a 00 	sts	0x006A, r11
 452:	81 e3       	ldi	r24, 0x31	; 49
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	90 93 6c 00 	sts	0x006C, r25
 45a:	80 93 6b 00 	sts	0x006B, r24
 45e:	20 e3       	ldi	r18, 0x30	; 48
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	30 93 6e 00 	sts	0x006E, r19
 466:	20 93 6d 00 	sts	0x006D, r18
 46a:	42 e3       	ldi	r20, 0x32	; 50
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	50 93 70 00 	sts	0x0070, r21
 472:	40 93 6f 00 	sts	0x006F, r20
 476:	10 92 71 00 	sts	0x0071, r1
 47a:	10 92 72 00 	sts	0x0072, r1
 47e:	b3 e0       	ldi	r27, 0x03	; 3
 480:	ab 2e       	mov	r10, r27
 482:	a0 92 73 00 	sts	0x0073, r10
 486:	90 93 75 00 	sts	0x0075, r25
 48a:	80 93 74 00 	sts	0x0074, r24
 48e:	30 93 77 00 	sts	0x0077, r19
 492:	20 93 76 00 	sts	0x0076, r18
 496:	50 93 79 00 	sts	0x0079, r21
 49a:	40 93 78 00 	sts	0x0078, r20
 49e:	e0 93 7a 00 	sts	0x007A, r30
 4a2:	10 92 7b 00 	sts	0x007B, r1
 4a6:	c4 e0       	ldi	r28, 0x04	; 4
 4a8:	9c 2e       	mov	r9, r28
 4aa:	90 92 7c 00 	sts	0x007C, r9
 4ae:	90 93 7e 00 	sts	0x007E, r25
 4b2:	80 93 7d 00 	sts	0x007D, r24
 4b6:	30 93 80 00 	sts	0x0080, r19
 4ba:	20 93 7f 00 	sts	0x007F, r18
 4be:	50 93 82 00 	sts	0x0082, r21
 4c2:	40 93 81 00 	sts	0x0081, r20
 4c6:	b0 92 83 00 	sts	0x0083, r11
 4ca:	e0 93 84 00 	sts	0x0084, r30
 4ce:	d5 e0       	ldi	r29, 0x05	; 5
 4d0:	8d 2e       	mov	r8, r29
 4d2:	80 92 85 00 	sts	0x0085, r8
 4d6:	90 93 87 00 	sts	0x0087, r25
 4da:	80 93 86 00 	sts	0x0086, r24
 4de:	30 93 89 00 	sts	0x0089, r19
 4e2:	20 93 88 00 	sts	0x0088, r18
 4e6:	50 93 8b 00 	sts	0x008B, r21
 4ea:	40 93 8a 00 	sts	0x008A, r20
 4ee:	a0 92 8c 00 	sts	0x008C, r10
 4f2:	e0 93 8d 00 	sts	0x008D, r30
 4f6:	f0 93 8e 00 	sts	0x008E, r31
 4fa:	90 93 90 00 	sts	0x0090, r25
 4fe:	80 93 8f 00 	sts	0x008F, r24
 502:	30 93 92 00 	sts	0x0092, r19
 506:	20 93 91 00 	sts	0x0091, r18
 50a:	50 93 94 00 	sts	0x0094, r21
 50e:	40 93 93 00 	sts	0x0093, r20
 512:	90 92 95 00 	sts	0x0095, r9
 516:	e0 93 96 00 	sts	0x0096, r30
 51a:	69 e0       	ldi	r22, 0x09	; 9
 51c:	60 93 97 00 	sts	0x0097, r22
 520:	67 e3       	ldi	r22, 0x37	; 55
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	70 93 99 00 	sts	0x0099, r23
 528:	60 93 98 00 	sts	0x0098, r22
 52c:	a6 e3       	ldi	r26, 0x36	; 54
 52e:	2a 2e       	mov	r2, r26
 530:	31 2c       	mov	r3, r1
 532:	30 92 9b 00 	sts	0x009B, r3
 536:	20 92 9a 00 	sts	0x009A, r2
 53a:	c8 e3       	ldi	r28, 0x38	; 56
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	d0 93 9d 00 	sts	0x009D, r29
 542:	c0 93 9c 00 	sts	0x009C, r28
 546:	d3 01       	movw	r26, r6
 548:	dd 96       	adiw	r26, 0x3d	; 61
 54a:	fc 93       	st	X, r31
 54c:	dd 97       	sbiw	r26, 0x3d	; 61
 54e:	de 96       	adiw	r26, 0x3e	; 62
 550:	ec 93       	st	X, r30
 552:	de 97       	sbiw	r26, 0x3e	; 62
 554:	0f 2e       	mov	r0, r31
 556:	fa e0       	ldi	r31, 0x0A	; 10
 558:	5f 2e       	mov	r5, r31
 55a:	f0 2d       	mov	r31, r0
 55c:	df 96       	adiw	r26, 0x3f	; 63
 55e:	5c 92       	st	X, r5
 560:	df 97       	sbiw	r26, 0x3f	; 63
 562:	70 93 a2 00 	sts	0x00A2, r23
 566:	60 93 a1 00 	sts	0x00A1, r22
 56a:	30 92 a4 00 	sts	0x00A4, r3
 56e:	20 92 a3 00 	sts	0x00A3, r2
 572:	d0 93 a6 00 	sts	0x00A6, r29
 576:	c0 93 a5 00 	sts	0x00A5, r28
 57a:	0f 2e       	mov	r0, r31
 57c:	f7 e0       	ldi	r31, 0x07	; 7
 57e:	7f 2e       	mov	r7, r31
 580:	f0 2d       	mov	r31, r0
 582:	70 92 a7 00 	sts	0x00A7, r7
 586:	e0 93 a8 00 	sts	0x00A8, r30
 58a:	0f 2e       	mov	r0, r31
 58c:	fb e0       	ldi	r31, 0x0B	; 11
 58e:	6f 2e       	mov	r6, r31
 590:	f0 2d       	mov	r31, r0
 592:	60 92 a9 00 	sts	0x00A9, r6
 596:	90 93 ab 00 	sts	0x00AB, r25
 59a:	80 93 aa 00 	sts	0x00AA, r24
 59e:	30 93 ad 00 	sts	0x00AD, r19
 5a2:	20 93 ac 00 	sts	0x00AC, r18
 5a6:	50 93 af 00 	sts	0x00AF, r21
 5aa:	40 93 ae 00 	sts	0x00AE, r20
 5ae:	80 92 b0 00 	sts	0x00B0, r8
 5b2:	e0 93 b1 00 	sts	0x00B1, r30
 5b6:	0f 2e       	mov	r0, r31
 5b8:	fc e0       	ldi	r31, 0x0C	; 12
 5ba:	6f 2e       	mov	r6, r31
 5bc:	f0 2d       	mov	r31, r0
 5be:	60 92 b2 00 	sts	0x00B2, r6
 5c2:	90 93 b4 00 	sts	0x00B4, r25
 5c6:	80 93 b3 00 	sts	0x00B3, r24
 5ca:	30 93 b6 00 	sts	0x00B6, r19
 5ce:	20 93 b5 00 	sts	0x00B5, r18
 5d2:	50 93 b8 00 	sts	0x00B8, r21
 5d6:	40 93 b7 00 	sts	0x00B7, r20
 5da:	f0 93 b9 00 	sts	0x00B9, r31
 5de:	e0 93 ba 00 	sts	0x00BA, r30
 5e2:	fd e0       	ldi	r31, 0x0D	; 13
 5e4:	f0 93 bb 00 	sts	0x00BB, r31
 5e8:	90 93 bd 00 	sts	0x00BD, r25
 5ec:	80 93 bc 00 	sts	0x00BC, r24
 5f0:	30 93 bf 00 	sts	0x00BF, r19
 5f4:	20 93 be 00 	sts	0x00BE, r18
 5f8:	50 93 c1 00 	sts	0x00C1, r21
 5fc:	40 93 c0 00 	sts	0x00C0, r20
 600:	70 92 c2 00 	sts	0x00C2, r7
 604:	e0 93 c3 00 	sts	0x00C3, r30
 608:	8e e0       	ldi	r24, 0x0E	; 14
 60a:	80 93 c4 00 	sts	0x00C4, r24
 60e:	70 93 c6 00 	sts	0x00C6, r23
 612:	60 93 c5 00 	sts	0x00C5, r22
 616:	30 92 c8 00 	sts	0x00C8, r3
 61a:	20 92 c7 00 	sts	0x00C7, r2
 61e:	d0 93 ca 00 	sts	0x00CA, r29
 622:	c0 93 c9 00 	sts	0x00C9, r28
 626:	10 92 cb 00 	sts	0x00CB, r1
 62a:	e0 93 cc 00 	sts	0x00CC, r30
 62e:	8f e0       	ldi	r24, 0x0F	; 15
 630:	80 93 cd 00 	sts	0x00CD, r24
 634:	70 93 cf 00 	sts	0x00CF, r23
 638:	60 93 ce 00 	sts	0x00CE, r22
 63c:	30 92 d1 00 	sts	0x00D1, r3
 640:	20 92 d0 00 	sts	0x00D0, r2
 644:	d0 93 d3 00 	sts	0x00D3, r29
 648:	c0 93 d2 00 	sts	0x00D2, r28
 64c:	e0 93 d4 00 	sts	0x00D4, r30
 650:	e0 93 d5 00 	sts	0x00D5, r30
 654:	80 e1       	ldi	r24, 0x10	; 16
 656:	80 93 d6 00 	sts	0x00D6, r24
 65a:	70 93 d8 00 	sts	0x00D8, r23
 65e:	60 93 d7 00 	sts	0x00D7, r22
 662:	30 92 da 00 	sts	0x00DA, r3
 666:	20 92 d9 00 	sts	0x00D9, r2
 66a:	d0 93 dc 00 	sts	0x00DC, r29
 66e:	c0 93 db 00 	sts	0x00DB, r28
 672:	b0 92 dd 00 	sts	0x00DD, r11
 676:	e0 93 de 00 	sts	0x00DE, r30
 67a:	81 e1       	ldi	r24, 0x11	; 17
 67c:	80 93 df 00 	sts	0x00DF, r24
 680:	70 93 e1 00 	sts	0x00E1, r23
 684:	60 93 e0 00 	sts	0x00E0, r22
 688:	30 92 e3 00 	sts	0x00E3, r3
 68c:	20 92 e2 00 	sts	0x00E2, r2
 690:	d0 93 e5 00 	sts	0x00E5, r29
 694:	c0 93 e4 00 	sts	0x00E4, r28
 698:	a0 92 e6 00 	sts	0x00E6, r10
 69c:	10 92 e7 00 	sts	0x00E7, r1
 6a0:	82 e1       	ldi	r24, 0x12	; 18
 6a2:	80 93 e8 00 	sts	0x00E8, r24
 6a6:	70 93 ea 00 	sts	0x00EA, r23
 6aa:	60 93 e9 00 	sts	0x00E9, r22
 6ae:	30 92 ec 00 	sts	0x00EC, r3
 6b2:	20 92 eb 00 	sts	0x00EB, r2
 6b6:	d0 93 ee 00 	sts	0x00EE, r29
 6ba:	c0 93 ed 00 	sts	0x00ED, r28
 6be:	90 92 ef 00 	sts	0x00EF, r9
 6c2:	10 92 f0 00 	sts	0x00F0, r1
 6c6:	83 e1       	ldi	r24, 0x13	; 19
 6c8:	80 93 f1 00 	sts	0x00F1, r24
 6cc:	70 93 f3 00 	sts	0x00F3, r23
 6d0:	60 93 f2 00 	sts	0x00F2, r22
 6d4:	30 92 f5 00 	sts	0x00F5, r3
 6d8:	20 92 f4 00 	sts	0x00F4, r2
 6dc:	d0 93 f7 00 	sts	0x00F7, r29
 6e0:	c0 93 f6 00 	sts	0x00F6, r28
 6e4:	80 92 f8 00 	sts	0x00F8, r8
 6e8:	10 92 f9 00 	sts	0x00F9, r1
 6ec:	87 e1       	ldi	r24, 0x17	; 23
 6ee:	80 93 fa 00 	sts	0x00FA, r24
 6f2:	10 93 fc 00 	sts	0x00FC, r17
 6f6:	00 93 fb 00 	sts	0x00FB, r16
 6fa:	f0 92 fe 00 	sts	0x00FE, r15
 6fe:	e0 92 fd 00 	sts	0x00FD, r14
 702:	d0 92 00 01 	sts	0x0100, r13
 706:	c0 92 ff 00 	sts	0x00FF, r12
 70a:	10 92 01 01 	sts	0x0101, r1
 70e:	e0 93 02 01 	sts	0x0102, r30
 712:	88 e1       	ldi	r24, 0x18	; 24
 714:	80 93 03 01 	sts	0x0103, r24
 718:	10 93 05 01 	sts	0x0105, r17
 71c:	00 93 04 01 	sts	0x0104, r16
 720:	f0 92 07 01 	sts	0x0107, r15
 724:	e0 92 06 01 	sts	0x0106, r14
 728:	d0 92 09 01 	sts	0x0109, r13
 72c:	c0 92 08 01 	sts	0x0108, r12
 730:	e0 93 0a 01 	sts	0x010A, r30
 734:	e0 93 0b 01 	sts	0x010B, r30
 738:	89 e1       	ldi	r24, 0x19	; 25
 73a:	80 93 0c 01 	sts	0x010C, r24
 73e:	10 93 0e 01 	sts	0x010E, r17
 742:	00 93 0d 01 	sts	0x010D, r16
 746:	f0 92 10 01 	sts	0x0110, r15
 74a:	e0 92 0f 01 	sts	0x010F, r14
 74e:	d0 92 12 01 	sts	0x0112, r13
 752:	c0 92 11 01 	sts	0x0111, r12
 756:	b0 92 13 01 	sts	0x0113, r11
 75a:	e0 93 14 01 	sts	0x0114, r30
 75e:	8a e1       	ldi	r24, 0x1A	; 26
 760:	80 93 15 01 	sts	0x0115, r24
 764:	10 93 17 01 	sts	0x0117, r17
 768:	00 93 16 01 	sts	0x0116, r16
 76c:	f0 92 19 01 	sts	0x0119, r15
 770:	e0 92 18 01 	sts	0x0118, r14
 774:	d0 92 1b 01 	sts	0x011B, r13
 778:	c0 92 1a 01 	sts	0x011A, r12
 77c:	a0 92 1c 01 	sts	0x011C, r10
 780:	e0 93 1d 01 	sts	0x011D, r30
 784:	8b e1       	ldi	r24, 0x1B	; 27
 786:	80 93 1e 01 	sts	0x011E, r24
 78a:	10 93 20 01 	sts	0x0120, r17
 78e:	00 93 1f 01 	sts	0x011F, r16
 792:	f0 92 22 01 	sts	0x0122, r15
 796:	e0 92 21 01 	sts	0x0121, r14
 79a:	d0 92 24 01 	sts	0x0124, r13
 79e:	c0 92 23 01 	sts	0x0123, r12
 7a2:	90 92 25 01 	sts	0x0125, r9
 7a6:	e0 93 26 01 	sts	0x0126, r30
 7aa:	8c e1       	ldi	r24, 0x1C	; 28
 7ac:	80 93 27 01 	sts	0x0127, r24
 7b0:	10 93 29 01 	sts	0x0129, r17
 7b4:	00 93 28 01 	sts	0x0128, r16
 7b8:	f0 92 2b 01 	sts	0x012B, r15
 7bc:	e0 92 2a 01 	sts	0x012A, r14
 7c0:	d0 92 2d 01 	sts	0x012D, r13
 7c4:	c0 92 2c 01 	sts	0x012C, r12
 7c8:	80 92 2e 01 	sts	0x012E, r8
 7cc:	e0 93 2f 01 	sts	0x012F, r30
{
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	1f 91       	pop	r17
 7d6:	0f 91       	pop	r16
 7d8:	ff 90       	pop	r15
 7da:	ef 90       	pop	r14
 7dc:	df 90       	pop	r13
 7de:	cf 90       	pop	r12
 7e0:	bf 90       	pop	r11
 7e2:	af 90       	pop	r10
 7e4:	9f 90       	pop	r9
 7e6:	8f 90       	pop	r8
 7e8:	7f 90       	pop	r7
 7ea:	6f 90       	pop	r6
 7ec:	5f 90       	pop	r5
 7ee:	3f 90       	pop	r3
 7f0:	2f 90       	pop	r2
 7f2:	08 95       	ret

000007f4 <__tablejump2__>:
 7f4:	ee 0f       	add	r30, r30
 7f6:	ff 1f       	adc	r31, r31

000007f8 <__tablejump__>:
 7f8:	05 90       	lpm	r0, Z+
 7fa:	f4 91       	lpm	r31, Z
 7fc:	e0 2d       	mov	r30, r0
 7fe:	09 94       	ijmp

00000800 <_exit>:
 800:	f8 94       	cli

00000802 <__stop_program>:
 802:	ff cf       	rjmp	.-2      	; 0x802 <__stop_program>
