
kalorie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000122c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000122c  000012c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ca  00800062  00800062  000012c2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00001a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ad0  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a45  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa8  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00004af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000836  00000000  00000000  00004f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cfb  00000000  00000000  00005742  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000643d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_13>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	a0 03       	fmuls	r18, r16

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ec e2       	ldi	r30, 0x2C	; 44
      6a:	f2 e1       	ldi	r31, 0x12	; 18
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a2 36       	cpi	r26, 0x62	; 98
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	14 e0       	ldi	r17, 0x04	; 4
      7a:	a2 e6       	ldi	r26, 0x62	; 98
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	ac 32       	cpi	r26, 0x2C	; 44
      84:	b1 07       	cpc	r27, r17
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	c6 e5       	ldi	r28, 0x56	; 86
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	22 97       	sbiw	r28, 0x02	; 2
      92:	fe 01       	movw	r30, r28
      94:	0e 94 10 09 	call	0x1220	; 0x1220 <__tablejump__>
      98:	c4 35       	cpi	r28, 0x54	; 84
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 38 01 	call	0x270	; 0x270 <main>
      a2:	0c 94 14 09 	jmp	0x1228	; 0x1228 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z5statev>:
#include <avr/io.h>
#include "../modules/Usart.h"

void state()
{
	Usart::send(DDRA);
      aa:	8a b3       	in	r24, 0x1a	; 26
      ac:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(DDRB);
      b0:	87 b3       	in	r24, 0x17	; 23
      b2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(DDRC);
      b6:	84 b3       	in	r24, 0x14	; 20
      b8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(DDRD);
      bc:	81 b3       	in	r24, 0x11	; 17
      be:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PORTA);
      c2:	8b b3       	in	r24, 0x1b	; 27
      c4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PORTB);
      c8:	88 b3       	in	r24, 0x18	; 24
      ca:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PORTC);
      ce:	85 b3       	in	r24, 0x15	; 21
      d0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PORTD);
      d4:	82 b3       	in	r24, 0x12	; 18
      d6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PINA);
      da:	89 b3       	in	r24, 0x19	; 25
      dc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PINB);
      e0:	86 b3       	in	r24, 0x16	; 22
      e2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PINC);
      e6:	83 b3       	in	r24, 0x13	; 19
      e8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(PIND);
      ec:	80 b3       	in	r24, 0x10	; 16
      ee:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
}
      f2:	08 95       	ret

000000f4 <_Z10paramsTestv>:
		char p4: 8;
	};
};

void paramsTest()
{
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
     106:	28 97       	sbiw	r28, 0x08	; 8
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	f8 94       	cli
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	0f be       	out	0x3f, r0	; 63
     110:	cd bf       	out	0x3d, r28	; 61
     112:	14 e0       	ldi	r17, 0x04	; 4
	for (uint8_t i = 0; i < 4; ++i)
	{
		Pin::get(22).setHigh();
     114:	0f 2e       	mov	r0, r31
     116:	f6 e1       	ldi	r31, 0x16	; 22
     118:	ef 2e       	mov	r14, r31
     11a:	f0 2d       	mov	r31, r0
		Pin::get(23).setHigh();
     11c:	0f 2e       	mov	r0, r31
     11e:	f7 e1       	ldi	r31, 0x17	; 23
     120:	ff 2e       	mov	r15, r31
     122:	f0 2d       	mov	r31, r0
		Pin::get(24).setHigh();
     124:	08 e1       	ldi	r16, 0x18	; 24
		Pin::get(25).setHigh();
     126:	0f 2e       	mov	r0, r31
     128:	f9 e1       	ldi	r31, 0x19	; 25
     12a:	df 2e       	mov	r13, r31
     12c:	f0 2d       	mov	r31, r0

void paramsTest()
{
	for (uint8_t i = 0; i < 4; ++i)
	{
		Pin::get(22).setHigh();
     12e:	e8 86       	std	Y+8, r14	; 0x08
     130:	ce 01       	movw	r24, r28
     132:	08 96       	adiw	r24, 0x08	; 8
     134:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     138:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN3Pin7setHighEv>
		Pin::get(23).setHigh();
     13c:	ff 82       	std	Y+7, r15	; 0x07
     13e:	ce 01       	movw	r24, r28
     140:	07 96       	adiw	r24, 0x07	; 7
     142:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     146:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN3Pin7setHighEv>
		Pin::get(24).setHigh();
     14a:	0e 83       	std	Y+6, r16	; 0x06
     14c:	ce 01       	movw	r24, r28
     14e:	06 96       	adiw	r24, 0x06	; 6
     150:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     154:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN3Pin7setHighEv>
		Pin::get(25).setHigh();
     158:	dd 82       	std	Y+5, r13	; 0x05
     15a:	ce 01       	movw	r24, r28
     15c:	05 96       	adiw	r24, 0x05	; 5
     15e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     162:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN3Pin7setHighEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	9f e7       	ldi	r25, 0x7F	; 127
     16a:	a4 e0       	ldi	r26, 0x04	; 4
     16c:	81 50       	subi	r24, 0x01	; 1
     16e:	90 40       	sbci	r25, 0x00	; 0
     170:	a0 40       	sbci	r26, 0x00	; 0
     172:	e1 f7       	brne	.-8      	; 0x16c <_Z10paramsTestv+0x78>
     174:	00 c0       	rjmp	.+0      	; 0x176 <_Z10paramsTestv+0x82>
     176:	00 00       	nop
		_delay_ms(100);
		Pin::get(22).setLow();
     178:	ec 82       	std	Y+4, r14	; 0x04
     17a:	ce 01       	movw	r24, r28
     17c:	04 96       	adiw	r24, 0x04	; 4
     17e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     182:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Pin6setLowEv>
		Pin::get(23).setLow();
     186:	fb 82       	std	Y+3, r15	; 0x03
     188:	ce 01       	movw	r24, r28
     18a:	03 96       	adiw	r24, 0x03	; 3
     18c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     190:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Pin6setLowEv>
		Pin::get(24).setLow();
     194:	0a 83       	std	Y+2, r16	; 0x02
     196:	ce 01       	movw	r24, r28
     198:	02 96       	adiw	r24, 0x02	; 2
     19a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     19e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Pin6setLowEv>
		Pin::get(25).setLow();
     1a2:	d9 82       	std	Y+1, r13	; 0x01
     1a4:	ce 01       	movw	r24, r28
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     1ac:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Pin6setLowEv>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	9f e7       	ldi	r25, 0x7F	; 127
     1b4:	a4 e0       	ldi	r26, 0x04	; 4
     1b6:	81 50       	subi	r24, 0x01	; 1
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	a0 40       	sbci	r26, 0x00	; 0
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <_Z10paramsTestv+0xc2>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <_Z10paramsTestv+0xcc>
     1c0:	00 00       	nop
     1c2:	11 50       	subi	r17, 0x01	; 1
	};
};

void paramsTest()
{
	for (uint8_t i = 0; i < 4; ++i)
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <_Z10paramsTestv+0xd4>
     1c6:	b3 cf       	rjmp	.-154    	; 0x12e <_Z10paramsTestv+0x3a>
		Pin::get(25).setLow();
		_delay_ms(100);
	}
	MyParams myParams;
	myParams.params[0] = Usart::params[0];
	myParams.params[1] = Usart::params[1];
     1c8:	f0 90 89 01 	lds	r15, 0x0189
	myParams.params[2] = Usart::params[2];
     1cc:	00 91 8a 01 	lds	r16, 0x018A
	myParams.params[3] = Usart::params[3];
     1d0:	10 91 8b 01 	lds	r17, 0x018B
	Usart::send(myParams.p1);
     1d4:	80 91 88 01 	lds	r24, 0x0188
     1d8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(myParams.p2);
     1dc:	8f 2d       	mov	r24, r15
     1de:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(myParams.p3);
     1e2:	80 2f       	mov	r24, r16
     1e4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	Usart::send(myParams.p4);
     1e8:	81 2f       	mov	r24, r17
     1ea:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
}
     1ee:	28 96       	adiw	r28, 0x08	; 8
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	ff 90       	pop	r15
     204:	ef 90       	pop	r14
     206:	df 90       	pop	r13
     208:	08 95       	ret

0000020a <_Z17temperatureSensorv>:
#include "../modules/Usart.h"
#include "../modules/Adc.h"
#include "../modules/Pin.h"

void temperatureSensor()
{
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <_Z17temperatureSensorv+0xc>
     216:	0f 92       	push	r0
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t adcPinNr = 5; adcPinNr < 8; ++adcPinNr)
     21c:	85 e0       	ldi	r24, 0x05	; 5
     21e:	8b 83       	std	Y+3, r24	; 0x03
	{
		Adc::configureSingle(adcPinNr, Adc::V2_56);
     220:	0f 2e       	mov	r0, r31
     222:	f0 ec       	ldi	r31, 0xC0	; 192
     224:	ff 2e       	mov	r15, r31
     226:	f0 2d       	mov	r31, r0
     228:	06 e0       	ldi	r16, 0x06	; 6
     22a:	fa 82       	std	Y+2, r15	; 0x02
     22c:	09 83       	std	Y+1, r16	; 0x01
     22e:	ce 01       	movw	r24, r28
     230:	03 96       	adiw	r24, 0x03	; 3
     232:	be 01       	movw	r22, r28
     234:	6e 5f       	subi	r22, 0xFE	; 254
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	ae 01       	movw	r20, r28
     23a:	4f 5f       	subi	r20, 0xFF	; 255
     23c:	5f 4f       	sbci	r21, 0xFF	; 255
     23e:	0e 94 8c 01 	call	0x318	; 0x318 <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE>
		Adc::Measurement measurement = Adc::measure();
     242:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN3Adc7measureEv>
     246:	18 2f       	mov	r17, r24
		Usart::send(measurement.high);
     248:	89 2f       	mov	r24, r25
     24a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
		Usart::send(measurement.low);
     24e:	81 2f       	mov	r24, r17
     250:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
#include "../modules/Adc.h"
#include "../modules/Pin.h"

void temperatureSensor()
{
	for (uint8_t adcPinNr = 5; adcPinNr < 8; ++adcPinNr)
     254:	8b 81       	ldd	r24, Y+3	; 0x03
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	8b 83       	std	Y+3, r24	; 0x03
     25a:	88 30       	cpi	r24, 0x08	; 8
     25c:	30 f3       	brcs	.-52     	; 0x22a <_Z17temperatureSensorv+0x20>
		Adc::configureSingle(adcPinNr, Adc::V2_56);
		Adc::Measurement measurement = Adc::measure();
		Usart::send(measurement.high);
		Usart::send(measurement.low);
	}
}
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	ff 90       	pop	r15
     26e:	08 95       	ret

00000270 <main>:
#include "config/scenario_glue.h"
#include "modules/Usart.h"
#include "modules/Adc.h"

int main(void)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	2c 97       	sbiw	r28, 0x0c	; 12
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
	Usart::init();
     284:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN5Usart4initEv>
Usart::pushFunction(Usart::Scenario(state, 0), 32);
     288:	19 86       	std	Y+9, r1	; 0x09
     28a:	ce 01       	movw	r24, r28
     28c:	0a 96       	adiw	r24, 0x0a	; 10
     28e:	65 e5       	ldi	r22, 0x55	; 85
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	ae 01       	movw	r20, r28
     294:	47 5f       	subi	r20, 0xF7	; 247
     296:	5f 4f       	sbci	r21, 0xFF	; 255
     298:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Usart8ScenarioC1EPFvvERKh>
     29c:	ce 01       	movw	r24, r28
     29e:	0a 96       	adiw	r24, 0x0a	; 10
     2a0:	60 e2       	ldi	r22, 0x20	; 32
     2a2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>
Usart::pushFunction(Usart::Scenario(temperatureSensor, 0), 33);
     2a6:	1d 82       	std	Y+5, r1	; 0x05
     2a8:	ce 01       	movw	r24, r28
     2aa:	06 96       	adiw	r24, 0x06	; 6
     2ac:	65 e0       	ldi	r22, 0x05	; 5
     2ae:	71 e0       	ldi	r23, 0x01	; 1
     2b0:	ae 01       	movw	r20, r28
     2b2:	4b 5f       	subi	r20, 0xFB	; 251
     2b4:	5f 4f       	sbci	r21, 0xFF	; 255
     2b6:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Usart8ScenarioC1EPFvvERKh>
     2ba:	ce 01       	movw	r24, r28
     2bc:	06 96       	adiw	r24, 0x06	; 6
     2be:	61 e2       	ldi	r22, 0x21	; 33
     2c0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>
     2c4:	84 e0       	ldi	r24, 0x04	; 4
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	ce 01       	movw	r24, r28
     2ca:	02 96       	adiw	r24, 0x02	; 2
     2cc:	6a e7       	ldi	r22, 0x7A	; 122
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	ae 01       	movw	r20, r28
     2d2:	4f 5f       	subi	r20, 0xFF	; 255
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Usart8ScenarioC1EPFvvERKh>
     2da:	ce 01       	movw	r24, r28
     2dc:	02 96       	adiw	r24, 0x02	; 2
     2de:	62 e2       	ldi	r22, 0x22	; 34
     2e0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>
	#include "config/scenario_register.h"
	Usart::run();
     2e4:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN5Usart3runEv>
	return 0;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	2c 96       	adiw	r28, 0x0c	; 12
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_ZN3Adc11MeasurementC1ERVKhS2_>:

bool Adc::isConfigured = false;
uint8_t Adc::mux;
Adc::PRESCALER Adc::prescaler = Adc::_64;

Adc::Measurement::Measurement(const Register::ADDR &low, const Register::ADDR &high)
     2fe:	fc 01       	movw	r30, r24
: low(low), high(high)
     300:	db 01       	movw	r26, r22
     302:	8c 91       	ld	r24, X
     304:	80 83       	st	Z, r24
     306:	da 01       	movw	r26, r20
     308:	8c 91       	ld	r24, X
     30a:	81 83       	std	Z+1, r24	; 0x01
{
}
     30c:	08 95       	ret

0000030e <_ZN3Adc11MeasurementC1Ev>:

Adc::Measurement::Measurement()
     30e:	fc 01       	movw	r30, r24
: low(0xff), high(0xff)
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	80 83       	st	Z, r24
     314:	81 83       	std	Z+1, r24	; 0x01
{
}
     316:	08 95       	ret

00000318 <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE>:

void Adc::configureSingle(const uint8_t &pin, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE+0xc>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	7c 01       	movw	r14, r24
	if (pin > 0x07)
     32a:	fc 01       	movw	r30, r24
     32c:	80 81       	ld	r24, Z
     32e:	88 30       	cpi	r24, 0x08	; 8
     330:	18 f5       	brcc	.+70     	; 0x378 <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE+0x60>
		return;
	mux = vref | (pin & 0x07);
     332:	87 70       	andi	r24, 0x07	; 7
     334:	fb 01       	movw	r30, r22
     336:	90 81       	ld	r25, Z
     338:	89 2b       	or	r24, r25
     33a:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     33e:	fa 01       	movw	r30, r20
     340:	80 81       	ld	r24, Z
     342:	80 93 60 00 	sts	0x0060, r24
     346:	18 e2       	ldi	r17, 0x28	; 40
	for (uint8_t i = 0; i <= 0x07; ++i)
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
     348:	1a 83       	std	Y+2, r17	; 0x02
     34a:	ce 01       	movw	r24, r28
     34c:	02 96       	adiw	r24, 0x02	; 2
     34e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     352:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN3Pin6pullUpEv>
     356:	11 50       	subi	r17, 0x01	; 1
{
	if (pin > 0x07)
		return;
	mux = vref | (pin & 0x07);
	Adc::prescaler = prescaler;
	for (uint8_t i = 0; i <= 0x07; ++i)
     358:	10 32       	cpi	r17, 0x20	; 32
     35a:	b1 f7       	brne	.-20     	; 0x348 <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE+0x30>
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
	Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * pin).read();
     35c:	f7 01       	movw	r30, r14
     35e:	90 81       	ld	r25, Z
     360:	88 e2       	ldi	r24, 0x28	; 40
     362:	89 1b       	sub	r24, r25
     364:	89 83       	std	Y+1, r24	; 0x01
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     36e:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3Pin4readEv>
	isConfigured = true;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	80 93 63 00 	sts	0x0063, r24
}
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	08 95       	ret

00000388 <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE>:

void Adc::configureGained(const Adc::PIN_PAIR &pinPair, const bool &isCallibration, const Adc::GAIN &gain, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x12>
     39a:	00 d0       	rcall	.+0      	; 0x39c <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x14>
     39c:	0f 92       	push	r0
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	6c 01       	movw	r12, r24
     3a4:	7b 01       	movw	r14, r22
     3a6:	f8 01       	movw	r30, r16
	mux = pinPair | gain | (!isCallibration) | vref;
     3a8:	da 01       	movw	r26, r20
     3aa:	9c 91       	ld	r25, X
     3ac:	d6 01       	movw	r26, r12
     3ae:	8c 91       	ld	r24, X
     3b0:	98 2b       	or	r25, r24
     3b2:	db 01       	movw	r26, r22
     3b4:	4c 91       	ld	r20, X
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	84 27       	eor	r24, r20
     3ba:	89 2b       	or	r24, r25
     3bc:	d9 01       	movw	r26, r18
     3be:	9c 91       	ld	r25, X
     3c0:	89 2b       	or	r24, r25
     3c2:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     3c6:	80 81       	ld	r24, Z
     3c8:	80 93 60 00 	sts	0x0060, r24
     3cc:	18 e2       	ldi	r17, 0x28	; 40
	for (uint8_t i = 0; i <= 0x07; ++i)
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
     3ce:	1d 83       	std	Y+5, r17	; 0x05
     3d0:	ce 01       	movw	r24, r28
     3d2:	05 96       	adiw	r24, 0x05	; 5
     3d4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     3d8:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN3Pin6pullUpEv>
     3dc:	11 50       	subi	r17, 0x01	; 1

void Adc::configureGained(const Adc::PIN_PAIR &pinPair, const bool &isCallibration, const Adc::GAIN &gain, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
	mux = pinPair | gain | (!isCallibration) | vref;
	Adc::prescaler = prescaler;
	for (uint8_t i = 0; i <= 0x07; ++i)
     3de:	10 32       	cpi	r17, 0x20	; 32
     3e0:	b1 f7       	brne	.-20     	; 0x3ce <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x46>
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
	if (!isCallibration)
     3e2:	f7 01       	movw	r30, r14
     3e4:	80 81       	ld	r24, Z
     3e6:	88 23       	and	r24, r24
     3e8:	41 f5       	brne	.+80     	; 0x43a <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0xb2>
	{
		switch (pinPair)
     3ea:	d6 01       	movw	r26, r12
     3ec:	8c 91       	ld	r24, X
     3ee:	88 23       	and	r24, r24
     3f0:	19 f0       	breq	.+6      	; 0x3f8 <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x70>
     3f2:	84 30       	cpi	r24, 0x04	; 4
     3f4:	11 f5       	brne	.+68     	; 0x43a <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0xb2>
     3f6:	11 c0       	rjmp	.+34     	; 0x41a <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x92>
		{
			case _0_1:
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 0).read();
     3f8:	88 e2       	ldi	r24, 0x28	; 40
     3fa:	8c 83       	std	Y+4, r24	; 0x04
     3fc:	ce 01       	movw	r24, r28
     3fe:	04 96       	adiw	r24, 0x04	; 4
     400:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     404:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3Pin4readEv>
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 1).read();
     408:	87 e2       	ldi	r24, 0x27	; 39
     40a:	8b 83       	std	Y+3, r24	; 0x03
     40c:	ce 01       	movw	r24, r28
     40e:	03 96       	adiw	r24, 0x03	; 3
     410:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     414:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3Pin4readEv>
				break;
     418:	10 c0       	rjmp	.+32     	; 0x43a <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0xb2>
			case _3_2:
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 2).read();
     41a:	86 e2       	ldi	r24, 0x26	; 38
     41c:	8a 83       	std	Y+2, r24	; 0x02
     41e:	ce 01       	movw	r24, r28
     420:	02 96       	adiw	r24, 0x02	; 2
     422:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     426:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3Pin4readEv>
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 3).read();
     42a:	85 e2       	ldi	r24, 0x25	; 37
     42c:	89 83       	std	Y+1, r24	; 0x01
     42e:	ce 01       	movw	r24, r28
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     436:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3Pin4readEv>
				break;
		}			
	}
	isConfigured = true;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 63 00 	sts	0x0063, r24
}
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	df 90       	pop	r13
     458:	cf 90       	pop	r12
     45a:	08 95       	ret

0000045c <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE>:

void Adc::configureDifferential(const uint8_t &pinPlus, const uint8_t &pinMinus, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	00 d0       	rcall	.+0      	; 0x46c <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x10>
     46c:	0f 92       	push	r0
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	6c 01       	movw	r12, r24
     474:	7b 01       	movw	r14, r22
	if (pinMinus == 1)
     476:	fb 01       	movw	r30, r22
     478:	80 81       	ld	r24, Z
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	41 f4       	brne	.+16     	; 0x48e <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x32>
	{
		if (pinPlus > 0x07)
     47e:	f6 01       	movw	r30, r12
     480:	80 81       	ld	r24, Z
     482:	88 30       	cpi	r24, 0x08	; 8
     484:	08 f0       	brcs	.+2      	; 0x488 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x2c>
     486:	3f c0       	rjmp	.+126    	; 0x506 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0xaa>
			return;
		mux = 0x00;
     488:	10 92 62 00 	sts	0x0062, r1
     48c:	09 c0       	rjmp	.+18     	; 0x4a0 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x44>
	}
	else if (pinMinus == 2)
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	d1 f5       	brne	.+116    	; 0x506 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0xaa>
	{
		if (pinPlus > 0x05)
     492:	f6 01       	movw	r30, r12
     494:	80 81       	ld	r24, Z
     496:	86 30       	cpi	r24, 0x06	; 6
     498:	b0 f5       	brcc	.+108    	; 0x506 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0xaa>
			return;
		mux = 0x08;
     49a:	88 e0       	ldi	r24, 0x08	; 8
     49c:	80 93 62 00 	sts	0x0062, r24
	}
	else
		return;
	mux |= (0x10 | pinMinus | vref);
     4a0:	80 91 62 00 	lds	r24, 0x0062
     4a4:	80 61       	ori	r24, 0x10	; 16
     4a6:	f7 01       	movw	r30, r14
     4a8:	90 81       	ld	r25, Z
     4aa:	89 2b       	or	r24, r25
     4ac:	fa 01       	movw	r30, r20
     4ae:	90 81       	ld	r25, Z
     4b0:	89 2b       	or	r24, r25
     4b2:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     4b6:	f9 01       	movw	r30, r18
     4b8:	80 81       	ld	r24, Z
     4ba:	80 93 60 00 	sts	0x0060, r24
     4be:	18 e2       	ldi	r17, 0x28	; 40
	for (uint8_t i = 0; i <= 0x07; ++i)
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
     4c0:	1b 83       	std	Y+3, r17	; 0x03
     4c2:	ce 01       	movw	r24, r28
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     4ca:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN3Pin6pullUpEv>
     4ce:	11 50       	subi	r17, 0x01	; 1
	}
	else
		return;
	mux |= (0x10 | pinMinus | vref);
	Adc::prescaler = prescaler;
	for (uint8_t i = 0; i <= 0x07; ++i)
     4d0:	10 32       	cpi	r17, 0x20	; 32
     4d2:	b1 f7       	brne	.-20     	; 0x4c0 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x64>
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
	Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * pinPlus).read();
     4d4:	18 e2       	ldi	r17, 0x28	; 40
     4d6:	f6 01       	movw	r30, r12
     4d8:	80 81       	ld	r24, Z
     4da:	f1 2f       	mov	r31, r17
     4dc:	f8 1b       	sub	r31, r24
     4de:	fa 83       	std	Y+2, r31	; 0x02
     4e0:	ce 01       	movw	r24, r28
     4e2:	02 96       	adiw	r24, 0x02	; 2
     4e4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     4e8:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3Pin4readEv>
	Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * pinMinus).read();
     4ec:	f7 01       	movw	r30, r14
     4ee:	80 81       	ld	r24, Z
     4f0:	18 1b       	sub	r17, r24
     4f2:	19 83       	std	Y+1, r17	; 0x01
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
     4fc:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3Pin4readEv>
	isConfigured = true;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 63 00 	sts	0x0063, r24
}
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	df 90       	pop	r13
     518:	cf 90       	pop	r12
     51a:	08 95       	ret

0000051c <_ZN3Adc16configureSpecialERKNS_12SPECIAL_VREFERKNS_9PRESCALERE>:

void Adc::configureSpecial(const Adc::SPECIAL_VREF &specialVref, const Adc::PRESCALER &prescaler)
{
	mux = specialVref;
     51c:	fc 01       	movw	r30, r24
     51e:	80 81       	ld	r24, Z
     520:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     524:	fb 01       	movw	r30, r22
     526:	80 81       	ld	r24, Z
     528:	80 93 60 00 	sts	0x0060, r24
	isConfigured = true;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 63 00 	sts	0x0063, r24
}
     532:	08 95       	ret

00000534 <_ZN3Adc12setRegistersEv>:

void Adc::setRegisters()
{
	while (ADCSRA & (1<<ADSC));
     534:	36 99       	sbic	0x06, 6	; 6
     536:	fe cf       	rjmp	.-4      	; 0x534 <_ZN3Adc12setRegistersEv>
	ADCSRA &= ~(1<<ADEN);
     538:	37 98       	cbi	0x06, 7	; 6
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	a8 e0       	ldi	r26, 0x08	; 8
     540:	81 50       	subi	r24, 0x01	; 1
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	a0 40       	sbci	r26, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <_ZN3Adc12setRegistersEv+0xc>
     548:	00 c0       	rjmp	.+0      	; 0x54a <_ZN3Adc12setRegistersEv+0x16>
     54a:	00 00       	nop
	_delay_ms(ADC_SLEEP_TIME);
	ADCSRA |= (1<<ADEN) | prescaler;
     54c:	96 b1       	in	r25, 0x06	; 6
     54e:	80 91 60 00 	lds	r24, 0x0060
     552:	89 2b       	or	r24, r25
     554:	80 68       	ori	r24, 0x80	; 128
     556:	86 b9       	out	0x06, r24	; 6
	ADMUX |= mux;
     558:	97 b1       	in	r25, 0x07	; 7
     55a:	80 91 62 00 	lds	r24, 0x0062
     55e:	89 2b       	or	r24, r25
     560:	87 b9       	out	0x07, r24	; 7
	sei();
     562:	78 94       	sei
}
     564:	08 95       	ret

00000566 <_ZN3Adc7measureEv>:

const Adc::Measurement Adc::measure()
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	00 d0       	rcall	.+0      	; 0x56c <_ZN3Adc7measureEv+0x6>
     56c:	00 d0       	rcall	.+0      	; 0x56e <_ZN3Adc7measureEv+0x8>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	if (!isConfigured)
     572:	80 91 63 00 	lds	r24, 0x0063
     576:	88 23       	and	r24, r24
     578:	39 f4       	brne	.+14     	; 0x588 <_ZN3Adc7measureEv+0x22>
		return Adc::Measurement();
     57a:	ce 01       	movw	r24, r28
     57c:	03 96       	adiw	r24, 0x03	; 3
     57e:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN3Adc11MeasurementC1Ev>
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	9c 81       	ldd	r25, Y+4	; 0x04
     586:	0f c0       	rjmp	.+30     	; 0x5a6 <_ZN3Adc7measureEv+0x40>
	setRegisters();
     588:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN3Adc12setRegistersEv>
	ADCSRA |= (1<<ADSC);
     58c:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     58e:	36 99       	sbic	0x06, 6	; 6
     590:	fe cf       	rjmp	.-4      	; 0x58e <_ZN3Adc7measureEv+0x28>
	return Adc::Measurement(ADCL, ADCH);
     592:	ce 01       	movw	r24, r28
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	64 e2       	ldi	r22, 0x24	; 36
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	45 e2       	ldi	r20, 0x25	; 37
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN3Adc11MeasurementC1ERVKhS2_>
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <_ZN3Pin6setLowEv>:
};

// interface

void Pin::setLow()
{
     5b4:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
     5b6:	a1 81       	ldd	r26, Z+1	; 0x01
     5b8:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
     5ba:	4c 91       	ld	r20, X
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	c9 01       	movw	r24, r18
     5c2:	07 80       	ldd	r0, Z+7	; 0x07
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <_ZN3Pin6setLowEv+0x16>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	0a 94       	dec	r0
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <_ZN3Pin6setLowEv+0x12>
     5ce:	84 2b       	or	r24, r20
     5d0:	8c 93       	st	X, r24
	Register::setOff(outState, addrMask);
     5d2:	a5 81       	ldd	r26, Z+5	; 0x05
     5d4:	b6 81       	ldd	r27, Z+6	; 0x06
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
     5d6:	8c 91       	ld	r24, X
     5d8:	07 80       	ldd	r0, Z+7	; 0x07
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <_ZN3Pin6setLowEv+0x2c>
     5dc:	22 0f       	add	r18, r18
     5de:	33 1f       	adc	r19, r19
     5e0:	0a 94       	dec	r0
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <_ZN3Pin6setLowEv+0x28>
     5e4:	20 95       	com	r18
     5e6:	28 23       	and	r18, r24
     5e8:	2c 93       	st	X, r18
}
     5ea:	08 95       	ret

000005ec <_ZN3Pin7setHighEv>:

void Pin::setHigh()
{
     5ec:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
     5ee:	a1 81       	ldd	r26, Z+1	; 0x01
     5f0:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
     5f2:	4c 91       	ld	r20, X
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	c9 01       	movw	r24, r18
     5fa:	07 80       	ldd	r0, Z+7	; 0x07
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <_ZN3Pin7setHighEv+0x16>
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	0a 94       	dec	r0
     604:	e2 f7       	brpl	.-8      	; 0x5fe <_ZN3Pin7setHighEv+0x12>
     606:	84 2b       	or	r24, r20
     608:	8c 93       	st	X, r24
	Register::setOn(outState, addrMask);
     60a:	a5 81       	ldd	r26, Z+5	; 0x05
     60c:	b6 81       	ldd	r27, Z+6	; 0x06
     60e:	8c 91       	ld	r24, X
     610:	07 80       	ldd	r0, Z+7	; 0x07
     612:	02 c0       	rjmp	.+4      	; 0x618 <_ZN3Pin7setHighEv+0x2c>
     614:	22 0f       	add	r18, r18
     616:	33 1f       	adc	r19, r19
     618:	0a 94       	dec	r0
     61a:	e2 f7       	brpl	.-8      	; 0x614 <_ZN3Pin7setHighEv+0x28>
     61c:	28 2b       	or	r18, r24
     61e:	2c 93       	st	X, r18
}
     620:	08 95       	ret

00000622 <_ZNK3Pin6isHighEv>:

const bool Pin::isHigh() const
{
     622:	fc 01       	movw	r30, r24
	return Register::isHigh(outState, addrMask);
     624:	a5 81       	ldd	r26, Z+5	; 0x05
     626:	b6 81       	ldd	r27, Z+6	; 0x06
		addr &= ~(1<<bitNr);
	}
	
	static const bool isHigh(const ADDR &addr, const BIT_NR &bitNr)
	{
		return addr & (1<<bitNr);
     628:	8c 91       	ld	r24, X
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	07 80       	ldd	r0, Z+7	; 0x07
     62e:	02 c0       	rjmp	.+4      	; 0x634 <_ZNK3Pin6isHighEv+0x12>
     630:	95 95       	asr	r25
     632:	87 95       	ror	r24
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <_ZNK3Pin6isHighEv+0xe>
}
     638:	81 70       	andi	r24, 0x01	; 1
     63a:	08 95       	ret

0000063c <_ZN3Pin4readEv>:

void Pin::read()
{
     63c:	fc 01       	movw	r30, r24
	Register::setOff(direction, addrMask);
     63e:	a1 81       	ldd	r26, Z+1	; 0x01
     640:	b2 81       	ldd	r27, Z+2	; 0x02
		addr |= (1<<bitNr);
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
     642:	4c 91       	ld	r20, X
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	c9 01       	movw	r24, r18
     64a:	07 80       	ldd	r0, Z+7	; 0x07
     64c:	02 c0       	rjmp	.+4      	; 0x652 <_ZN3Pin4readEv+0x16>
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	0a 94       	dec	r0
     654:	e2 f7       	brpl	.-8      	; 0x64e <_ZN3Pin4readEv+0x12>
     656:	80 95       	com	r24
     658:	84 23       	and	r24, r20
     65a:	8c 93       	st	X, r24
	Register::setOff(outState, addrMask);
     65c:	a5 81       	ldd	r26, Z+5	; 0x05
     65e:	b6 81       	ldd	r27, Z+6	; 0x06
     660:	8c 91       	ld	r24, X
     662:	07 80       	ldd	r0, Z+7	; 0x07
     664:	02 c0       	rjmp	.+4      	; 0x66a <_ZN3Pin4readEv+0x2e>
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	0a 94       	dec	r0
     66c:	e2 f7       	brpl	.-8      	; 0x666 <_ZN3Pin4readEv+0x2a>
     66e:	20 95       	com	r18
     670:	28 23       	and	r18, r24
     672:	2c 93       	st	X, r18
}
     674:	08 95       	ret

00000676 <_ZN3Pin6pullUpEv>:

void Pin::pullUp()
{
     676:	fc 01       	movw	r30, r24
	Register::setOff(direction, addrMask);
     678:	a1 81       	ldd	r26, Z+1	; 0x01
     67a:	b2 81       	ldd	r27, Z+2	; 0x02
     67c:	4c 91       	ld	r20, X
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	c9 01       	movw	r24, r18
     684:	07 80       	ldd	r0, Z+7	; 0x07
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN3Pin6pullUpEv+0x16>
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <_ZN3Pin6pullUpEv+0x12>
     690:	80 95       	com	r24
     692:	84 23       	and	r24, r20
     694:	8c 93       	st	X, r24
	Register::setOn(outState, addrMask);
     696:	a5 81       	ldd	r26, Z+5	; 0x05
     698:	b6 81       	ldd	r27, Z+6	; 0x06
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
     69a:	8c 91       	ld	r24, X
     69c:	07 80       	ldd	r0, Z+7	; 0x07
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <_ZN3Pin6pullUpEv+0x2e>
     6a0:	22 0f       	add	r18, r18
     6a2:	33 1f       	adc	r19, r19
     6a4:	0a 94       	dec	r0
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <_ZN3Pin6pullUpEv+0x2a>
     6a8:	28 2b       	or	r18, r24
     6aa:	2c 93       	st	X, r18
}
     6ac:	08 95       	ret

000006ae <_ZNK3Pin11getAddrMaskEv>:

const Register::BIT_NR &Pin::getAddrMask() const
{
	return addrMask;
     6ae:	07 96       	adiw	r24, 0x07	; 7
}
     6b0:	08 95       	ret

000006b2 <_ZN3Pin3getERKh>:

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
	{
		if (index == instances[i].nr)
     6b2:	fc 01       	movw	r30, r24
     6b4:	90 81       	ld	r25, Z
     6b6:	80 91 64 00 	lds	r24, 0x0064
     6ba:	98 17       	cp	r25, r24
     6bc:	49 f0       	breq	.+18     	; 0x6d0 <_ZN3Pin3getERKh+0x1e>
     6be:	ed e6       	ldi	r30, 0x6D	; 109
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	a9 01       	movw	r20, r18
     6c8:	80 81       	ld	r24, Z
     6ca:	89 17       	cp	r24, r25
     6cc:	79 f4       	brne	.+30     	; 0x6ec <_ZN3Pin3getERKh+0x3a>
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <_ZN3Pin3getERKh+0x22>
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	50 e0       	ldi	r21, 0x00	; 0
			return instances[i];
     6d4:	ca 01       	movw	r24, r20
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	84 0f       	add	r24, r20
     6e4:	95 1f       	adc	r25, r21
     6e6:	8c 59       	subi	r24, 0x9C	; 156
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	08 95       	ret
     6ec:	2f 5f       	subi	r18, 0xFF	; 255
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	39 96       	adiw	r30, 0x09	; 9
	return addrMask;
}

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
     6f2:	20 32       	cpi	r18, 0x20	; 32
     6f4:	31 05       	cpc	r19, r1
     6f6:	39 f7       	brne	.-50     	; 0x6c6 <_ZN3Pin3getERKh+0x14>
	{
		if (index == instances[i].nr)
			return instances[i];
	}
	return instances[0];
     6f8:	84 e6       	ldi	r24, 0x64	; 100
     6fa:	90 e0       	ldi	r25, 0x00	; 0
}
     6fc:	08 95       	ret

000006fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>:

// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	fc 01       	movw	r30, r24
     710:	e7 01       	movw	r28, r14
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
     712:	db 01       	movw	r26, r22
     714:	8c 91       	ld	r24, X
     716:	80 83       	st	Z, r24
     718:	52 83       	std	Z+2, r21	; 0x02
     71a:	41 83       	std	Z+1, r20	; 0x01
     71c:	34 83       	std	Z+4, r19	; 0x04
     71e:	23 83       	std	Z+3, r18	; 0x03
     720:	16 83       	std	Z+6, r17	; 0x06
     722:	05 83       	std	Z+5, r16	; 0x05
     724:	88 81       	ld	r24, Y
     726:	87 83       	std	Z+7, r24	; 0x07
     728:	d6 01       	movw	r26, r12
     72a:	8c 91       	ld	r24, X
     72c:	80 87       	std	Z+8, r24	; 0x08
{
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	08 95       	ret

00000740 <_GLOBAL__sub_I__ZN3Pin9instancesE>:
     740:	2f 92       	push	r2
     742:	3f 92       	push	r3
     744:	4f 92       	push	r4
     746:	5f 92       	push	r5
     748:	6f 92       	push	r6
     74a:	7f 92       	push	r7
     74c:	8f 92       	push	r8
     74e:	9f 92       	push	r9
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	c0 58       	subi	r28, 0x80	; 128
     768:	d0 40       	sbci	r29, 0x00	; 0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
// static members

Pin Pin::instances[] =
{
	#include "../config/pinout.h"
};
     774:	bb 24       	eor	r11, r11
     776:	b3 94       	inc	r11
     778:	b9 82       	std	Y+1, r11	; 0x01
     77a:	1b 82       	std	Y+3, r1	; 0x03
     77c:	1a 82       	std	Y+2, r1	; 0x02
     77e:	bc 82       	std	Y+4, r11	; 0x04
     780:	0f 2e       	mov	r0, r31
     782:	f4 e6       	ldi	r31, 0x64	; 100
     784:	8f 2e       	mov	r8, r31
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	9f 2e       	mov	r9, r31
     78a:	f0 2d       	mov	r31, r0
     78c:	c4 01       	movw	r24, r8
     78e:	be 01       	movw	r22, r28
     790:	6f 5f       	subi	r22, 0xFF	; 255
     792:	7f 4f       	sbci	r23, 0xFF	; 255
     794:	47 e3       	ldi	r20, 0x37	; 55
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	26 e3       	ldi	r18, 0x36	; 54
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	08 e3       	ldi	r16, 0x38	; 56
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	ee 24       	eor	r14, r14
     7a2:	ff 24       	eor	r15, r15
     7a4:	68 94       	set
     7a6:	e1 f8       	bld	r14, 1
     7a8:	ec 0e       	add	r14, r28
     7aa:	fd 1e       	adc	r15, r29
     7ac:	cc 24       	eor	r12, r12
     7ae:	dd 24       	eor	r13, r13
     7b0:	68 94       	set
     7b2:	c2 f8       	bld	r12, 2
     7b4:	cc 0e       	add	r12, r28
     7b6:	dd 1e       	adc	r13, r29
     7b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	8d 83       	std	Y+5, r24	; 0x05
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	9f 83       	std	Y+7, r25	; 0x07
     7c6:	8e 83       	std	Y+6, r24	; 0x06
     7c8:	b8 86       	std	Y+8, r11	; 0x08
     7ca:	c4 01       	movw	r24, r8
     7cc:	09 96       	adiw	r24, 0x09	; 9
     7ce:	be 01       	movw	r22, r28
     7d0:	6b 5f       	subi	r22, 0xFB	; 251
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	47 e3       	ldi	r20, 0x37	; 55
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	26 e3       	ldi	r18, 0x36	; 54
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	0f 2e       	mov	r0, r31
     7de:	f6 e0       	ldi	r31, 0x06	; 6
     7e0:	ef 2e       	mov	r14, r31
     7e2:	ff 24       	eor	r15, r15
     7e4:	f0 2d       	mov	r31, r0
     7e6:	ec 0e       	add	r14, r28
     7e8:	fd 1e       	adc	r15, r29
     7ea:	cc 24       	eor	r12, r12
     7ec:	dd 24       	eor	r13, r13
     7ee:	68 94       	set
     7f0:	c3 f8       	bld	r12, 3
     7f2:	cc 0e       	add	r12, r28
     7f4:	dd 1e       	adc	r13, r29
     7f6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 87       	std	Y+9, r24	; 0x09
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	9b 87       	std	Y+11, r25	; 0x0b
     804:	8a 87       	std	Y+10, r24	; 0x0a
     806:	bc 86       	std	Y+12, r11	; 0x0c
     808:	c4 01       	movw	r24, r8
     80a:	42 96       	adiw	r24, 0x12	; 18
     80c:	be 01       	movw	r22, r28
     80e:	67 5f       	subi	r22, 0xF7	; 247
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	47 e3       	ldi	r20, 0x37	; 55
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	26 e3       	ldi	r18, 0x36	; 54
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	0f 2e       	mov	r0, r31
     81c:	fa e0       	ldi	r31, 0x0A	; 10
     81e:	ef 2e       	mov	r14, r31
     820:	ff 24       	eor	r15, r15
     822:	f0 2d       	mov	r31, r0
     824:	ec 0e       	add	r14, r28
     826:	fd 1e       	adc	r15, r29
     828:	0f 2e       	mov	r0, r31
     82a:	fc e0       	ldi	r31, 0x0C	; 12
     82c:	cf 2e       	mov	r12, r31
     82e:	dd 24       	eor	r13, r13
     830:	f0 2d       	mov	r31, r0
     832:	cc 0e       	add	r12, r28
     834:	dd 1e       	adc	r13, r29
     836:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	8d 87       	std	Y+13, r24	; 0x0d
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	9f 87       	std	Y+15, r25	; 0x0f
     844:	8e 87       	std	Y+14, r24	; 0x0e
     846:	b8 8a       	std	Y+16, r11	; 0x10
     848:	c4 01       	movw	r24, r8
     84a:	4b 96       	adiw	r24, 0x1b	; 27
     84c:	be 01       	movw	r22, r28
     84e:	63 5f       	subi	r22, 0xF3	; 243
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	47 e3       	ldi	r20, 0x37	; 55
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	26 e3       	ldi	r18, 0x36	; 54
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	0f 2e       	mov	r0, r31
     85c:	fe e0       	ldi	r31, 0x0E	; 14
     85e:	ef 2e       	mov	r14, r31
     860:	ff 24       	eor	r15, r15
     862:	f0 2d       	mov	r31, r0
     864:	ec 0e       	add	r14, r28
     866:	fd 1e       	adc	r15, r29
     868:	cc 24       	eor	r12, r12
     86a:	dd 24       	eor	r13, r13
     86c:	68 94       	set
     86e:	c4 f8       	bld	r12, 4
     870:	cc 0e       	add	r12, r28
     872:	dd 1e       	adc	r13, r29
     874:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	89 8b       	std	Y+17, r24	; 0x11
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9b 8b       	std	Y+19, r25	; 0x13
     882:	8a 8b       	std	Y+18, r24	; 0x12
     884:	bc 8a       	std	Y+20, r11	; 0x14
     886:	c4 01       	movw	r24, r8
     888:	84 96       	adiw	r24, 0x24	; 36
     88a:	be 01       	movw	r22, r28
     88c:	6f 5e       	subi	r22, 0xEF	; 239
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	47 e3       	ldi	r20, 0x37	; 55
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	26 e3       	ldi	r18, 0x36	; 54
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	0f 2e       	mov	r0, r31
     89a:	f2 e1       	ldi	r31, 0x12	; 18
     89c:	ef 2e       	mov	r14, r31
     89e:	ff 24       	eor	r15, r15
     8a0:	f0 2d       	mov	r31, r0
     8a2:	ec 0e       	add	r14, r28
     8a4:	fd 1e       	adc	r15, r29
     8a6:	0f 2e       	mov	r0, r31
     8a8:	f4 e1       	ldi	r31, 0x14	; 20
     8aa:	cf 2e       	mov	r12, r31
     8ac:	dd 24       	eor	r13, r13
     8ae:	f0 2d       	mov	r31, r0
     8b0:	cc 0e       	add	r12, r28
     8b2:	dd 1e       	adc	r13, r29
     8b4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     8b8:	86 e0       	ldi	r24, 0x06	; 6
     8ba:	8d 8b       	std	Y+21, r24	; 0x15
     8bc:	0f 2e       	mov	r0, r31
     8be:	f5 e0       	ldi	r31, 0x05	; 5
     8c0:	2f 2e       	mov	r2, r31
     8c2:	33 24       	eor	r3, r3
     8c4:	f0 2d       	mov	r31, r0
     8c6:	3f 8a       	std	Y+23, r3	; 0x17
     8c8:	2e 8a       	std	Y+22, r2	; 0x16
     8ca:	18 8e       	std	Y+24, r1	; 0x18
     8cc:	c4 01       	movw	r24, r8
     8ce:	8d 96       	adiw	r24, 0x2d	; 45
     8d0:	be 01       	movw	r22, r28
     8d2:	6b 5e       	subi	r22, 0xEB	; 235
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	47 e3       	ldi	r20, 0x37	; 55
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	26 e3       	ldi	r18, 0x36	; 54
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	0f 2e       	mov	r0, r31
     8e0:	f6 e1       	ldi	r31, 0x16	; 22
     8e2:	ef 2e       	mov	r14, r31
     8e4:	ff 24       	eor	r15, r15
     8e6:	f0 2d       	mov	r31, r0
     8e8:	ec 0e       	add	r14, r28
     8ea:	fd 1e       	adc	r15, r29
     8ec:	0f 2e       	mov	r0, r31
     8ee:	f8 e1       	ldi	r31, 0x18	; 24
     8f0:	cf 2e       	mov	r12, r31
     8f2:	dd 24       	eor	r13, r13
     8f4:	f0 2d       	mov	r31, r0
     8f6:	cc 0e       	add	r12, r28
     8f8:	dd 1e       	adc	r13, r29
     8fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     8fe:	87 e0       	ldi	r24, 0x07	; 7
     900:	89 8f       	std	Y+25, r24	; 0x19
     902:	0f 2e       	mov	r0, r31
     904:	f6 e0       	ldi	r31, 0x06	; 6
     906:	4f 2e       	mov	r4, r31
     908:	55 24       	eor	r5, r5
     90a:	f0 2d       	mov	r31, r0
     90c:	5b 8e       	std	Y+27, r5	; 0x1b
     90e:	4a 8e       	std	Y+26, r4	; 0x1a
     910:	1c 8e       	std	Y+28, r1	; 0x1c
     912:	c4 01       	movw	r24, r8
     914:	c6 96       	adiw	r24, 0x36	; 54
     916:	be 01       	movw	r22, r28
     918:	67 5e       	subi	r22, 0xE7	; 231
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	47 e3       	ldi	r20, 0x37	; 55
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	26 e3       	ldi	r18, 0x36	; 54
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	0f 2e       	mov	r0, r31
     926:	fa e1       	ldi	r31, 0x1A	; 26
     928:	ef 2e       	mov	r14, r31
     92a:	ff 24       	eor	r15, r15
     92c:	f0 2d       	mov	r31, r0
     92e:	ec 0e       	add	r14, r28
     930:	fd 1e       	adc	r15, r29
     932:	0f 2e       	mov	r0, r31
     934:	fc e1       	ldi	r31, 0x1C	; 28
     936:	cf 2e       	mov	r12, r31
     938:	dd 24       	eor	r13, r13
     93a:	f0 2d       	mov	r31, r0
     93c:	cc 0e       	add	r12, r28
     93e:	dd 1e       	adc	r13, r29
     940:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	8d 8f       	std	Y+29, r24	; 0x1d
     948:	0f 2e       	mov	r0, r31
     94a:	f7 e0       	ldi	r31, 0x07	; 7
     94c:	6f 2e       	mov	r6, r31
     94e:	77 24       	eor	r7, r7
     950:	f0 2d       	mov	r31, r0
     952:	7f 8e       	std	Y+31, r7	; 0x1f
     954:	6e 8e       	std	Y+30, r6	; 0x1e
     956:	18 a2       	lds	r17, 0x98
     958:	c4 01       	movw	r24, r8
     95a:	cf 96       	adiw	r24, 0x3f	; 63
     95c:	be 01       	movw	r22, r28
     95e:	63 5e       	subi	r22, 0xE3	; 227
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	47 e3       	ldi	r20, 0x37	; 55
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	26 e3       	ldi	r18, 0x36	; 54
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	0f 2e       	mov	r0, r31
     96c:	fe e1       	ldi	r31, 0x1E	; 30
     96e:	ef 2e       	mov	r14, r31
     970:	ff 24       	eor	r15, r15
     972:	f0 2d       	mov	r31, r0
     974:	ec 0e       	add	r14, r28
     976:	fd 1e       	adc	r15, r29
     978:	cc 24       	eor	r12, r12
     97a:	dd 24       	eor	r13, r13
     97c:	68 94       	set
     97e:	c5 f8       	bld	r12, 5
     980:	cc 0e       	add	r12, r28
     982:	dd 1e       	adc	r13, r29
     984:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     988:	8e e0       	ldi	r24, 0x0E	; 14
     98a:	89 a3       	lds	r24, 0x59
     98c:	1b a2       	lds	r17, 0x9b
     98e:	1a a2       	lds	r17, 0x9a
     990:	1c a2       	lds	r17, 0x9c
     992:	8c ea       	ldi	r24, 0xAC	; 172
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	be 01       	movw	r22, r28
     998:	6f 5d       	subi	r22, 0xDF	; 223
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	41 e3       	ldi	r20, 0x31	; 49
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	20 e3       	ldi	r18, 0x30	; 48
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	02 e3       	ldi	r16, 0x32	; 50
     9a6:	10 e0       	ldi	r17, 0x00	; 0
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f2 e2       	ldi	r31, 0x22	; 34
     9ac:	ef 2e       	mov	r14, r31
     9ae:	ff 24       	eor	r15, r15
     9b0:	f0 2d       	mov	r31, r0
     9b2:	ec 0e       	add	r14, r28
     9b4:	fd 1e       	adc	r15, r29
     9b6:	0f 2e       	mov	r0, r31
     9b8:	f4 e2       	ldi	r31, 0x24	; 36
     9ba:	cf 2e       	mov	r12, r31
     9bc:	dd 24       	eor	r13, r13
     9be:	f0 2d       	mov	r31, r0
     9c0:	cc 0e       	add	r12, r28
     9c2:	dd 1e       	adc	r13, r29
     9c4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     9c8:	8f e0       	ldi	r24, 0x0F	; 15
     9ca:	8d a3       	lds	r24, 0x5d
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	9f a3       	lds	r25, 0x5f
     9d2:	8e a3       	lds	r24, 0x5e
     9d4:	18 a6       	lds	r17, 0xb8
     9d6:	85 eb       	ldi	r24, 0xB5	; 181
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	be 01       	movw	r22, r28
     9dc:	6b 5d       	subi	r22, 0xDB	; 219
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	41 e3       	ldi	r20, 0x31	; 49
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	20 e3       	ldi	r18, 0x30	; 48
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f6 e2       	ldi	r31, 0x26	; 38
     9ec:	ef 2e       	mov	r14, r31
     9ee:	ff 24       	eor	r15, r15
     9f0:	f0 2d       	mov	r31, r0
     9f2:	ec 0e       	add	r14, r28
     9f4:	fd 1e       	adc	r15, r29
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f8 e2       	ldi	r31, 0x28	; 40
     9fa:	cf 2e       	mov	r12, r31
     9fc:	dd 24       	eor	r13, r13
     9fe:	f0 2d       	mov	r31, r0
     a00:	cc 0e       	add	r12, r28
     a02:	dd 1e       	adc	r13, r29
     a04:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	89 a7       	lds	r24, 0x79
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9b a7       	lds	r25, 0x7b
     a12:	8a a7       	lds	r24, 0x7a
     a14:	bc a6       	lds	r27, 0xbc
     a16:	8e eb       	ldi	r24, 0xBE	; 190
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	be 01       	movw	r22, r28
     a1c:	67 5d       	subi	r22, 0xD7	; 215
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	41 e3       	ldi	r20, 0x31	; 49
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	20 e3       	ldi	r18, 0x30	; 48
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	0f 2e       	mov	r0, r31
     a2a:	fa e2       	ldi	r31, 0x2A	; 42
     a2c:	ef 2e       	mov	r14, r31
     a2e:	ff 24       	eor	r15, r15
     a30:	f0 2d       	mov	r31, r0
     a32:	ec 0e       	add	r14, r28
     a34:	fd 1e       	adc	r15, r29
     a36:	0f 2e       	mov	r0, r31
     a38:	fc e2       	ldi	r31, 0x2C	; 44
     a3a:	cf 2e       	mov	r12, r31
     a3c:	dd 24       	eor	r13, r13
     a3e:	f0 2d       	mov	r31, r0
     a40:	cc 0e       	add	r12, r28
     a42:	dd 1e       	adc	r13, r29
     a44:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     a48:	81 e1       	ldi	r24, 0x11	; 17
     a4a:	8d a7       	lds	r24, 0x7d
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	9f a7       	lds	r25, 0x7f
     a52:	8e a7       	lds	r24, 0x7e
     a54:	b8 aa       	sts	0x98, r27
     a56:	87 ec       	ldi	r24, 0xC7	; 199
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	be 01       	movw	r22, r28
     a5c:	63 5d       	subi	r22, 0xD3	; 211
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	41 e3       	ldi	r20, 0x31	; 49
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	20 e3       	ldi	r18, 0x30	; 48
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	0f 2e       	mov	r0, r31
     a6a:	fe e2       	ldi	r31, 0x2E	; 46
     a6c:	ef 2e       	mov	r14, r31
     a6e:	ff 24       	eor	r15, r15
     a70:	f0 2d       	mov	r31, r0
     a72:	ec 0e       	add	r14, r28
     a74:	fd 1e       	adc	r15, r29
     a76:	0f 2e       	mov	r0, r31
     a78:	f0 e3       	ldi	r31, 0x30	; 48
     a7a:	cf 2e       	mov	r12, r31
     a7c:	dd 24       	eor	r13, r13
     a7e:	f0 2d       	mov	r31, r0
     a80:	cc 0e       	add	r12, r28
     a82:	dd 1e       	adc	r13, r29
     a84:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     a88:	82 e1       	ldi	r24, 0x12	; 18
     a8a:	89 ab       	sts	0x59, r24
     a8c:	84 e0       	ldi	r24, 0x04	; 4
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	9b ab       	sts	0x5b, r25
     a92:	8a ab       	sts	0x5a, r24
     a94:	bc aa       	sts	0x9c, r27
     a96:	80 ed       	ldi	r24, 0xD0	; 208
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	be 01       	movw	r22, r28
     a9c:	6f 5c       	subi	r22, 0xCF	; 207
     a9e:	7f 4f       	sbci	r23, 0xFF	; 255
     aa0:	41 e3       	ldi	r20, 0x31	; 49
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	20 e3       	ldi	r18, 0x30	; 48
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	0f 2e       	mov	r0, r31
     aaa:	f2 e3       	ldi	r31, 0x32	; 50
     aac:	ef 2e       	mov	r14, r31
     aae:	ff 24       	eor	r15, r15
     ab0:	f0 2d       	mov	r31, r0
     ab2:	ec 0e       	add	r14, r28
     ab4:	fd 1e       	adc	r15, r29
     ab6:	0f 2e       	mov	r0, r31
     ab8:	f4 e3       	ldi	r31, 0x34	; 52
     aba:	cf 2e       	mov	r12, r31
     abc:	dd 24       	eor	r13, r13
     abe:	f0 2d       	mov	r31, r0
     ac0:	cc 0e       	add	r12, r28
     ac2:	dd 1e       	adc	r13, r29
     ac4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     ac8:	83 e1       	ldi	r24, 0x13	; 19
     aca:	8d ab       	sts	0x5d, r24
     acc:	3f aa       	sts	0x9f, r19
     ace:	2e aa       	sts	0x9e, r18
     ad0:	b8 ae       	sts	0xb8, r27
     ad2:	89 ed       	ldi	r24, 0xD9	; 217
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	be 01       	movw	r22, r28
     ad8:	6b 5c       	subi	r22, 0xCB	; 203
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	41 e3       	ldi	r20, 0x31	; 49
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	20 e3       	ldi	r18, 0x30	; 48
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	0f 2e       	mov	r0, r31
     ae6:	f6 e3       	ldi	r31, 0x36	; 54
     ae8:	ef 2e       	mov	r14, r31
     aea:	ff 24       	eor	r15, r15
     aec:	f0 2d       	mov	r31, r0
     aee:	ec 0e       	add	r14, r28
     af0:	fd 1e       	adc	r15, r29
     af2:	0f 2e       	mov	r0, r31
     af4:	f8 e3       	ldi	r31, 0x38	; 56
     af6:	cf 2e       	mov	r12, r31
     af8:	dd 24       	eor	r13, r13
     afa:	f0 2d       	mov	r31, r0
     afc:	cc 0e       	add	r12, r28
     afe:	dd 1e       	adc	r13, r29
     b00:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     b04:	84 e1       	ldi	r24, 0x14	; 20
     b06:	89 af       	sts	0x79, r24
     b08:	5b ae       	sts	0xbb, r21
     b0a:	4a ae       	sts	0xba, r20
     b0c:	bc ae       	sts	0xbc, r27
     b0e:	82 ee       	ldi	r24, 0xE2	; 226
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	be 01       	movw	r22, r28
     b14:	67 5c       	subi	r22, 0xC7	; 199
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	41 e3       	ldi	r20, 0x31	; 49
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	20 e3       	ldi	r18, 0x30	; 48
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	0f 2e       	mov	r0, r31
     b22:	fa e3       	ldi	r31, 0x3A	; 58
     b24:	ef 2e       	mov	r14, r31
     b26:	ff 24       	eor	r15, r15
     b28:	f0 2d       	mov	r31, r0
     b2a:	ec 0e       	add	r14, r28
     b2c:	fd 1e       	adc	r15, r29
     b2e:	0f 2e       	mov	r0, r31
     b30:	fc e3       	ldi	r31, 0x3C	; 60
     b32:	cf 2e       	mov	r12, r31
     b34:	dd 24       	eor	r13, r13
     b36:	f0 2d       	mov	r31, r0
     b38:	cc 0e       	add	r12, r28
     b3a:	dd 1e       	adc	r13, r29
     b3c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     b40:	85 e1       	ldi	r24, 0x15	; 21
     b42:	8d af       	sts	0x7d, r24
     b44:	7f ae       	sts	0xbf, r23
     b46:	6e ae       	sts	0xbe, r22
     b48:	21 96       	adiw	r28, 0x01	; 1
     b4a:	bf ae       	sts	0xbf, r27
     b4c:	21 97       	sbiw	r28, 0x01	; 1
     b4e:	8b ee       	ldi	r24, 0xEB	; 235
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	be 01       	movw	r22, r28
     b54:	63 5c       	subi	r22, 0xC3	; 195
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	41 e3       	ldi	r20, 0x31	; 49
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	20 e3       	ldi	r18, 0x30	; 48
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	0f 2e       	mov	r0, r31
     b62:	fe e3       	ldi	r31, 0x3E	; 62
     b64:	ef 2e       	mov	r14, r31
     b66:	ff 24       	eor	r15, r15
     b68:	f0 2d       	mov	r31, r0
     b6a:	ec 0e       	add	r14, r28
     b6c:	fd 1e       	adc	r15, r29
     b6e:	cc 24       	eor	r12, r12
     b70:	dd 24       	eor	r13, r13
     b72:	68 94       	set
     b74:	c6 f8       	bld	r12, 6
     b76:	cc 0e       	add	r12, r28
     b78:	dd 1e       	adc	r13, r29
     b7a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     b7e:	86 e1       	ldi	r24, 0x16	; 22
     b80:	22 96       	adiw	r28, 0x02	; 2
     b82:	8f af       	sts	0x7f, r24
     b84:	22 97       	sbiw	r28, 0x02	; 2
     b86:	24 96       	adiw	r28, 0x04	; 4
     b88:	1f ae       	sts	0xbf, r17
     b8a:	1e ae       	sts	0xbe, r17
     b8c:	24 97       	sbiw	r28, 0x04	; 4
     b8e:	25 96       	adiw	r28, 0x05	; 5
     b90:	bf ae       	sts	0xbf, r27
     b92:	25 97       	sbiw	r28, 0x05	; 5
     b94:	84 ef       	ldi	r24, 0xF4	; 244
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	be 01       	movw	r22, r28
     b9a:	6f 5b       	subi	r22, 0xBF	; 191
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	44 e3       	ldi	r20, 0x34	; 52
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	23 e3       	ldi	r18, 0x33	; 51
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	05 e3       	ldi	r16, 0x35	; 53
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	0f 2e       	mov	r0, r31
     bac:	f2 e4       	ldi	r31, 0x42	; 66
     bae:	ef 2e       	mov	r14, r31
     bb0:	ff 24       	eor	r15, r15
     bb2:	f0 2d       	mov	r31, r0
     bb4:	ec 0e       	add	r14, r28
     bb6:	fd 1e       	adc	r15, r29
     bb8:	0f 2e       	mov	r0, r31
     bba:	f4 e4       	ldi	r31, 0x44	; 68
     bbc:	cf 2e       	mov	r12, r31
     bbe:	dd 24       	eor	r13, r13
     bc0:	f0 2d       	mov	r31, r0
     bc2:	cc 0e       	add	r12, r28
     bc4:	dd 1e       	adc	r13, r29
     bc6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     bca:	87 e1       	ldi	r24, 0x17	; 23
     bcc:	26 96       	adiw	r28, 0x06	; 6
     bce:	8f af       	sts	0x7f, r24
     bd0:	26 97       	sbiw	r28, 0x06	; 6
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	28 96       	adiw	r28, 0x08	; 8
     bd8:	9f af       	sts	0x7f, r25
     bda:	8e af       	sts	0x7e, r24
     bdc:	28 97       	sbiw	r28, 0x08	; 8
     bde:	29 96       	adiw	r28, 0x09	; 9
     be0:	bf ae       	sts	0xbf, r27
     be2:	29 97       	sbiw	r28, 0x09	; 9
     be4:	8d ef       	ldi	r24, 0xFD	; 253
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	be 01       	movw	r22, r28
     bea:	6b 5b       	subi	r22, 0xBB	; 187
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	44 e3       	ldi	r20, 0x34	; 52
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	23 e3       	ldi	r18, 0x33	; 51
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	0f 2e       	mov	r0, r31
     bf8:	f6 e4       	ldi	r31, 0x46	; 70
     bfa:	ef 2e       	mov	r14, r31
     bfc:	ff 24       	eor	r15, r15
     bfe:	f0 2d       	mov	r31, r0
     c00:	ec 0e       	add	r14, r28
     c02:	fd 1e       	adc	r15, r29
     c04:	0f 2e       	mov	r0, r31
     c06:	f8 e4       	ldi	r31, 0x48	; 72
     c08:	cf 2e       	mov	r12, r31
     c0a:	dd 24       	eor	r13, r13
     c0c:	f0 2d       	mov	r31, r0
     c0e:	cc 0e       	add	r12, r28
     c10:	dd 1e       	adc	r13, r29
     c12:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     c16:	88 e1       	ldi	r24, 0x18	; 24
     c18:	2a 96       	adiw	r28, 0x0a	; 10
     c1a:	8f af       	sts	0x7f, r24
     c1c:	2a 97       	sbiw	r28, 0x0a	; 10
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	2c 96       	adiw	r28, 0x0c	; 12
     c24:	9f af       	sts	0x7f, r25
     c26:	8e af       	sts	0x7e, r24
     c28:	2c 97       	sbiw	r28, 0x0c	; 12
     c2a:	2d 96       	adiw	r28, 0x0d	; 13
     c2c:	bf ae       	sts	0xbf, r27
     c2e:	2d 97       	sbiw	r28, 0x0d	; 13
     c30:	86 e0       	ldi	r24, 0x06	; 6
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	be 01       	movw	r22, r28
     c36:	67 5b       	subi	r22, 0xB7	; 183
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	44 e3       	ldi	r20, 0x34	; 52
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	23 e3       	ldi	r18, 0x33	; 51
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	0f 2e       	mov	r0, r31
     c44:	fa e4       	ldi	r31, 0x4A	; 74
     c46:	ef 2e       	mov	r14, r31
     c48:	ff 24       	eor	r15, r15
     c4a:	f0 2d       	mov	r31, r0
     c4c:	ec 0e       	add	r14, r28
     c4e:	fd 1e       	adc	r15, r29
     c50:	0f 2e       	mov	r0, r31
     c52:	fc e4       	ldi	r31, 0x4C	; 76
     c54:	cf 2e       	mov	r12, r31
     c56:	dd 24       	eor	r13, r13
     c58:	f0 2d       	mov	r31, r0
     c5a:	cc 0e       	add	r12, r28
     c5c:	dd 1e       	adc	r13, r29
     c5e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     c62:	89 e1       	ldi	r24, 0x19	; 25
     c64:	2e 96       	adiw	r28, 0x0e	; 14
     c66:	8f af       	sts	0x7f, r24
     c68:	2e 97       	sbiw	r28, 0x0e	; 14
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	60 96       	adiw	r28, 0x10	; 16
     c70:	9f af       	sts	0x7f, r25
     c72:	8e af       	sts	0x7e, r24
     c74:	60 97       	sbiw	r28, 0x10	; 16
     c76:	61 96       	adiw	r28, 0x11	; 17
     c78:	bf ae       	sts	0xbf, r27
     c7a:	61 97       	sbiw	r28, 0x11	; 17
     c7c:	8f e0       	ldi	r24, 0x0F	; 15
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	be 01       	movw	r22, r28
     c82:	63 5b       	subi	r22, 0xB3	; 179
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	44 e3       	ldi	r20, 0x34	; 52
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	23 e3       	ldi	r18, 0x33	; 51
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	0f 2e       	mov	r0, r31
     c90:	fe e4       	ldi	r31, 0x4E	; 78
     c92:	ef 2e       	mov	r14, r31
     c94:	ff 24       	eor	r15, r15
     c96:	f0 2d       	mov	r31, r0
     c98:	ec 0e       	add	r14, r28
     c9a:	fd 1e       	adc	r15, r29
     c9c:	0f 2e       	mov	r0, r31
     c9e:	f0 e5       	ldi	r31, 0x50	; 80
     ca0:	cf 2e       	mov	r12, r31
     ca2:	dd 24       	eor	r13, r13
     ca4:	f0 2d       	mov	r31, r0
     ca6:	cc 0e       	add	r12, r28
     ca8:	dd 1e       	adc	r13, r29
     caa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     cae:	8a e1       	ldi	r24, 0x1A	; 26
     cb0:	62 96       	adiw	r28, 0x12	; 18
     cb2:	8f af       	sts	0x7f, r24
     cb4:	62 97       	sbiw	r28, 0x12	; 18
     cb6:	84 e0       	ldi	r24, 0x04	; 4
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	64 96       	adiw	r28, 0x14	; 20
     cbc:	9f af       	sts	0x7f, r25
     cbe:	8e af       	sts	0x7e, r24
     cc0:	64 97       	sbiw	r28, 0x14	; 20
     cc2:	65 96       	adiw	r28, 0x15	; 21
     cc4:	bf ae       	sts	0xbf, r27
     cc6:	65 97       	sbiw	r28, 0x15	; 21
     cc8:	88 e1       	ldi	r24, 0x18	; 24
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5a       	subi	r22, 0xAF	; 175
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	44 e3       	ldi	r20, 0x34	; 52
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	23 e3       	ldi	r18, 0x33	; 51
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	0f 2e       	mov	r0, r31
     cdc:	f2 e5       	ldi	r31, 0x52	; 82
     cde:	ef 2e       	mov	r14, r31
     ce0:	ff 24       	eor	r15, r15
     ce2:	f0 2d       	mov	r31, r0
     ce4:	ec 0e       	add	r14, r28
     ce6:	fd 1e       	adc	r15, r29
     ce8:	0f 2e       	mov	r0, r31
     cea:	f4 e5       	ldi	r31, 0x54	; 84
     cec:	cf 2e       	mov	r12, r31
     cee:	dd 24       	eor	r13, r13
     cf0:	f0 2d       	mov	r31, r0
     cf2:	cc 0e       	add	r12, r28
     cf4:	dd 1e       	adc	r13, r29
     cf6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     cfa:	8b e1       	ldi	r24, 0x1B	; 27
     cfc:	66 96       	adiw	r28, 0x16	; 22
     cfe:	8f af       	sts	0x7f, r24
     d00:	66 97       	sbiw	r28, 0x16	; 22
     d02:	68 96       	adiw	r28, 0x18	; 24
     d04:	3f ae       	sts	0xbf, r19
     d06:	2e ae       	sts	0xbe, r18
     d08:	68 97       	sbiw	r28, 0x18	; 24
     d0a:	69 96       	adiw	r28, 0x19	; 25
     d0c:	bf ae       	sts	0xbf, r27
     d0e:	69 97       	sbiw	r28, 0x19	; 25
     d10:	81 e2       	ldi	r24, 0x21	; 33
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	be 01       	movw	r22, r28
     d16:	6b 5a       	subi	r22, 0xAB	; 171
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	44 e3       	ldi	r20, 0x34	; 52
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	23 e3       	ldi	r18, 0x33	; 51
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	0f 2e       	mov	r0, r31
     d24:	f6 e5       	ldi	r31, 0x56	; 86
     d26:	ef 2e       	mov	r14, r31
     d28:	ff 24       	eor	r15, r15
     d2a:	f0 2d       	mov	r31, r0
     d2c:	ec 0e       	add	r14, r28
     d2e:	fd 1e       	adc	r15, r29
     d30:	0f 2e       	mov	r0, r31
     d32:	f8 e5       	ldi	r31, 0x58	; 88
     d34:	cf 2e       	mov	r12, r31
     d36:	dd 24       	eor	r13, r13
     d38:	f0 2d       	mov	r31, r0
     d3a:	cc 0e       	add	r12, r28
     d3c:	dd 1e       	adc	r13, r29
     d3e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     d42:	8c e1       	ldi	r24, 0x1C	; 28
     d44:	6a 96       	adiw	r28, 0x1a	; 26
     d46:	8f af       	sts	0x7f, r24
     d48:	6a 97       	sbiw	r28, 0x1a	; 26
     d4a:	6c 96       	adiw	r28, 0x1c	; 28
     d4c:	5f ae       	sts	0xbf, r21
     d4e:	4e ae       	sts	0xbe, r20
     d50:	6c 97       	sbiw	r28, 0x1c	; 28
     d52:	6d 96       	adiw	r28, 0x1d	; 29
     d54:	bf ae       	sts	0xbf, r27
     d56:	6d 97       	sbiw	r28, 0x1d	; 29
     d58:	8a e2       	ldi	r24, 0x2A	; 42
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	be 01       	movw	r22, r28
     d5e:	67 5a       	subi	r22, 0xA7	; 167
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	44 e3       	ldi	r20, 0x34	; 52
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	23 e3       	ldi	r18, 0x33	; 51
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	0f 2e       	mov	r0, r31
     d6c:	fa e5       	ldi	r31, 0x5A	; 90
     d6e:	ef 2e       	mov	r14, r31
     d70:	ff 24       	eor	r15, r15
     d72:	f0 2d       	mov	r31, r0
     d74:	ec 0e       	add	r14, r28
     d76:	fd 1e       	adc	r15, r29
     d78:	0f 2e       	mov	r0, r31
     d7a:	fc e5       	ldi	r31, 0x5C	; 92
     d7c:	cf 2e       	mov	r12, r31
     d7e:	dd 24       	eor	r13, r13
     d80:	f0 2d       	mov	r31, r0
     d82:	cc 0e       	add	r12, r28
     d84:	dd 1e       	adc	r13, r29
     d86:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     d8a:	8d e1       	ldi	r24, 0x1D	; 29
     d8c:	6e 96       	adiw	r28, 0x1e	; 30
     d8e:	8f af       	sts	0x7f, r24
     d90:	6e 97       	sbiw	r28, 0x1e	; 30
     d92:	a0 96       	adiw	r28, 0x20	; 32
     d94:	7f ae       	sts	0xbf, r23
     d96:	6e ae       	sts	0xbe, r22
     d98:	a0 97       	sbiw	r28, 0x20	; 32
     d9a:	a1 96       	adiw	r28, 0x21	; 33
     d9c:	bf ae       	sts	0xbf, r27
     d9e:	a1 97       	sbiw	r28, 0x21	; 33
     da0:	83 e3       	ldi	r24, 0x33	; 51
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	be 01       	movw	r22, r28
     da6:	63 5a       	subi	r22, 0xA3	; 163
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	44 e3       	ldi	r20, 0x34	; 52
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	23 e3       	ldi	r18, 0x33	; 51
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	0f 2e       	mov	r0, r31
     db4:	fe e5       	ldi	r31, 0x5E	; 94
     db6:	ef 2e       	mov	r14, r31
     db8:	ff 24       	eor	r15, r15
     dba:	f0 2d       	mov	r31, r0
     dbc:	ec 0e       	add	r14, r28
     dbe:	fd 1e       	adc	r15, r29
     dc0:	0f 2e       	mov	r0, r31
     dc2:	f0 e6       	ldi	r31, 0x60	; 96
     dc4:	cf 2e       	mov	r12, r31
     dc6:	dd 24       	eor	r13, r13
     dc8:	f0 2d       	mov	r31, r0
     dca:	cc 0e       	add	r12, r28
     dcc:	dd 1e       	adc	r13, r29
     dce:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     dd2:	81 e2       	ldi	r24, 0x21	; 33
     dd4:	a2 96       	adiw	r28, 0x22	; 34
     dd6:	8f af       	sts	0x7f, r24
     dd8:	a2 97       	sbiw	r28, 0x22	; 34
     dda:	a4 96       	adiw	r28, 0x24	; 36
     ddc:	7f ae       	sts	0xbf, r23
     dde:	6e ae       	sts	0xbe, r22
     de0:	a4 97       	sbiw	r28, 0x24	; 36
     de2:	a5 96       	adiw	r28, 0x25	; 37
     de4:	bf ae       	sts	0xbf, r27
     de6:	a5 97       	sbiw	r28, 0x25	; 37
     de8:	8c e3       	ldi	r24, 0x3C	; 60
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	be 01       	movw	r22, r28
     dee:	6f 59       	subi	r22, 0x9F	; 159
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	4a e3       	ldi	r20, 0x3A	; 58
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	29 e3       	ldi	r18, 0x39	; 57
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	0b e3       	ldi	r16, 0x3B	; 59
     dfc:	10 e0       	ldi	r17, 0x00	; 0
     dfe:	0f 2e       	mov	r0, r31
     e00:	f2 e6       	ldi	r31, 0x62	; 98
     e02:	ef 2e       	mov	r14, r31
     e04:	ff 24       	eor	r15, r15
     e06:	f0 2d       	mov	r31, r0
     e08:	ec 0e       	add	r14, r28
     e0a:	fd 1e       	adc	r15, r29
     e0c:	0f 2e       	mov	r0, r31
     e0e:	f4 e6       	ldi	r31, 0x64	; 100
     e10:	cf 2e       	mov	r12, r31
     e12:	dd 24       	eor	r13, r13
     e14:	f0 2d       	mov	r31, r0
     e16:	cc 0e       	add	r12, r28
     e18:	dd 1e       	adc	r13, r29
     e1a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     e1e:	82 e2       	ldi	r24, 0x22	; 34
     e20:	a6 96       	adiw	r28, 0x26	; 38
     e22:	8f af       	sts	0x7f, r24
     e24:	a6 97       	sbiw	r28, 0x26	; 38
     e26:	a8 96       	adiw	r28, 0x28	; 40
     e28:	5f ae       	sts	0xbf, r21
     e2a:	4e ae       	sts	0xbe, r20
     e2c:	a8 97       	sbiw	r28, 0x28	; 40
     e2e:	a9 96       	adiw	r28, 0x29	; 41
     e30:	bf ae       	sts	0xbf, r27
     e32:	a9 97       	sbiw	r28, 0x29	; 41
     e34:	85 e4       	ldi	r24, 0x45	; 69
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	be 01       	movw	r22, r28
     e3a:	6b 59       	subi	r22, 0x9B	; 155
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	4a e3       	ldi	r20, 0x3A	; 58
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	29 e3       	ldi	r18, 0x39	; 57
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	0f 2e       	mov	r0, r31
     e48:	f6 e6       	ldi	r31, 0x66	; 102
     e4a:	ef 2e       	mov	r14, r31
     e4c:	ff 24       	eor	r15, r15
     e4e:	f0 2d       	mov	r31, r0
     e50:	ec 0e       	add	r14, r28
     e52:	fd 1e       	adc	r15, r29
     e54:	0f 2e       	mov	r0, r31
     e56:	f8 e6       	ldi	r31, 0x68	; 104
     e58:	cf 2e       	mov	r12, r31
     e5a:	dd 24       	eor	r13, r13
     e5c:	f0 2d       	mov	r31, r0
     e5e:	cc 0e       	add	r12, r28
     e60:	dd 1e       	adc	r13, r29
     e62:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     e66:	83 e2       	ldi	r24, 0x23	; 35
     e68:	aa 96       	adiw	r28, 0x2a	; 42
     e6a:	8f af       	sts	0x7f, r24
     e6c:	aa 97       	sbiw	r28, 0x2a	; 42
     e6e:	ac 96       	adiw	r28, 0x2c	; 44
     e70:	3f ae       	sts	0xbf, r19
     e72:	2e ae       	sts	0xbe, r18
     e74:	ac 97       	sbiw	r28, 0x2c	; 44
     e76:	ad 96       	adiw	r28, 0x2d	; 45
     e78:	bf ae       	sts	0xbf, r27
     e7a:	ad 97       	sbiw	r28, 0x2d	; 45
     e7c:	8e e4       	ldi	r24, 0x4E	; 78
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	be 01       	movw	r22, r28
     e82:	67 59       	subi	r22, 0x97	; 151
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	4a e3       	ldi	r20, 0x3A	; 58
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	29 e3       	ldi	r18, 0x39	; 57
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	0f 2e       	mov	r0, r31
     e90:	fa e6       	ldi	r31, 0x6A	; 106
     e92:	ef 2e       	mov	r14, r31
     e94:	ff 24       	eor	r15, r15
     e96:	f0 2d       	mov	r31, r0
     e98:	ec 0e       	add	r14, r28
     e9a:	fd 1e       	adc	r15, r29
     e9c:	0f 2e       	mov	r0, r31
     e9e:	fc e6       	ldi	r31, 0x6C	; 108
     ea0:	cf 2e       	mov	r12, r31
     ea2:	dd 24       	eor	r13, r13
     ea4:	f0 2d       	mov	r31, r0
     ea6:	cc 0e       	add	r12, r28
     ea8:	dd 1e       	adc	r13, r29
     eaa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     eae:	84 e2       	ldi	r24, 0x24	; 36
     eb0:	ae 96       	adiw	r28, 0x2e	; 46
     eb2:	8f af       	sts	0x7f, r24
     eb4:	ae 97       	sbiw	r28, 0x2e	; 46
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	e0 96       	adiw	r28, 0x30	; 48
     ebc:	9f af       	sts	0x7f, r25
     ebe:	8e af       	sts	0x7e, r24
     ec0:	e0 97       	sbiw	r28, 0x30	; 48
     ec2:	e1 96       	adiw	r28, 0x31	; 49
     ec4:	bf ae       	sts	0xbf, r27
     ec6:	e1 97       	sbiw	r28, 0x31	; 49
     ec8:	87 e5       	ldi	r24, 0x57	; 87
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	be 01       	movw	r22, r28
     ece:	63 59       	subi	r22, 0x93	; 147
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	4a e3       	ldi	r20, 0x3A	; 58
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	29 e3       	ldi	r18, 0x39	; 57
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	0f 2e       	mov	r0, r31
     edc:	fe e6       	ldi	r31, 0x6E	; 110
     ede:	ef 2e       	mov	r14, r31
     ee0:	ff 24       	eor	r15, r15
     ee2:	f0 2d       	mov	r31, r0
     ee4:	ec 0e       	add	r14, r28
     ee6:	fd 1e       	adc	r15, r29
     ee8:	0f 2e       	mov	r0, r31
     eea:	f0 e7       	ldi	r31, 0x70	; 112
     eec:	cf 2e       	mov	r12, r31
     eee:	dd 24       	eor	r13, r13
     ef0:	f0 2d       	mov	r31, r0
     ef2:	cc 0e       	add	r12, r28
     ef4:	dd 1e       	adc	r13, r29
     ef6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     efa:	85 e2       	ldi	r24, 0x25	; 37
     efc:	e2 96       	adiw	r28, 0x32	; 50
     efe:	8f af       	sts	0x7f, r24
     f00:	e2 97       	sbiw	r28, 0x32	; 50
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	e4 96       	adiw	r28, 0x34	; 52
     f08:	9f af       	sts	0x7f, r25
     f0a:	8e af       	sts	0x7e, r24
     f0c:	e4 97       	sbiw	r28, 0x34	; 52
     f0e:	e5 96       	adiw	r28, 0x35	; 53
     f10:	bf ae       	sts	0xbf, r27
     f12:	e5 97       	sbiw	r28, 0x35	; 53
     f14:	80 e6       	ldi	r24, 0x60	; 96
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	be 01       	movw	r22, r28
     f1a:	6f 58       	subi	r22, 0x8F	; 143
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	4a e3       	ldi	r20, 0x3A	; 58
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	29 e3       	ldi	r18, 0x39	; 57
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	0f 2e       	mov	r0, r31
     f28:	f2 e7       	ldi	r31, 0x72	; 114
     f2a:	ef 2e       	mov	r14, r31
     f2c:	ff 24       	eor	r15, r15
     f2e:	f0 2d       	mov	r31, r0
     f30:	ec 0e       	add	r14, r28
     f32:	fd 1e       	adc	r15, r29
     f34:	0f 2e       	mov	r0, r31
     f36:	f4 e7       	ldi	r31, 0x74	; 116
     f38:	cf 2e       	mov	r12, r31
     f3a:	dd 24       	eor	r13, r13
     f3c:	f0 2d       	mov	r31, r0
     f3e:	cc 0e       	add	r12, r28
     f40:	dd 1e       	adc	r13, r29
     f42:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     f46:	86 e2       	ldi	r24, 0x26	; 38
     f48:	e6 96       	adiw	r28, 0x36	; 54
     f4a:	8f af       	sts	0x7f, r24
     f4c:	e6 97       	sbiw	r28, 0x36	; 54
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	e8 96       	adiw	r28, 0x38	; 56
     f54:	9f af       	sts	0x7f, r25
     f56:	8e af       	sts	0x7e, r24
     f58:	e8 97       	sbiw	r28, 0x38	; 56
     f5a:	e9 96       	adiw	r28, 0x39	; 57
     f5c:	bf ae       	sts	0xbf, r27
     f5e:	e9 97       	sbiw	r28, 0x39	; 57
     f60:	89 e6       	ldi	r24, 0x69	; 105
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	be 01       	movw	r22, r28
     f66:	6b 58       	subi	r22, 0x8B	; 139
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	4a e3       	ldi	r20, 0x3A	; 58
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	29 e3       	ldi	r18, 0x39	; 57
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	0f 2e       	mov	r0, r31
     f74:	f6 e7       	ldi	r31, 0x76	; 118
     f76:	ef 2e       	mov	r14, r31
     f78:	ff 24       	eor	r15, r15
     f7a:	f0 2d       	mov	r31, r0
     f7c:	ec 0e       	add	r14, r28
     f7e:	fd 1e       	adc	r15, r29
     f80:	0f 2e       	mov	r0, r31
     f82:	f8 e7       	ldi	r31, 0x78	; 120
     f84:	cf 2e       	mov	r12, r31
     f86:	dd 24       	eor	r13, r13
     f88:	f0 2d       	mov	r31, r0
     f8a:	cc 0e       	add	r12, r28
     f8c:	dd 1e       	adc	r13, r29
     f8e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     f92:	87 e2       	ldi	r24, 0x27	; 39
     f94:	ea 96       	adiw	r28, 0x3a	; 58
     f96:	8f af       	sts	0x7f, r24
     f98:	ea 97       	sbiw	r28, 0x3a	; 58
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	ec 96       	adiw	r28, 0x3c	; 60
     fa0:	9f af       	sts	0x7f, r25
     fa2:	8e af       	sts	0x7e, r24
     fa4:	ec 97       	sbiw	r28, 0x3c	; 60
     fa6:	ed 96       	adiw	r28, 0x3d	; 61
     fa8:	bf ae       	sts	0xbf, r27
     faa:	ed 97       	sbiw	r28, 0x3d	; 61
     fac:	82 e7       	ldi	r24, 0x72	; 114
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	be 01       	movw	r22, r28
     fb2:	67 58       	subi	r22, 0x87	; 135
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	4a e3       	ldi	r20, 0x3A	; 58
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	29 e3       	ldi	r18, 0x39	; 57
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fa e7       	ldi	r31, 0x7A	; 122
     fc2:	ef 2e       	mov	r14, r31
     fc4:	ff 24       	eor	r15, r15
     fc6:	f0 2d       	mov	r31, r0
     fc8:	ec 0e       	add	r14, r28
     fca:	fd 1e       	adc	r15, r29
     fcc:	0f 2e       	mov	r0, r31
     fce:	fc e7       	ldi	r31, 0x7C	; 124
     fd0:	cf 2e       	mov	r12, r31
     fd2:	dd 24       	eor	r13, r13
     fd4:	f0 2d       	mov	r31, r0
     fd6:	cc 0e       	add	r12, r28
     fd8:	dd 1e       	adc	r13, r29
     fda:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     fde:	88 e2       	ldi	r24, 0x28	; 40
     fe0:	ee 96       	adiw	r28, 0x3e	; 62
     fe2:	8f af       	sts	0x7f, r24
     fe4:	ee 97       	sbiw	r28, 0x3e	; 62
     fe6:	c2 58       	subi	r28, 0x82	; 130
     fe8:	df 4f       	sbci	r29, 0xFF	; 255
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	18 82       	st	Y, r1
     fee:	ce 57       	subi	r28, 0x7E	; 126
     ff0:	d0 40       	sbci	r29, 0x00	; 0
     ff2:	c0 58       	subi	r28, 0x80	; 128
     ff4:	df 4f       	sbci	r29, 0xFF	; 255
     ff6:	b8 82       	st	Y, r11
     ff8:	c0 58       	subi	r28, 0x80	; 128
     ffa:	d0 40       	sbci	r29, 0x00	; 0
     ffc:	8b e7       	ldi	r24, 0x7B	; 123
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	be 01       	movw	r22, r28
    1002:	63 58       	subi	r22, 0x83	; 131
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	4a e3       	ldi	r20, 0x3A	; 58
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	29 e3       	ldi	r18, 0x39	; 57
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	0f 2e       	mov	r0, r31
    1010:	fe e7       	ldi	r31, 0x7E	; 126
    1012:	ef 2e       	mov	r14, r31
    1014:	ff 24       	eor	r15, r15
    1016:	f0 2d       	mov	r31, r0
    1018:	ec 0e       	add	r14, r28
    101a:	fd 1e       	adc	r15, r29
    101c:	cc 24       	eor	r12, r12
    101e:	dd 24       	eor	r13, r13
    1020:	68 94       	set
    1022:	c7 f8       	bld	r12, 7
    1024:	cc 0e       	add	r12, r28
    1026:	dd 1e       	adc	r13, r29
    1028:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
{
    102c:	c0 58       	subi	r28, 0x80	; 128
    102e:	df 4f       	sbci	r29, 0xFF	; 255
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	9f 90       	pop	r9
    104e:	8f 90       	pop	r8
    1050:	7f 90       	pop	r7
    1052:	6f 90       	pop	r6
    1054:	5f 90       	pop	r5
    1056:	4f 90       	pop	r4
    1058:	3f 90       	pop	r3
    105a:	2f 90       	pop	r2
    105c:	08 95       	ret

0000105e <__vector_13>:
char Usart::incomeChar;
bool Usart::newCharReceived;

// definicja wektora przerwan odbioru danych USART
ISR(USART_RXC_vect)
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	8f 93       	push	r24
	Usart::incomeChar = UDR;
    106a:	8c b1       	in	r24, 0x0c	; 12
    106c:	80 93 85 01 	sts	0x0185, r24
	Usart::newCharReceived = true;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 84 01 	sts	0x0184, r24
}
    1076:	8f 91       	pop	r24
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <_ZN5Usart8ScenarioC1Ev>:

Usart::Scenario::Scenario()
{
}
    1082:	08 95       	ret

00001084 <_ZN5Usart8ScenarioC1EPFvvERKh>:

Usart::Scenario::Scenario(void (*function)(), const uint8_t &paramsBytes)
    1084:	fc 01       	movw	r30, r24
: function(function), paramsBytes(paramsBytes)
    1086:	71 83       	std	Z+1, r23	; 0x01
    1088:	60 83       	st	Z, r22
    108a:	da 01       	movw	r26, r20
    108c:	8c 91       	ld	r24, X
    108e:	82 83       	std	Z+2, r24	; 0x02
{
}
    1090:	08 95       	ret

00001092 <_ZN5Usart4initEv>:

void Usart::init()
{
	// wlaczenie transmisji, wlaczenie odbioru, wlaczenie przerwania odbioru
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
    1092:	88 e9       	ldi	r24, 0x98	; 152
    1094:	8a b9       	out	0x0a, r24	; 10
	//nastaw 8-bitowej ramki
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
    1096:	86 e8       	ldi	r24, 0x86	; 134
    1098:	80 bd       	out	0x20, r24	; 32
	// for 9600 baud at 1MHz
	UBRRL = USART_UBRRL;
    109a:	8f e5       	ldi	r24, 0x5F	; 95
    109c:	89 b9       	out	0x09, r24	; 9
	sei();
    109e:	78 94       	sei
}
    10a0:	08 95       	ret

000010a2 <_ZN5Usart7receiveEv>:
		send(scenarioCode);
	}
}

const char &Usart::receive()
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	while (!newCharReceived)
    10ac:	80 91 84 01 	lds	r24, 0x0184
    10b0:	88 23       	and	r24, r24
    10b2:	49 f4       	brne	.+18     	; 0x10c6 <_ZN5Usart7receiveEv+0x24>
    10b4:	86 e6       	ldi	r24, 0x66	; 102
    10b6:	9e e0       	ldi	r25, 0x0E	; 14
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <_ZN5Usart7receiveEv+0x16>
    10bc:	00 00       	nop
    10be:	80 91 84 01 	lds	r24, 0x0184
    10c2:	88 23       	and	r24, r24
    10c4:	b9 f3       	breq	.-18     	; 0x10b4 <_ZN5Usart7receiveEv+0x12>
		_delay_ms(USART_SLEEP_TIME);
	char temp = incomeChar;
	newCharReceived = false;
    10c6:	10 92 84 01 	sts	0x0184, r1
	return temp;
}
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <_ZN5Usart4sendEc>:

void Usart::send(char toSend)
{
	while (!(UCSRA & (1<<UDRE)));
    10d6:	5d 9b       	sbis	0x0b, 5	; 11
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <_ZN5Usart4sendEc>
	UDR = toSend;
    10da:	8c b9       	out	0x0c, r24	; 12
}
    10dc:	08 95       	ret

000010de <_ZN5Usart3runEv>:
	UBRRL = USART_UBRRL;
	sei();
}

void Usart::run()
{
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <_ZN5Usart3runEv+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	while (true)
	{
		const char &scenarioCode = receive();
		const uint8_t &scenarioParams = scenarios[scenarioCode - 32].paramsBytes;
		for (uint8_t i = 0; i < scenarioParams; ++i)
    10e8:	0f 2e       	mov	r0, r31
    10ea:	fc e8       	ldi	r31, 0x8C	; 140
    10ec:	af 2e       	mov	r10, r31
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	bf 2e       	mov	r11, r31
    10f2:	f0 2d       	mov	r31, r0
    10f4:	99 24       	eor	r9, r9

void Usart::run()
{
	while (true)
	{
		const char &scenarioCode = receive();
    10f6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN5Usart7receiveEv>
    10fa:	6c 01       	movw	r12, r24
		const uint8_t &scenarioParams = scenarios[scenarioCode - 32].paramsBytes;
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	80 97       	sbiw	r24, 0x20	; 32
		for (uint8_t i = 0; i < scenarioParams; ++i)
    1104:	fc 01       	movw	r30, r24
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	e8 0f       	add	r30, r24
    110c:	f9 1f       	adc	r31, r25
    110e:	ea 0d       	add	r30, r10
    1110:	fb 1d       	adc	r31, r11
    1112:	22 81       	ldd	r18, Z+2	; 0x02
    1114:	22 23       	and	r18, r18
    1116:	21 f1       	breq	.+72     	; 0x1160 <_ZN5Usart3runEv+0x82>
    1118:	19 2d       	mov	r17, r9
    111a:	7f 01       	movw	r14, r30
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	e8 0e       	add	r14, r24
    1122:	f9 1e       	adc	r15, r25
		{
			//send(scenarioParams);
			Pin::get(22 + i).setHigh();
    1124:	01 2f       	mov	r16, r17
    1126:	0a 5e       	subi	r16, 0xEA	; 234
    1128:	0a 83       	std	Y+2, r16	; 0x02
    112a:	ce 01       	movw	r24, r28
    112c:	02 96       	adiw	r24, 0x02	; 2
    112e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
    1132:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN3Pin7setHighEv>
			params[i] = receive();
    1136:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN5Usart7receiveEv>
    113a:	fc 01       	movw	r30, r24
    113c:	80 81       	ld	r24, Z
    113e:	e1 2f       	mov	r30, r17
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	e8 57       	subi	r30, 0x78	; 120
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	80 83       	st	Z, r24
			//send(params[i]);
			Pin::get(22 + i).setLow();
    1148:	09 83       	std	Y+1, r16	; 0x01
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN3Pin3getERKh>
    1152:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Pin6setLowEv>
{
	while (true)
	{
		const char &scenarioCode = receive();
		const uint8_t &scenarioParams = scenarios[scenarioCode - 32].paramsBytes;
		for (uint8_t i = 0; i < scenarioParams; ++i)
    1156:	1f 5f       	subi	r17, 0xFF	; 255
    1158:	f7 01       	movw	r30, r14
    115a:	80 81       	ld	r24, Z
    115c:	18 17       	cp	r17, r24
    115e:	10 f3       	brcs	.-60     	; 0x1124 <_ZN5Usart3runEv+0x46>
			params[i] = receive();
			//send(params[i]);
			Pin::get(22 + i).setLow();
		}
		//send(scenarioCode);
		scenarios[scenarioCode - 32].function();
    1160:	f6 01       	movw	r30, r12
    1162:	80 81       	ld	r24, Z
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	80 97       	sbiw	r24, 0x20	; 32
    1168:	9c 01       	movw	r18, r24
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	f5 01       	movw	r30, r10
    1174:	e8 0f       	add	r30, r24
    1176:	f9 1f       	adc	r31, r25
    1178:	01 90       	ld	r0, Z+
    117a:	f0 81       	ld	r31, Z
    117c:	e0 2d       	mov	r30, r0
    117e:	09 95       	icall
		send(scenarioCode);
    1180:	f6 01       	movw	r30, r12
    1182:	80 81       	ld	r24, Z
    1184:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	sei();
}

void Usart::run()
{
	while (true)
    1188:	b6 cf       	rjmp	.-148    	; 0x10f6 <_ZN5Usart3runEv+0x18>

0000118a <_ZN5Usart4sendEPKc>:
	while (!(UCSRA & (1<<UDRE)));
	UDR = toSend;
}

void Usart::send(const char *toSend)
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
	send(128);
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
	while (*toSend != '\0')
    1196:	88 81       	ld	r24, Y
    1198:	88 23       	and	r24, r24
    119a:	31 f0       	breq	.+12     	; 0x11a8 <_ZN5Usart4sendEPKc+0x1e>
{
	while (!(UCSRA & (1<<UDRE)));
	UDR = toSend;
}

void Usart::send(const char *toSend)
    119c:	21 96       	adiw	r28, 0x01	; 1
{
	send(128);
	while (*toSend != '\0')
		send(*toSend++);
    119e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
}

void Usart::send(const char *toSend)
{
	send(128);
	while (*toSend != '\0')
    11a2:	89 91       	ld	r24, Y+
    11a4:	88 23       	and	r24, r24
    11a6:	d9 f7       	brne	.-10     	; 0x119e <_ZN5Usart4sendEPKc+0x14>
		send(*toSend++);
	send('\0');
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN5Usart4sendEc>
}
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>:

void Usart::pushFunction(const Scenario &scenario, uint8_t id)
{
	scenarios[id - 32] = scenario;
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	60 52       	subi	r22, 0x20	; 32
    11b8:	70 40       	sbci	r23, 0x00	; 0
    11ba:	db 01       	movw	r26, r22
    11bc:	aa 0f       	add	r26, r26
    11be:	bb 1f       	adc	r27, r27
    11c0:	a6 0f       	add	r26, r22
    11c2:	b7 1f       	adc	r27, r23
    11c4:	a4 57       	subi	r26, 0x74	; 116
    11c6:	be 4f       	sbci	r27, 0xFE	; 254
    11c8:	e8 2f       	mov	r30, r24
    11ca:	f9 2f       	mov	r31, r25
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	01 90       	ld	r0, Z+
    11d0:	0d 92       	st	X+, r0
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <_ZN5Usart12pushFunctionERKNS_8ScenarioEh+0x1a>
}
    11d6:	08 95       	ret

000011d8 <_ZN5Usart6getBitERKh>:

const bool &Usart::getBit(const uint8_t &nr)
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	return params[nr<<3] & (1 << (nr - (nr<<3>>3)));
}
    11e2:	ce 01       	movw	r24, r28
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	0f 90       	pop	r0
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <_ZN5Usart7getBitsERKhS1_>:

const uint32_t &Usart::getBits(const uint8_t &start, const uint8_t &size)
{
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <_ZN5Usart7getBitsERKhS1_+0x6>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <_ZN5Usart7getBitsERKhS1_+0x8>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	uint32_t bits;
	for (uint8_t i = 0; i < size; ++i)
    11fa:	fb 01       	movw	r30, r22
    11fc:	90 81       	ld	r25, Z
    11fe:	99 23       	and	r25, r25
    1200:	21 f0       	breq	.+8      	; 0x120a <_ZN5Usart7getBitsERKhS1_+0x1c>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	89 17       	cp	r24, r25
    1208:	e8 f3       	brcs	.-6      	; 0x1204 <_ZN5Usart7getBitsERKhS1_+0x16>
		bits += (getBit(start + i) << i);
	return bits;
    120a:	ce 01       	movw	r24, r28
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <__tablejump2__>:
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31

00001220 <__tablejump__>:
    1220:	05 90       	lpm	r0, Z+
    1222:	f4 91       	lpm	r31, Z
    1224:	e0 2d       	mov	r30, r0
    1226:	09 94       	ijmp

00001228 <_exit>:
    1228:	f8 94       	cli

0000122a <__stop_program>:
    122a:	ff cf       	rjmp	.-2      	; 0x122a <__stop_program>
