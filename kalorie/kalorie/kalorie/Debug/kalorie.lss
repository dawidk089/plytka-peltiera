
kalorie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000126a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000126a  000012fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ca  00800062  00800062  00001300  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00001a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001afc  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a45  00000000  00000000  00003674  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acd  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00004b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084e  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d32  00000000  00000000  00005802  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00006534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__vector_13>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	b9 03       	fmulsu	r19, r17

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ea e6       	ldi	r30, 0x6A	; 106
      6a:	f2 e1       	ldi	r31, 0x12	; 18
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a2 36       	cpi	r26, 0x62	; 98
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	14 e0       	ldi	r17, 0x04	; 4
      7a:	a2 e6       	ldi	r26, 0x62	; 98
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	ac 32       	cpi	r26, 0x2C	; 44
      84:	b1 07       	cpc	r27, r17
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	c6 e5       	ldi	r28, 0x56	; 86
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	22 97       	sbiw	r28, 0x02	; 2
      92:	fe 01       	movw	r30, r28
      94:	0e 94 2f 09 	call	0x125e	; 0x125e <__tablejump__>
      98:	c4 35       	cpi	r28, 0x54	; 84
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 42 01 	call	0x284	; 0x284 <main>
      a2:	0c 94 33 09 	jmp	0x1266	; 0x1266 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z9asciiTestv>:
#define ASCIITEST_H_

#include "../modules/Usart.h"

void asciiTest()
{
      aa:	cf 93       	push	r28
	for (uint8_t i = 0; i < 32; ++i)
      ac:	c0 e0       	ldi	r28, 0x00	; 0
		Usart::send(i);
      ae:	8c 2f       	mov	r24, r28
      b0:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>

#include "../modules/Usart.h"

void asciiTest()
{
	for (uint8_t i = 0; i < 32; ++i)
      b4:	cf 5f       	subi	r28, 0xFF	; 255
      b6:	c0 32       	cpi	r28, 0x20	; 32
      b8:	d1 f7       	brne	.-12     	; 0xae <_Z9asciiTestv+0x4>
		Usart::send(i);
}
      ba:	cf 91       	pop	r28
      bc:	08 95       	ret

000000be <_Z5statev>:
#include <avr/io.h>
#include "../modules/Usart.h"

void state()
{
	Usart::send(DDRA);
      be:	8a b3       	in	r24, 0x1a	; 26
      c0:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(DDRB);
      c4:	87 b3       	in	r24, 0x17	; 23
      c6:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(DDRC);
      ca:	84 b3       	in	r24, 0x14	; 20
      cc:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(DDRD);
      d0:	81 b3       	in	r24, 0x11	; 17
      d2:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PORTA);
      d6:	8b b3       	in	r24, 0x1b	; 27
      d8:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PORTB);
      dc:	88 b3       	in	r24, 0x18	; 24
      de:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PORTC);
      e2:	85 b3       	in	r24, 0x15	; 21
      e4:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PORTD);
      e8:	82 b3       	in	r24, 0x12	; 18
      ea:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PINA);
      ee:	89 b3       	in	r24, 0x19	; 25
      f0:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PINB);
      f4:	86 b3       	in	r24, 0x16	; 22
      f6:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PINC);
      fa:	83 b3       	in	r24, 0x13	; 19
      fc:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(PIND);
     100:	80 b3       	in	r24, 0x10	; 16
     102:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
}
     106:	08 95       	ret

00000108 <_Z10paramsTestv>:
		char p4: 8;
	};
};

void paramsTest()
{
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
     11a:	28 97       	sbiw	r28, 0x08	; 8
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	14 e0       	ldi	r17, 0x04	; 4
	for (uint8_t i = 0; i < 4; ++i)
	{
		Pin::get(22).setHigh();
     128:	0f 2e       	mov	r0, r31
     12a:	f6 e1       	ldi	r31, 0x16	; 22
     12c:	ef 2e       	mov	r14, r31
     12e:	f0 2d       	mov	r31, r0
		Pin::get(23).setHigh();
     130:	0f 2e       	mov	r0, r31
     132:	f7 e1       	ldi	r31, 0x17	; 23
     134:	ff 2e       	mov	r15, r31
     136:	f0 2d       	mov	r31, r0
		Pin::get(24).setHigh();
     138:	08 e1       	ldi	r16, 0x18	; 24
		Pin::get(25).setHigh();
     13a:	0f 2e       	mov	r0, r31
     13c:	f9 e1       	ldi	r31, 0x19	; 25
     13e:	df 2e       	mov	r13, r31
     140:	f0 2d       	mov	r31, r0

void paramsTest()
{
	for (uint8_t i = 0; i < 4; ++i)
	{
		Pin::get(22).setHigh();
     142:	e8 86       	std	Y+8, r14	; 0x08
     144:	ce 01       	movw	r24, r28
     146:	08 96       	adiw	r24, 0x08	; 8
     148:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     14c:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN3Pin7setHighEv>
		Pin::get(23).setHigh();
     150:	ff 82       	std	Y+7, r15	; 0x07
     152:	ce 01       	movw	r24, r28
     154:	07 96       	adiw	r24, 0x07	; 7
     156:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     15a:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN3Pin7setHighEv>
		Pin::get(24).setHigh();
     15e:	0e 83       	std	Y+6, r16	; 0x06
     160:	ce 01       	movw	r24, r28
     162:	06 96       	adiw	r24, 0x06	; 6
     164:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     168:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN3Pin7setHighEv>
		Pin::get(25).setHigh();
     16c:	dd 82       	std	Y+5, r13	; 0x05
     16e:	ce 01       	movw	r24, r28
     170:	05 96       	adiw	r24, 0x05	; 5
     172:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     176:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN3Pin7setHighEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	9f e7       	ldi	r25, 0x7F	; 127
     17e:	a4 e0       	ldi	r26, 0x04	; 4
     180:	81 50       	subi	r24, 0x01	; 1
     182:	90 40       	sbci	r25, 0x00	; 0
     184:	a0 40       	sbci	r26, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <_Z10paramsTestv+0x78>
     188:	00 c0       	rjmp	.+0      	; 0x18a <_Z10paramsTestv+0x82>
     18a:	00 00       	nop
		_delay_ms(100);
		Pin::get(22).setLow();
     18c:	ec 82       	std	Y+4, r14	; 0x04
     18e:	ce 01       	movw	r24, r28
     190:	04 96       	adiw	r24, 0x04	; 4
     192:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     196:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN3Pin6setLowEv>
		Pin::get(23).setLow();
     19a:	fb 82       	std	Y+3, r15	; 0x03
     19c:	ce 01       	movw	r24, r28
     19e:	03 96       	adiw	r24, 0x03	; 3
     1a0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     1a4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN3Pin6setLowEv>
		Pin::get(24).setLow();
     1a8:	0a 83       	std	Y+2, r16	; 0x02
     1aa:	ce 01       	movw	r24, r28
     1ac:	02 96       	adiw	r24, 0x02	; 2
     1ae:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     1b2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN3Pin6setLowEv>
		Pin::get(25).setLow();
     1b6:	d9 82       	std	Y+1, r13	; 0x01
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     1c0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN3Pin6setLowEv>
     1c4:	8f ef       	ldi	r24, 0xFF	; 255
     1c6:	9f e7       	ldi	r25, 0x7F	; 127
     1c8:	a4 e0       	ldi	r26, 0x04	; 4
     1ca:	81 50       	subi	r24, 0x01	; 1
     1cc:	90 40       	sbci	r25, 0x00	; 0
     1ce:	a0 40       	sbci	r26, 0x00	; 0
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <_Z10paramsTestv+0xc2>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <_Z10paramsTestv+0xcc>
     1d4:	00 00       	nop
     1d6:	11 50       	subi	r17, 0x01	; 1
	};
};

void paramsTest()
{
	for (uint8_t i = 0; i < 4; ++i)
     1d8:	09 f0       	breq	.+2      	; 0x1dc <_Z10paramsTestv+0xd4>
     1da:	b3 cf       	rjmp	.-154    	; 0x142 <_Z10paramsTestv+0x3a>
		Pin::get(25).setLow();
		_delay_ms(100);
	}
	MyParams myParams;
	myParams.params[0] = Usart::params[0];
	myParams.params[1] = Usart::params[1];
     1dc:	f0 90 89 01 	lds	r15, 0x0189
	myParams.params[2] = Usart::params[2];
     1e0:	00 91 8a 01 	lds	r16, 0x018A
	myParams.params[3] = Usart::params[3];
     1e4:	10 91 8b 01 	lds	r17, 0x018B
	Usart::send(myParams.p1);
     1e8:	80 91 88 01 	lds	r24, 0x0188
     1ec:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(myParams.p2);
     1f0:	8f 2d       	mov	r24, r15
     1f2:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(myParams.p3);
     1f6:	80 2f       	mov	r24, r16
     1f8:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	Usart::send(myParams.p4);
     1fc:	81 2f       	mov	r24, r17
     1fe:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
}
     202:	28 96       	adiw	r28, 0x08	; 8
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	ff 90       	pop	r15
     218:	ef 90       	pop	r14
     21a:	df 90       	pop	r13
     21c:	08 95       	ret

0000021e <_Z17temperatureSensorv>:
#include "../modules/Usart.h"
#include "../modules/Adc.h"
#include "../modules/Pin.h"

void temperatureSensor()
{
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	00 d0       	rcall	.+0      	; 0x22a <_Z17temperatureSensorv+0xc>
     22a:	0f 92       	push	r0
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t adcPinNr = 5; adcPinNr < 8; ++adcPinNr)
     230:	85 e0       	ldi	r24, 0x05	; 5
     232:	8b 83       	std	Y+3, r24	; 0x03
	{
		Adc::configureSingle(adcPinNr, Adc::V2_56);
     234:	0f 2e       	mov	r0, r31
     236:	f0 ec       	ldi	r31, 0xC0	; 192
     238:	ff 2e       	mov	r15, r31
     23a:	f0 2d       	mov	r31, r0
     23c:	06 e0       	ldi	r16, 0x06	; 6
     23e:	fa 82       	std	Y+2, r15	; 0x02
     240:	09 83       	std	Y+1, r16	; 0x01
     242:	ce 01       	movw	r24, r28
     244:	03 96       	adiw	r24, 0x03	; 3
     246:	be 01       	movw	r22, r28
     248:	6e 5f       	subi	r22, 0xFE	; 254
     24a:	7f 4f       	sbci	r23, 0xFF	; 255
     24c:	ae 01       	movw	r20, r28
     24e:	4f 5f       	subi	r20, 0xFF	; 255
     250:	5f 4f       	sbci	r21, 0xFF	; 255
     252:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE>
		Adc::Measurement measurement = Adc::measure();
     256:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN3Adc7measureEv>
     25a:	18 2f       	mov	r17, r24
		Usart::send(measurement.high);
     25c:	89 2f       	mov	r24, r25
     25e:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
		Usart::send(measurement.low);
     262:	81 2f       	mov	r24, r17
     264:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
#include "../modules/Adc.h"
#include "../modules/Pin.h"

void temperatureSensor()
{
	for (uint8_t adcPinNr = 5; adcPinNr < 8; ++adcPinNr)
     268:	8b 81       	ldd	r24, Y+3	; 0x03
     26a:	8f 5f       	subi	r24, 0xFF	; 255
     26c:	8b 83       	std	Y+3, r24	; 0x03
     26e:	88 30       	cpi	r24, 0x08	; 8
     270:	30 f3       	brcs	.-52     	; 0x23e <_Z17temperatureSensorv+0x20>
		Adc::configureSingle(adcPinNr, Adc::V2_56);
		Adc::Measurement measurement = Adc::measure();
		Usart::send(measurement.high);
		Usart::send(measurement.low);
	}
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	08 95       	ret

00000284 <main>:
#include "config/scenario_glue.h"
#include "modules/Usart.h"
#include "modules/Adc.h"

int main(void)
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	60 97       	sbiw	r28, 0x10	; 16
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
	Usart::init();
     298:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN5Usart4initEv>
Usart::pushFunction(Usart::Scenario(state, 0), 32);
     29c:	1d 86       	std	Y+13, r1	; 0x0d
     29e:	ce 01       	movw	r24, r28
     2a0:	0e 96       	adiw	r24, 0x0e	; 14
     2a2:	6f e5       	ldi	r22, 0x5F	; 95
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	ae 01       	movw	r20, r28
     2a8:	43 5f       	subi	r20, 0xF3	; 243
     2aa:	5f 4f       	sbci	r21, 0xFF	; 255
     2ac:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN5Usart8ScenarioC1EPFvvERKh>
     2b0:	ce 01       	movw	r24, r28
     2b2:	0e 96       	adiw	r24, 0x0e	; 14
     2b4:	60 e2       	ldi	r22, 0x20	; 32
     2b6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>
Usart::pushFunction(Usart::Scenario(temperatureSensor, 0), 33);
     2ba:	19 86       	std	Y+9, r1	; 0x09
     2bc:	ce 01       	movw	r24, r28
     2be:	0a 96       	adiw	r24, 0x0a	; 10
     2c0:	6f e0       	ldi	r22, 0x0F	; 15
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	ae 01       	movw	r20, r28
     2c6:	47 5f       	subi	r20, 0xF7	; 247
     2c8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ca:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN5Usart8ScenarioC1EPFvvERKh>
     2ce:	ce 01       	movw	r24, r28
     2d0:	0a 96       	adiw	r24, 0x0a	; 10
     2d2:	61 e2       	ldi	r22, 0x21	; 33
     2d4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>
Usart::pushFunction(Usart::Scenario(paramsTest, 4), 34);
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	8d 83       	std	Y+5, r24	; 0x05
     2dc:	ce 01       	movw	r24, r28
     2de:	06 96       	adiw	r24, 0x06	; 6
     2e0:	64 e8       	ldi	r22, 0x84	; 132
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	ae 01       	movw	r20, r28
     2e6:	4b 5f       	subi	r20, 0xFB	; 251
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN5Usart8ScenarioC1EPFvvERKh>
     2ee:	ce 01       	movw	r24, r28
     2f0:	06 96       	adiw	r24, 0x06	; 6
     2f2:	62 e2       	ldi	r22, 0x22	; 34
     2f4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>
     2f8:	19 82       	std	Y+1, r1	; 0x01
     2fa:	ce 01       	movw	r24, r28
     2fc:	02 96       	adiw	r24, 0x02	; 2
     2fe:	65 e5       	ldi	r22, 0x55	; 85
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	ae 01       	movw	r20, r28
     304:	4f 5f       	subi	r20, 0xFF	; 255
     306:	5f 4f       	sbci	r21, 0xFF	; 255
     308:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN5Usart8ScenarioC1EPFvvERKh>
     30c:	ce 01       	movw	r24, r28
     30e:	02 96       	adiw	r24, 0x02	; 2
     310:	63 e2       	ldi	r22, 0x23	; 35
     312:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>
	#include "config/scenario_register.h"
	Usart::run();
     316:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN5Usart3runEv>
	return 0;
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	60 96       	adiw	r28, 0x10	; 16
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_ZN3Adc11MeasurementC1ERVKhS2_>:

bool Adc::isConfigured = false;
uint8_t Adc::mux;
Adc::PRESCALER Adc::prescaler = Adc::_64;

Adc::Measurement::Measurement(const Register::ADDR &low, const Register::ADDR &high)
     330:	fc 01       	movw	r30, r24
: low(low), high(high)
     332:	db 01       	movw	r26, r22
     334:	8c 91       	ld	r24, X
     336:	80 83       	st	Z, r24
     338:	da 01       	movw	r26, r20
     33a:	8c 91       	ld	r24, X
     33c:	81 83       	std	Z+1, r24	; 0x01
{
}
     33e:	08 95       	ret

00000340 <_ZN3Adc11MeasurementC1Ev>:

Adc::Measurement::Measurement()
     340:	fc 01       	movw	r30, r24
: low(0xff), high(0xff)
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	80 83       	st	Z, r24
     346:	81 83       	std	Z+1, r24	; 0x01
{
}
     348:	08 95       	ret

0000034a <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE>:

void Adc::configureSingle(const uint8_t &pin, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	00 d0       	rcall	.+0      	; 0x356 <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE+0xc>
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	7c 01       	movw	r14, r24
	if (pin > 0x07)
     35c:	fc 01       	movw	r30, r24
     35e:	80 81       	ld	r24, Z
     360:	88 30       	cpi	r24, 0x08	; 8
     362:	18 f5       	brcc	.+70     	; 0x3aa <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE+0x60>
		return;
	mux = vref | (pin & 0x07);
     364:	87 70       	andi	r24, 0x07	; 7
     366:	fb 01       	movw	r30, r22
     368:	90 81       	ld	r25, Z
     36a:	89 2b       	or	r24, r25
     36c:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     370:	fa 01       	movw	r30, r20
     372:	80 81       	ld	r24, Z
     374:	80 93 60 00 	sts	0x0060, r24
     378:	18 e2       	ldi	r17, 0x28	; 40
	for (uint8_t i = 0; i <= 0x07; ++i)
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
     37a:	1a 83       	std	Y+2, r17	; 0x02
     37c:	ce 01       	movw	r24, r28
     37e:	02 96       	adiw	r24, 0x02	; 2
     380:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     384:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN3Pin6pullUpEv>
     388:	11 50       	subi	r17, 0x01	; 1
{
	if (pin > 0x07)
		return;
	mux = vref | (pin & 0x07);
	Adc::prescaler = prescaler;
	for (uint8_t i = 0; i <= 0x07; ++i)
     38a:	10 32       	cpi	r17, 0x20	; 32
     38c:	b1 f7       	brne	.-20     	; 0x37a <_ZN3Adc15configureSingleERKhRKNS_4VREFERKNS_9PRESCALERE+0x30>
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
	Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * pin).read();
     38e:	f7 01       	movw	r30, r14
     390:	90 81       	ld	r25, Z
     392:	88 e2       	ldi	r24, 0x28	; 40
     394:	89 1b       	sub	r24, r25
     396:	89 83       	std	Y+1, r24	; 0x01
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     3a0:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN3Pin4readEv>
	isConfigured = true;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 63 00 	sts	0x0063, r24
}
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE>:

void Adc::configureGained(const Adc::PIN_PAIR &pinPair, const bool &isCallibration, const Adc::GAIN &gain, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x12>
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x14>
     3ce:	0f 92       	push	r0
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	6c 01       	movw	r12, r24
     3d6:	7b 01       	movw	r14, r22
     3d8:	f8 01       	movw	r30, r16
	mux = pinPair | gain | (!isCallibration) | vref;
     3da:	da 01       	movw	r26, r20
     3dc:	9c 91       	ld	r25, X
     3de:	d6 01       	movw	r26, r12
     3e0:	8c 91       	ld	r24, X
     3e2:	98 2b       	or	r25, r24
     3e4:	db 01       	movw	r26, r22
     3e6:	4c 91       	ld	r20, X
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	84 27       	eor	r24, r20
     3ec:	89 2b       	or	r24, r25
     3ee:	d9 01       	movw	r26, r18
     3f0:	9c 91       	ld	r25, X
     3f2:	89 2b       	or	r24, r25
     3f4:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 93 60 00 	sts	0x0060, r24
     3fe:	18 e2       	ldi	r17, 0x28	; 40
	for (uint8_t i = 0; i <= 0x07; ++i)
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
     400:	1d 83       	std	Y+5, r17	; 0x05
     402:	ce 01       	movw	r24, r28
     404:	05 96       	adiw	r24, 0x05	; 5
     406:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     40a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN3Pin6pullUpEv>
     40e:	11 50       	subi	r17, 0x01	; 1

void Adc::configureGained(const Adc::PIN_PAIR &pinPair, const bool &isCallibration, const Adc::GAIN &gain, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
	mux = pinPair | gain | (!isCallibration) | vref;
	Adc::prescaler = prescaler;
	for (uint8_t i = 0; i <= 0x07; ++i)
     410:	10 32       	cpi	r17, 0x20	; 32
     412:	b1 f7       	brne	.-20     	; 0x400 <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x46>
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
	if (!isCallibration)
     414:	f7 01       	movw	r30, r14
     416:	80 81       	ld	r24, Z
     418:	88 23       	and	r24, r24
     41a:	41 f5       	brne	.+80     	; 0x46c <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0xb2>
	{
		switch (pinPair)
     41c:	d6 01       	movw	r26, r12
     41e:	8c 91       	ld	r24, X
     420:	88 23       	and	r24, r24
     422:	19 f0       	breq	.+6      	; 0x42a <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x70>
     424:	84 30       	cpi	r24, 0x04	; 4
     426:	11 f5       	brne	.+68     	; 0x46c <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0xb2>
     428:	11 c0       	rjmp	.+34     	; 0x44c <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0x92>
		{
			case _0_1:
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 0).read();
     42a:	88 e2       	ldi	r24, 0x28	; 40
     42c:	8c 83       	std	Y+4, r24	; 0x04
     42e:	ce 01       	movw	r24, r28
     430:	04 96       	adiw	r24, 0x04	; 4
     432:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     436:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN3Pin4readEv>
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 1).read();
     43a:	87 e2       	ldi	r24, 0x27	; 39
     43c:	8b 83       	std	Y+3, r24	; 0x03
     43e:	ce 01       	movw	r24, r28
     440:	03 96       	adiw	r24, 0x03	; 3
     442:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     446:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN3Pin4readEv>
				break;
     44a:	10 c0       	rjmp	.+32     	; 0x46c <_ZN3Adc15configureGainedERKNS_8PIN_PAIRERKbRKNS_4GAINERKNS_4VREFERKNS_9PRESCALERE+0xb2>
			case _3_2:
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 2).read();
     44c:	86 e2       	ldi	r24, 0x26	; 38
     44e:	8a 83       	std	Y+2, r24	; 0x02
     450:	ce 01       	movw	r24, r28
     452:	02 96       	adiw	r24, 0x02	; 2
     454:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     458:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN3Pin4readEv>
				Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * 3).read();
     45c:	85 e2       	ldi	r24, 0x25	; 37
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     468:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN3Pin4readEv>
				break;
		}			
	}
	isConfigured = true;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 63 00 	sts	0x0063, r24
}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	08 95       	ret

0000048e <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE>:

void Adc::configureDifferential(const uint8_t &pinPlus, const uint8_t &pinMinus, const Adc::VREF &vref, const Adc::PRESCALER &prescaler)
{
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	00 d0       	rcall	.+0      	; 0x49e <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x10>
     49e:	0f 92       	push	r0
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	6c 01       	movw	r12, r24
     4a6:	7b 01       	movw	r14, r22
	if (pinMinus == 1)
     4a8:	fb 01       	movw	r30, r22
     4aa:	80 81       	ld	r24, Z
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	41 f4       	brne	.+16     	; 0x4c0 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x32>
	{
		if (pinPlus > 0x07)
     4b0:	f6 01       	movw	r30, r12
     4b2:	80 81       	ld	r24, Z
     4b4:	88 30       	cpi	r24, 0x08	; 8
     4b6:	08 f0       	brcs	.+2      	; 0x4ba <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x2c>
     4b8:	3f c0       	rjmp	.+126    	; 0x538 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0xaa>
			return;
		mux = 0x00;
     4ba:	10 92 62 00 	sts	0x0062, r1
     4be:	09 c0       	rjmp	.+18     	; 0x4d2 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x44>
	}
	else if (pinMinus == 2)
     4c0:	82 30       	cpi	r24, 0x02	; 2
     4c2:	d1 f5       	brne	.+116    	; 0x538 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0xaa>
	{
		if (pinPlus > 0x05)
     4c4:	f6 01       	movw	r30, r12
     4c6:	80 81       	ld	r24, Z
     4c8:	86 30       	cpi	r24, 0x06	; 6
     4ca:	b0 f5       	brcc	.+108    	; 0x538 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0xaa>
			return;
		mux = 0x08;
     4cc:	88 e0       	ldi	r24, 0x08	; 8
     4ce:	80 93 62 00 	sts	0x0062, r24
	}
	else
		return;
	mux |= (0x10 | pinMinus | vref);
     4d2:	80 91 62 00 	lds	r24, 0x0062
     4d6:	80 61       	ori	r24, 0x10	; 16
     4d8:	f7 01       	movw	r30, r14
     4da:	90 81       	ld	r25, Z
     4dc:	89 2b       	or	r24, r25
     4de:	fa 01       	movw	r30, r20
     4e0:	90 81       	ld	r25, Z
     4e2:	89 2b       	or	r24, r25
     4e4:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     4e8:	f9 01       	movw	r30, r18
     4ea:	80 81       	ld	r24, Z
     4ec:	80 93 60 00 	sts	0x0060, r24
     4f0:	18 e2       	ldi	r17, 0x28	; 40
	for (uint8_t i = 0; i <= 0x07; ++i)
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
     4f2:	1b 83       	std	Y+3, r17	; 0x03
     4f4:	ce 01       	movw	r24, r28
     4f6:	03 96       	adiw	r24, 0x03	; 3
     4f8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     4fc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN3Pin6pullUpEv>
     500:	11 50       	subi	r17, 0x01	; 1
	}
	else
		return;
	mux |= (0x10 | pinMinus | vref);
	Adc::prescaler = prescaler;
	for (uint8_t i = 0; i <= 0x07; ++i)
     502:	10 32       	cpi	r17, 0x20	; 32
     504:	b1 f7       	brne	.-20     	; 0x4f2 <_ZN3Adc21configureDifferentialERKhS1_RKNS_4VREFERKNS_9PRESCALERE+0x64>
		Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * i).pullUp();
	Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * pinPlus).read();
     506:	18 e2       	ldi	r17, 0x28	; 40
     508:	f6 01       	movw	r30, r12
     50a:	80 81       	ld	r24, Z
     50c:	f1 2f       	mov	r31, r17
     50e:	f8 1b       	sub	r31, r24
     510:	fa 83       	std	Y+2, r31	; 0x02
     512:	ce 01       	movw	r24, r28
     514:	02 96       	adiw	r24, 0x02	; 2
     516:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     51a:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN3Pin4readEv>
	Pin::get(ADC_PIN_OFFSET + (ADC_IS_PIN_REVERSED ? -1 : 1) * pinMinus).read();
     51e:	f7 01       	movw	r30, r14
     520:	80 81       	ld	r24, Z
     522:	18 1b       	sub	r17, r24
     524:	19 83       	std	Y+1, r17	; 0x01
     526:	ce 01       	movw	r24, r28
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
     52e:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN3Pin4readEv>
	isConfigured = true;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 63 00 	sts	0x0063, r24
}
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	08 95       	ret

0000054e <_ZN3Adc16configureSpecialERKNS_12SPECIAL_VREFERKNS_9PRESCALERE>:

void Adc::configureSpecial(const Adc::SPECIAL_VREF &specialVref, const Adc::PRESCALER &prescaler)
{
	mux = specialVref;
     54e:	fc 01       	movw	r30, r24
     550:	80 81       	ld	r24, Z
     552:	80 93 62 00 	sts	0x0062, r24
	Adc::prescaler = prescaler;
     556:	fb 01       	movw	r30, r22
     558:	80 81       	ld	r24, Z
     55a:	80 93 60 00 	sts	0x0060, r24
	isConfigured = true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 63 00 	sts	0x0063, r24
}
     564:	08 95       	ret

00000566 <_ZN3Adc12setRegistersEv>:

void Adc::setRegisters()
{
	while (ADCSRA & (1<<ADSC));
     566:	36 99       	sbic	0x06, 6	; 6
     568:	fe cf       	rjmp	.-4      	; 0x566 <_ZN3Adc12setRegistersEv>
	ADCSRA &= ~(1<<ADEN);
     56a:	37 98       	cbi	0x06, 7	; 6
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	9f ef       	ldi	r25, 0xFF	; 255
     570:	a8 e0       	ldi	r26, 0x08	; 8
     572:	81 50       	subi	r24, 0x01	; 1
     574:	90 40       	sbci	r25, 0x00	; 0
     576:	a0 40       	sbci	r26, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <_ZN3Adc12setRegistersEv+0xc>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <_ZN3Adc12setRegistersEv+0x16>
     57c:	00 00       	nop
	_delay_ms(ADC_SLEEP_TIME);
	ADCSRA |= (1<<ADEN) | prescaler;
     57e:	96 b1       	in	r25, 0x06	; 6
     580:	80 91 60 00 	lds	r24, 0x0060
     584:	89 2b       	or	r24, r25
     586:	80 68       	ori	r24, 0x80	; 128
     588:	86 b9       	out	0x06, r24	; 6
	ADMUX |= mux;
     58a:	97 b1       	in	r25, 0x07	; 7
     58c:	80 91 62 00 	lds	r24, 0x0062
     590:	89 2b       	or	r24, r25
     592:	87 b9       	out	0x07, r24	; 7
	sei();
     594:	78 94       	sei
}
     596:	08 95       	ret

00000598 <_ZN3Adc7measureEv>:

const Adc::Measurement Adc::measure()
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	00 d0       	rcall	.+0      	; 0x59e <_ZN3Adc7measureEv+0x6>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <_ZN3Adc7measureEv+0x8>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
	if (!isConfigured)
     5a4:	80 91 63 00 	lds	r24, 0x0063
     5a8:	88 23       	and	r24, r24
     5aa:	39 f4       	brne	.+14     	; 0x5ba <_ZN3Adc7measureEv+0x22>
		return Adc::Measurement();
     5ac:	ce 01       	movw	r24, r28
     5ae:	03 96       	adiw	r24, 0x03	; 3
     5b0:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN3Adc11MeasurementC1Ev>
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	0f c0       	rjmp	.+30     	; 0x5d8 <_ZN3Adc7measureEv+0x40>
	setRegisters();
     5ba:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN3Adc12setRegistersEv>
	ADCSRA |= (1<<ADSC);
     5be:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     5c0:	36 99       	sbic	0x06, 6	; 6
     5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <_ZN3Adc7measureEv+0x28>
	return Adc::Measurement(ADCL, ADCH);
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	64 e2       	ldi	r22, 0x24	; 36
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	45 e2       	ldi	r20, 0x25	; 37
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	0e 94 98 01 	call	0x330	; 0x330 <_ZN3Adc11MeasurementC1ERVKhS2_>
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_ZN3Pin6setLowEv>:
};

// interface

void Pin::setLow()
{
     5e6:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
     5e8:	a1 81       	ldd	r26, Z+1	; 0x01
     5ea:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
     5ec:	4c 91       	ld	r20, X
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	c9 01       	movw	r24, r18
     5f4:	07 80       	ldd	r0, Z+7	; 0x07
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <_ZN3Pin6setLowEv+0x16>
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	0a 94       	dec	r0
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <_ZN3Pin6setLowEv+0x12>
     600:	84 2b       	or	r24, r20
     602:	8c 93       	st	X, r24
	Register::setOff(outState, addrMask);
     604:	a5 81       	ldd	r26, Z+5	; 0x05
     606:	b6 81       	ldd	r27, Z+6	; 0x06
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
     608:	8c 91       	ld	r24, X
     60a:	07 80       	ldd	r0, Z+7	; 0x07
     60c:	02 c0       	rjmp	.+4      	; 0x612 <_ZN3Pin6setLowEv+0x2c>
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	0a 94       	dec	r0
     614:	e2 f7       	brpl	.-8      	; 0x60e <_ZN3Pin6setLowEv+0x28>
     616:	20 95       	com	r18
     618:	28 23       	and	r18, r24
     61a:	2c 93       	st	X, r18
}
     61c:	08 95       	ret

0000061e <_ZN3Pin7setHighEv>:

void Pin::setHigh()
{
     61e:	fc 01       	movw	r30, r24
	Register::setOn(direction, addrMask);
     620:	a1 81       	ldd	r26, Z+1	; 0x01
     622:	b2 81       	ldd	r27, Z+2	; 0x02
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
     624:	4c 91       	ld	r20, X
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	c9 01       	movw	r24, r18
     62c:	07 80       	ldd	r0, Z+7	; 0x07
     62e:	02 c0       	rjmp	.+4      	; 0x634 <_ZN3Pin7setHighEv+0x16>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <_ZN3Pin7setHighEv+0x12>
     638:	84 2b       	or	r24, r20
     63a:	8c 93       	st	X, r24
	Register::setOn(outState, addrMask);
     63c:	a5 81       	ldd	r26, Z+5	; 0x05
     63e:	b6 81       	ldd	r27, Z+6	; 0x06
     640:	8c 91       	ld	r24, X
     642:	07 80       	ldd	r0, Z+7	; 0x07
     644:	02 c0       	rjmp	.+4      	; 0x64a <_ZN3Pin7setHighEv+0x2c>
     646:	22 0f       	add	r18, r18
     648:	33 1f       	adc	r19, r19
     64a:	0a 94       	dec	r0
     64c:	e2 f7       	brpl	.-8      	; 0x646 <_ZN3Pin7setHighEv+0x28>
     64e:	28 2b       	or	r18, r24
     650:	2c 93       	st	X, r18
}
     652:	08 95       	ret

00000654 <_ZNK3Pin6isHighEv>:

const bool Pin::isHigh() const
{
     654:	fc 01       	movw	r30, r24
	return Register::isHigh(outState, addrMask);
     656:	a5 81       	ldd	r26, Z+5	; 0x05
     658:	b6 81       	ldd	r27, Z+6	; 0x06
		addr &= ~(1<<bitNr);
	}
	
	static const bool isHigh(const ADDR &addr, const BIT_NR &bitNr)
	{
		return addr & (1<<bitNr);
     65a:	8c 91       	ld	r24, X
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	07 80       	ldd	r0, Z+7	; 0x07
     660:	02 c0       	rjmp	.+4      	; 0x666 <_ZNK3Pin6isHighEv+0x12>
     662:	95 95       	asr	r25
     664:	87 95       	ror	r24
     666:	0a 94       	dec	r0
     668:	e2 f7       	brpl	.-8      	; 0x662 <_ZNK3Pin6isHighEv+0xe>
}
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	08 95       	ret

0000066e <_ZN3Pin4readEv>:

void Pin::read()
{
     66e:	fc 01       	movw	r30, r24
	Register::setOff(direction, addrMask);
     670:	a1 81       	ldd	r26, Z+1	; 0x01
     672:	b2 81       	ldd	r27, Z+2	; 0x02
		addr |= (1<<bitNr);
	}
	
	static void setOff(ADDR &addr, const BIT_NR &bitNr)
	{
		addr &= ~(1<<bitNr);
     674:	4c 91       	ld	r20, X
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	c9 01       	movw	r24, r18
     67c:	07 80       	ldd	r0, Z+7	; 0x07
     67e:	02 c0       	rjmp	.+4      	; 0x684 <_ZN3Pin4readEv+0x16>
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	0a 94       	dec	r0
     686:	e2 f7       	brpl	.-8      	; 0x680 <_ZN3Pin4readEv+0x12>
     688:	80 95       	com	r24
     68a:	84 23       	and	r24, r20
     68c:	8c 93       	st	X, r24
	Register::setOff(outState, addrMask);
     68e:	a5 81       	ldd	r26, Z+5	; 0x05
     690:	b6 81       	ldd	r27, Z+6	; 0x06
     692:	8c 91       	ld	r24, X
     694:	07 80       	ldd	r0, Z+7	; 0x07
     696:	02 c0       	rjmp	.+4      	; 0x69c <_ZN3Pin4readEv+0x2e>
     698:	22 0f       	add	r18, r18
     69a:	33 1f       	adc	r19, r19
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <_ZN3Pin4readEv+0x2a>
     6a0:	20 95       	com	r18
     6a2:	28 23       	and	r18, r24
     6a4:	2c 93       	st	X, r18
}
     6a6:	08 95       	ret

000006a8 <_ZN3Pin6pullUpEv>:

void Pin::pullUp()
{
     6a8:	fc 01       	movw	r30, r24
	Register::setOff(direction, addrMask);
     6aa:	a1 81       	ldd	r26, Z+1	; 0x01
     6ac:	b2 81       	ldd	r27, Z+2	; 0x02
     6ae:	4c 91       	ld	r20, X
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	c9 01       	movw	r24, r18
     6b6:	07 80       	ldd	r0, Z+7	; 0x07
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <_ZN3Pin6pullUpEv+0x16>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	0a 94       	dec	r0
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <_ZN3Pin6pullUpEv+0x12>
     6c2:	80 95       	com	r24
     6c4:	84 23       	and	r24, r20
     6c6:	8c 93       	st	X, r24
	Register::setOn(outState, addrMask);
     6c8:	a5 81       	ldd	r26, Z+5	; 0x05
     6ca:	b6 81       	ldd	r27, Z+6	; 0x06
	typedef volatile uint8_t ADDR;
	typedef uint8_t BIT_NR;
	
	static void setOn(ADDR &addr, const BIT_NR &bitNr)
	{
		addr |= (1<<bitNr);
     6cc:	8c 91       	ld	r24, X
     6ce:	07 80       	ldd	r0, Z+7	; 0x07
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <_ZN3Pin6pullUpEv+0x2e>
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	0a 94       	dec	r0
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <_ZN3Pin6pullUpEv+0x2a>
     6da:	28 2b       	or	r18, r24
     6dc:	2c 93       	st	X, r18
}
     6de:	08 95       	ret

000006e0 <_ZNK3Pin11getAddrMaskEv>:

const Register::BIT_NR &Pin::getAddrMask() const
{
	return addrMask;
     6e0:	07 96       	adiw	r24, 0x07	; 7
}
     6e2:	08 95       	ret

000006e4 <_ZN3Pin3getERKh>:

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
	{
		if (index == instances[i].nr)
     6e4:	fc 01       	movw	r30, r24
     6e6:	90 81       	ld	r25, Z
     6e8:	80 91 64 00 	lds	r24, 0x0064
     6ec:	98 17       	cp	r25, r24
     6ee:	49 f0       	breq	.+18     	; 0x702 <_ZN3Pin3getERKh+0x1e>
     6f0:	ed e6       	ldi	r30, 0x6D	; 109
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	a9 01       	movw	r20, r18
     6fa:	80 81       	ld	r24, Z
     6fc:	89 17       	cp	r24, r25
     6fe:	79 f4       	brne	.+30     	; 0x71e <_ZN3Pin3getERKh+0x3a>
     700:	02 c0       	rjmp	.+4      	; 0x706 <_ZN3Pin3getERKh+0x22>
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	50 e0       	ldi	r21, 0x00	; 0
			return instances[i];
     706:	ca 01       	movw	r24, r20
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	84 0f       	add	r24, r20
     716:	95 1f       	adc	r25, r21
     718:	8c 59       	subi	r24, 0x9C	; 156
     71a:	9f 4f       	sbci	r25, 0xFF	; 255
     71c:	08 95       	ret
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	39 96       	adiw	r30, 0x09	; 9
	return addrMask;
}

Pin &Pin::get(const uint8_t &index)
{
	for (uint8_t i = 0; i < CONFIG_PINOUT_COUNT; ++i)
     724:	20 32       	cpi	r18, 0x20	; 32
     726:	31 05       	cpc	r19, r1
     728:	39 f7       	brne	.-50     	; 0x6f8 <_ZN3Pin3getERKh+0x14>
	{
		if (index == instances[i].nr)
			return instances[i];
	}
	return instances[0];
     72a:	84 e6       	ldi	r24, 0x64	; 100
     72c:	90 e0       	ldi	r25, 0x00	; 0
}
     72e:	08 95       	ret

00000730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>:

// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	fc 01       	movw	r30, r24
     742:	e7 01       	movw	r28, r14
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
     744:	db 01       	movw	r26, r22
     746:	8c 91       	ld	r24, X
     748:	80 83       	st	Z, r24
     74a:	52 83       	std	Z+2, r21	; 0x02
     74c:	41 83       	std	Z+1, r20	; 0x01
     74e:	34 83       	std	Z+4, r19	; 0x04
     750:	23 83       	std	Z+3, r18	; 0x03
     752:	16 83       	std	Z+6, r17	; 0x06
     754:	05 83       	std	Z+5, r16	; 0x05
     756:	88 81       	ld	r24, Y
     758:	87 83       	std	Z+7, r24	; 0x07
     75a:	d6 01       	movw	r26, r12
     75c:	8c 91       	ld	r24, X
     75e:	80 87       	std	Z+8, r24	; 0x08
{
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	df 90       	pop	r13
     76e:	cf 90       	pop	r12
     770:	08 95       	ret

00000772 <_GLOBAL__sub_I__ZN3Pin9instancesE>:
     772:	2f 92       	push	r2
     774:	3f 92       	push	r3
     776:	4f 92       	push	r4
     778:	5f 92       	push	r5
     77a:	6f 92       	push	r6
     77c:	7f 92       	push	r7
     77e:	8f 92       	push	r8
     780:	9f 92       	push	r9
     782:	bf 92       	push	r11
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	c0 58       	subi	r28, 0x80	; 128
     79a:	d0 40       	sbci	r29, 0x00	; 0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
// static members

Pin Pin::instances[] =
{
	#include "../config/pinout.h"
};
     7a6:	bb 24       	eor	r11, r11
     7a8:	b3 94       	inc	r11
     7aa:	b9 82       	std	Y+1, r11	; 0x01
     7ac:	1b 82       	std	Y+3, r1	; 0x03
     7ae:	1a 82       	std	Y+2, r1	; 0x02
     7b0:	bc 82       	std	Y+4, r11	; 0x04
     7b2:	0f 2e       	mov	r0, r31
     7b4:	f4 e6       	ldi	r31, 0x64	; 100
     7b6:	8f 2e       	mov	r8, r31
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	9f 2e       	mov	r9, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	c4 01       	movw	r24, r8
     7c0:	be 01       	movw	r22, r28
     7c2:	6f 5f       	subi	r22, 0xFF	; 255
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	47 e3       	ldi	r20, 0x37	; 55
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	26 e3       	ldi	r18, 0x36	; 54
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	08 e3       	ldi	r16, 0x38	; 56
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	ee 24       	eor	r14, r14
     7d4:	ff 24       	eor	r15, r15
     7d6:	68 94       	set
     7d8:	e1 f8       	bld	r14, 1
     7da:	ec 0e       	add	r14, r28
     7dc:	fd 1e       	adc	r15, r29
     7de:	cc 24       	eor	r12, r12
     7e0:	dd 24       	eor	r13, r13
     7e2:	68 94       	set
     7e4:	c2 f8       	bld	r12, 2
     7e6:	cc 0e       	add	r12, r28
     7e8:	dd 1e       	adc	r13, r29
     7ea:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	8d 83       	std	Y+5, r24	; 0x05
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	9f 83       	std	Y+7, r25	; 0x07
     7f8:	8e 83       	std	Y+6, r24	; 0x06
     7fa:	b8 86       	std	Y+8, r11	; 0x08
     7fc:	c4 01       	movw	r24, r8
     7fe:	09 96       	adiw	r24, 0x09	; 9
     800:	be 01       	movw	r22, r28
     802:	6b 5f       	subi	r22, 0xFB	; 251
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	47 e3       	ldi	r20, 0x37	; 55
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	26 e3       	ldi	r18, 0x36	; 54
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	0f 2e       	mov	r0, r31
     810:	f6 e0       	ldi	r31, 0x06	; 6
     812:	ef 2e       	mov	r14, r31
     814:	ff 24       	eor	r15, r15
     816:	f0 2d       	mov	r31, r0
     818:	ec 0e       	add	r14, r28
     81a:	fd 1e       	adc	r15, r29
     81c:	cc 24       	eor	r12, r12
     81e:	dd 24       	eor	r13, r13
     820:	68 94       	set
     822:	c3 f8       	bld	r12, 3
     824:	cc 0e       	add	r12, r28
     826:	dd 1e       	adc	r13, r29
     828:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	89 87       	std	Y+9, r24	; 0x09
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	9b 87       	std	Y+11, r25	; 0x0b
     836:	8a 87       	std	Y+10, r24	; 0x0a
     838:	bc 86       	std	Y+12, r11	; 0x0c
     83a:	c4 01       	movw	r24, r8
     83c:	42 96       	adiw	r24, 0x12	; 18
     83e:	be 01       	movw	r22, r28
     840:	67 5f       	subi	r22, 0xF7	; 247
     842:	7f 4f       	sbci	r23, 0xFF	; 255
     844:	47 e3       	ldi	r20, 0x37	; 55
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	26 e3       	ldi	r18, 0x36	; 54
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	0f 2e       	mov	r0, r31
     84e:	fa e0       	ldi	r31, 0x0A	; 10
     850:	ef 2e       	mov	r14, r31
     852:	ff 24       	eor	r15, r15
     854:	f0 2d       	mov	r31, r0
     856:	ec 0e       	add	r14, r28
     858:	fd 1e       	adc	r15, r29
     85a:	0f 2e       	mov	r0, r31
     85c:	fc e0       	ldi	r31, 0x0C	; 12
     85e:	cf 2e       	mov	r12, r31
     860:	dd 24       	eor	r13, r13
     862:	f0 2d       	mov	r31, r0
     864:	cc 0e       	add	r12, r28
     866:	dd 1e       	adc	r13, r29
     868:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	8d 87       	std	Y+13, r24	; 0x0d
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	9f 87       	std	Y+15, r25	; 0x0f
     876:	8e 87       	std	Y+14, r24	; 0x0e
     878:	b8 8a       	std	Y+16, r11	; 0x10
     87a:	c4 01       	movw	r24, r8
     87c:	4b 96       	adiw	r24, 0x1b	; 27
     87e:	be 01       	movw	r22, r28
     880:	63 5f       	subi	r22, 0xF3	; 243
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	47 e3       	ldi	r20, 0x37	; 55
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	26 e3       	ldi	r18, 0x36	; 54
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	0f 2e       	mov	r0, r31
     88e:	fe e0       	ldi	r31, 0x0E	; 14
     890:	ef 2e       	mov	r14, r31
     892:	ff 24       	eor	r15, r15
     894:	f0 2d       	mov	r31, r0
     896:	ec 0e       	add	r14, r28
     898:	fd 1e       	adc	r15, r29
     89a:	cc 24       	eor	r12, r12
     89c:	dd 24       	eor	r13, r13
     89e:	68 94       	set
     8a0:	c4 f8       	bld	r12, 4
     8a2:	cc 0e       	add	r12, r28
     8a4:	dd 1e       	adc	r13, r29
     8a6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	89 8b       	std	Y+17, r24	; 0x11
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	9b 8b       	std	Y+19, r25	; 0x13
     8b4:	8a 8b       	std	Y+18, r24	; 0x12
     8b6:	bc 8a       	std	Y+20, r11	; 0x14
     8b8:	c4 01       	movw	r24, r8
     8ba:	84 96       	adiw	r24, 0x24	; 36
     8bc:	be 01       	movw	r22, r28
     8be:	6f 5e       	subi	r22, 0xEF	; 239
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	47 e3       	ldi	r20, 0x37	; 55
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	26 e3       	ldi	r18, 0x36	; 54
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	0f 2e       	mov	r0, r31
     8cc:	f2 e1       	ldi	r31, 0x12	; 18
     8ce:	ef 2e       	mov	r14, r31
     8d0:	ff 24       	eor	r15, r15
     8d2:	f0 2d       	mov	r31, r0
     8d4:	ec 0e       	add	r14, r28
     8d6:	fd 1e       	adc	r15, r29
     8d8:	0f 2e       	mov	r0, r31
     8da:	f4 e1       	ldi	r31, 0x14	; 20
     8dc:	cf 2e       	mov	r12, r31
     8de:	dd 24       	eor	r13, r13
     8e0:	f0 2d       	mov	r31, r0
     8e2:	cc 0e       	add	r12, r28
     8e4:	dd 1e       	adc	r13, r29
     8e6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     8ea:	86 e0       	ldi	r24, 0x06	; 6
     8ec:	8d 8b       	std	Y+21, r24	; 0x15
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f5 e0       	ldi	r31, 0x05	; 5
     8f2:	2f 2e       	mov	r2, r31
     8f4:	33 24       	eor	r3, r3
     8f6:	f0 2d       	mov	r31, r0
     8f8:	3f 8a       	std	Y+23, r3	; 0x17
     8fa:	2e 8a       	std	Y+22, r2	; 0x16
     8fc:	18 8e       	std	Y+24, r1	; 0x18
     8fe:	c4 01       	movw	r24, r8
     900:	8d 96       	adiw	r24, 0x2d	; 45
     902:	be 01       	movw	r22, r28
     904:	6b 5e       	subi	r22, 0xEB	; 235
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	47 e3       	ldi	r20, 0x37	; 55
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	26 e3       	ldi	r18, 0x36	; 54
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	0f 2e       	mov	r0, r31
     912:	f6 e1       	ldi	r31, 0x16	; 22
     914:	ef 2e       	mov	r14, r31
     916:	ff 24       	eor	r15, r15
     918:	f0 2d       	mov	r31, r0
     91a:	ec 0e       	add	r14, r28
     91c:	fd 1e       	adc	r15, r29
     91e:	0f 2e       	mov	r0, r31
     920:	f8 e1       	ldi	r31, 0x18	; 24
     922:	cf 2e       	mov	r12, r31
     924:	dd 24       	eor	r13, r13
     926:	f0 2d       	mov	r31, r0
     928:	cc 0e       	add	r12, r28
     92a:	dd 1e       	adc	r13, r29
     92c:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     930:	87 e0       	ldi	r24, 0x07	; 7
     932:	89 8f       	std	Y+25, r24	; 0x19
     934:	0f 2e       	mov	r0, r31
     936:	f6 e0       	ldi	r31, 0x06	; 6
     938:	4f 2e       	mov	r4, r31
     93a:	55 24       	eor	r5, r5
     93c:	f0 2d       	mov	r31, r0
     93e:	5b 8e       	std	Y+27, r5	; 0x1b
     940:	4a 8e       	std	Y+26, r4	; 0x1a
     942:	1c 8e       	std	Y+28, r1	; 0x1c
     944:	c4 01       	movw	r24, r8
     946:	c6 96       	adiw	r24, 0x36	; 54
     948:	be 01       	movw	r22, r28
     94a:	67 5e       	subi	r22, 0xE7	; 231
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	47 e3       	ldi	r20, 0x37	; 55
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	26 e3       	ldi	r18, 0x36	; 54
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	0f 2e       	mov	r0, r31
     958:	fa e1       	ldi	r31, 0x1A	; 26
     95a:	ef 2e       	mov	r14, r31
     95c:	ff 24       	eor	r15, r15
     95e:	f0 2d       	mov	r31, r0
     960:	ec 0e       	add	r14, r28
     962:	fd 1e       	adc	r15, r29
     964:	0f 2e       	mov	r0, r31
     966:	fc e1       	ldi	r31, 0x1C	; 28
     968:	cf 2e       	mov	r12, r31
     96a:	dd 24       	eor	r13, r13
     96c:	f0 2d       	mov	r31, r0
     96e:	cc 0e       	add	r12, r28
     970:	dd 1e       	adc	r13, r29
     972:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     976:	88 e0       	ldi	r24, 0x08	; 8
     978:	8d 8f       	std	Y+29, r24	; 0x1d
     97a:	0f 2e       	mov	r0, r31
     97c:	f7 e0       	ldi	r31, 0x07	; 7
     97e:	6f 2e       	mov	r6, r31
     980:	77 24       	eor	r7, r7
     982:	f0 2d       	mov	r31, r0
     984:	7f 8e       	std	Y+31, r7	; 0x1f
     986:	6e 8e       	std	Y+30, r6	; 0x1e
     988:	18 a2       	lds	r17, 0x98
     98a:	c4 01       	movw	r24, r8
     98c:	cf 96       	adiw	r24, 0x3f	; 63
     98e:	be 01       	movw	r22, r28
     990:	63 5e       	subi	r22, 0xE3	; 227
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	47 e3       	ldi	r20, 0x37	; 55
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	26 e3       	ldi	r18, 0x36	; 54
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	0f 2e       	mov	r0, r31
     99e:	fe e1       	ldi	r31, 0x1E	; 30
     9a0:	ef 2e       	mov	r14, r31
     9a2:	ff 24       	eor	r15, r15
     9a4:	f0 2d       	mov	r31, r0
     9a6:	ec 0e       	add	r14, r28
     9a8:	fd 1e       	adc	r15, r29
     9aa:	cc 24       	eor	r12, r12
     9ac:	dd 24       	eor	r13, r13
     9ae:	68 94       	set
     9b0:	c5 f8       	bld	r12, 5
     9b2:	cc 0e       	add	r12, r28
     9b4:	dd 1e       	adc	r13, r29
     9b6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     9ba:	8e e0       	ldi	r24, 0x0E	; 14
     9bc:	89 a3       	lds	r24, 0x59
     9be:	1b a2       	lds	r17, 0x9b
     9c0:	1a a2       	lds	r17, 0x9a
     9c2:	1c a2       	lds	r17, 0x9c
     9c4:	8c ea       	ldi	r24, 0xAC	; 172
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5d       	subi	r22, 0xDF	; 223
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	41 e3       	ldi	r20, 0x31	; 49
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	20 e3       	ldi	r18, 0x30	; 48
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	02 e3       	ldi	r16, 0x32	; 50
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	0f 2e       	mov	r0, r31
     9dc:	f2 e2       	ldi	r31, 0x22	; 34
     9de:	ef 2e       	mov	r14, r31
     9e0:	ff 24       	eor	r15, r15
     9e2:	f0 2d       	mov	r31, r0
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f4 e2       	ldi	r31, 0x24	; 36
     9ec:	cf 2e       	mov	r12, r31
     9ee:	dd 24       	eor	r13, r13
     9f0:	f0 2d       	mov	r31, r0
     9f2:	cc 0e       	add	r12, r28
     9f4:	dd 1e       	adc	r13, r29
     9f6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     9fa:	8f e0       	ldi	r24, 0x0F	; 15
     9fc:	8d a3       	lds	r24, 0x5d
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	9f a3       	lds	r25, 0x5f
     a04:	8e a3       	lds	r24, 0x5e
     a06:	18 a6       	lds	r17, 0xb8
     a08:	85 eb       	ldi	r24, 0xB5	; 181
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	be 01       	movw	r22, r28
     a0e:	6b 5d       	subi	r22, 0xDB	; 219
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	41 e3       	ldi	r20, 0x31	; 49
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	20 e3       	ldi	r18, 0x30	; 48
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	0f 2e       	mov	r0, r31
     a1c:	f6 e2       	ldi	r31, 0x26	; 38
     a1e:	ef 2e       	mov	r14, r31
     a20:	ff 24       	eor	r15, r15
     a22:	f0 2d       	mov	r31, r0
     a24:	ec 0e       	add	r14, r28
     a26:	fd 1e       	adc	r15, r29
     a28:	0f 2e       	mov	r0, r31
     a2a:	f8 e2       	ldi	r31, 0x28	; 40
     a2c:	cf 2e       	mov	r12, r31
     a2e:	dd 24       	eor	r13, r13
     a30:	f0 2d       	mov	r31, r0
     a32:	cc 0e       	add	r12, r28
     a34:	dd 1e       	adc	r13, r29
     a36:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     a3a:	80 e1       	ldi	r24, 0x10	; 16
     a3c:	89 a7       	lds	r24, 0x79
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	9b a7       	lds	r25, 0x7b
     a44:	8a a7       	lds	r24, 0x7a
     a46:	bc a6       	lds	r27, 0xbc
     a48:	8e eb       	ldi	r24, 0xBE	; 190
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	be 01       	movw	r22, r28
     a4e:	67 5d       	subi	r22, 0xD7	; 215
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	41 e3       	ldi	r20, 0x31	; 49
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	20 e3       	ldi	r18, 0x30	; 48
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	0f 2e       	mov	r0, r31
     a5c:	fa e2       	ldi	r31, 0x2A	; 42
     a5e:	ef 2e       	mov	r14, r31
     a60:	ff 24       	eor	r15, r15
     a62:	f0 2d       	mov	r31, r0
     a64:	ec 0e       	add	r14, r28
     a66:	fd 1e       	adc	r15, r29
     a68:	0f 2e       	mov	r0, r31
     a6a:	fc e2       	ldi	r31, 0x2C	; 44
     a6c:	cf 2e       	mov	r12, r31
     a6e:	dd 24       	eor	r13, r13
     a70:	f0 2d       	mov	r31, r0
     a72:	cc 0e       	add	r12, r28
     a74:	dd 1e       	adc	r13, r29
     a76:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     a7a:	81 e1       	ldi	r24, 0x11	; 17
     a7c:	8d a7       	lds	r24, 0x7d
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	9f a7       	lds	r25, 0x7f
     a84:	8e a7       	lds	r24, 0x7e
     a86:	b8 aa       	sts	0x98, r27
     a88:	87 ec       	ldi	r24, 0xC7	; 199
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	be 01       	movw	r22, r28
     a8e:	63 5d       	subi	r22, 0xD3	; 211
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	41 e3       	ldi	r20, 0x31	; 49
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	20 e3       	ldi	r18, 0x30	; 48
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	0f 2e       	mov	r0, r31
     a9c:	fe e2       	ldi	r31, 0x2E	; 46
     a9e:	ef 2e       	mov	r14, r31
     aa0:	ff 24       	eor	r15, r15
     aa2:	f0 2d       	mov	r31, r0
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	0f 2e       	mov	r0, r31
     aaa:	f0 e3       	ldi	r31, 0x30	; 48
     aac:	cf 2e       	mov	r12, r31
     aae:	dd 24       	eor	r13, r13
     ab0:	f0 2d       	mov	r31, r0
     ab2:	cc 0e       	add	r12, r28
     ab4:	dd 1e       	adc	r13, r29
     ab6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     aba:	82 e1       	ldi	r24, 0x12	; 18
     abc:	89 ab       	sts	0x59, r24
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	9b ab       	sts	0x5b, r25
     ac4:	8a ab       	sts	0x5a, r24
     ac6:	bc aa       	sts	0x9c, r27
     ac8:	80 ed       	ldi	r24, 0xD0	; 208
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	be 01       	movw	r22, r28
     ace:	6f 5c       	subi	r22, 0xCF	; 207
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	41 e3       	ldi	r20, 0x31	; 49
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	20 e3       	ldi	r18, 0x30	; 48
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	0f 2e       	mov	r0, r31
     adc:	f2 e3       	ldi	r31, 0x32	; 50
     ade:	ef 2e       	mov	r14, r31
     ae0:	ff 24       	eor	r15, r15
     ae2:	f0 2d       	mov	r31, r0
     ae4:	ec 0e       	add	r14, r28
     ae6:	fd 1e       	adc	r15, r29
     ae8:	0f 2e       	mov	r0, r31
     aea:	f4 e3       	ldi	r31, 0x34	; 52
     aec:	cf 2e       	mov	r12, r31
     aee:	dd 24       	eor	r13, r13
     af0:	f0 2d       	mov	r31, r0
     af2:	cc 0e       	add	r12, r28
     af4:	dd 1e       	adc	r13, r29
     af6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     afa:	83 e1       	ldi	r24, 0x13	; 19
     afc:	8d ab       	sts	0x5d, r24
     afe:	3f aa       	sts	0x9f, r19
     b00:	2e aa       	sts	0x9e, r18
     b02:	b8 ae       	sts	0xb8, r27
     b04:	89 ed       	ldi	r24, 0xD9	; 217
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	be 01       	movw	r22, r28
     b0a:	6b 5c       	subi	r22, 0xCB	; 203
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	41 e3       	ldi	r20, 0x31	; 49
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	20 e3       	ldi	r18, 0x30	; 48
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	0f 2e       	mov	r0, r31
     b18:	f6 e3       	ldi	r31, 0x36	; 54
     b1a:	ef 2e       	mov	r14, r31
     b1c:	ff 24       	eor	r15, r15
     b1e:	f0 2d       	mov	r31, r0
     b20:	ec 0e       	add	r14, r28
     b22:	fd 1e       	adc	r15, r29
     b24:	0f 2e       	mov	r0, r31
     b26:	f8 e3       	ldi	r31, 0x38	; 56
     b28:	cf 2e       	mov	r12, r31
     b2a:	dd 24       	eor	r13, r13
     b2c:	f0 2d       	mov	r31, r0
     b2e:	cc 0e       	add	r12, r28
     b30:	dd 1e       	adc	r13, r29
     b32:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     b36:	84 e1       	ldi	r24, 0x14	; 20
     b38:	89 af       	sts	0x79, r24
     b3a:	5b ae       	sts	0xbb, r21
     b3c:	4a ae       	sts	0xba, r20
     b3e:	bc ae       	sts	0xbc, r27
     b40:	82 ee       	ldi	r24, 0xE2	; 226
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	be 01       	movw	r22, r28
     b46:	67 5c       	subi	r22, 0xC7	; 199
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	41 e3       	ldi	r20, 0x31	; 49
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	20 e3       	ldi	r18, 0x30	; 48
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	0f 2e       	mov	r0, r31
     b54:	fa e3       	ldi	r31, 0x3A	; 58
     b56:	ef 2e       	mov	r14, r31
     b58:	ff 24       	eor	r15, r15
     b5a:	f0 2d       	mov	r31, r0
     b5c:	ec 0e       	add	r14, r28
     b5e:	fd 1e       	adc	r15, r29
     b60:	0f 2e       	mov	r0, r31
     b62:	fc e3       	ldi	r31, 0x3C	; 60
     b64:	cf 2e       	mov	r12, r31
     b66:	dd 24       	eor	r13, r13
     b68:	f0 2d       	mov	r31, r0
     b6a:	cc 0e       	add	r12, r28
     b6c:	dd 1e       	adc	r13, r29
     b6e:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     b72:	85 e1       	ldi	r24, 0x15	; 21
     b74:	8d af       	sts	0x7d, r24
     b76:	7f ae       	sts	0xbf, r23
     b78:	6e ae       	sts	0xbe, r22
     b7a:	21 96       	adiw	r28, 0x01	; 1
     b7c:	bf ae       	sts	0xbf, r27
     b7e:	21 97       	sbiw	r28, 0x01	; 1
     b80:	8b ee       	ldi	r24, 0xEB	; 235
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	be 01       	movw	r22, r28
     b86:	63 5c       	subi	r22, 0xC3	; 195
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	41 e3       	ldi	r20, 0x31	; 49
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	20 e3       	ldi	r18, 0x30	; 48
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	0f 2e       	mov	r0, r31
     b94:	fe e3       	ldi	r31, 0x3E	; 62
     b96:	ef 2e       	mov	r14, r31
     b98:	ff 24       	eor	r15, r15
     b9a:	f0 2d       	mov	r31, r0
     b9c:	ec 0e       	add	r14, r28
     b9e:	fd 1e       	adc	r15, r29
     ba0:	cc 24       	eor	r12, r12
     ba2:	dd 24       	eor	r13, r13
     ba4:	68 94       	set
     ba6:	c6 f8       	bld	r12, 6
     ba8:	cc 0e       	add	r12, r28
     baa:	dd 1e       	adc	r13, r29
     bac:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     bb0:	86 e1       	ldi	r24, 0x16	; 22
     bb2:	22 96       	adiw	r28, 0x02	; 2
     bb4:	8f af       	sts	0x7f, r24
     bb6:	22 97       	sbiw	r28, 0x02	; 2
     bb8:	24 96       	adiw	r28, 0x04	; 4
     bba:	1f ae       	sts	0xbf, r17
     bbc:	1e ae       	sts	0xbe, r17
     bbe:	24 97       	sbiw	r28, 0x04	; 4
     bc0:	25 96       	adiw	r28, 0x05	; 5
     bc2:	bf ae       	sts	0xbf, r27
     bc4:	25 97       	sbiw	r28, 0x05	; 5
     bc6:	84 ef       	ldi	r24, 0xF4	; 244
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	be 01       	movw	r22, r28
     bcc:	6f 5b       	subi	r22, 0xBF	; 191
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	44 e3       	ldi	r20, 0x34	; 52
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	23 e3       	ldi	r18, 0x33	; 51
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	05 e3       	ldi	r16, 0x35	; 53
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	0f 2e       	mov	r0, r31
     bde:	f2 e4       	ldi	r31, 0x42	; 66
     be0:	ef 2e       	mov	r14, r31
     be2:	ff 24       	eor	r15, r15
     be4:	f0 2d       	mov	r31, r0
     be6:	ec 0e       	add	r14, r28
     be8:	fd 1e       	adc	r15, r29
     bea:	0f 2e       	mov	r0, r31
     bec:	f4 e4       	ldi	r31, 0x44	; 68
     bee:	cf 2e       	mov	r12, r31
     bf0:	dd 24       	eor	r13, r13
     bf2:	f0 2d       	mov	r31, r0
     bf4:	cc 0e       	add	r12, r28
     bf6:	dd 1e       	adc	r13, r29
     bf8:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     bfc:	87 e1       	ldi	r24, 0x17	; 23
     bfe:	26 96       	adiw	r28, 0x06	; 6
     c00:	8f af       	sts	0x7f, r24
     c02:	26 97       	sbiw	r28, 0x06	; 6
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	28 96       	adiw	r28, 0x08	; 8
     c0a:	9f af       	sts	0x7f, r25
     c0c:	8e af       	sts	0x7e, r24
     c0e:	28 97       	sbiw	r28, 0x08	; 8
     c10:	29 96       	adiw	r28, 0x09	; 9
     c12:	bf ae       	sts	0xbf, r27
     c14:	29 97       	sbiw	r28, 0x09	; 9
     c16:	8d ef       	ldi	r24, 0xFD	; 253
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	be 01       	movw	r22, r28
     c1c:	6b 5b       	subi	r22, 0xBB	; 187
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	44 e3       	ldi	r20, 0x34	; 52
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	23 e3       	ldi	r18, 0x33	; 51
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	0f 2e       	mov	r0, r31
     c2a:	f6 e4       	ldi	r31, 0x46	; 70
     c2c:	ef 2e       	mov	r14, r31
     c2e:	ff 24       	eor	r15, r15
     c30:	f0 2d       	mov	r31, r0
     c32:	ec 0e       	add	r14, r28
     c34:	fd 1e       	adc	r15, r29
     c36:	0f 2e       	mov	r0, r31
     c38:	f8 e4       	ldi	r31, 0x48	; 72
     c3a:	cf 2e       	mov	r12, r31
     c3c:	dd 24       	eor	r13, r13
     c3e:	f0 2d       	mov	r31, r0
     c40:	cc 0e       	add	r12, r28
     c42:	dd 1e       	adc	r13, r29
     c44:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     c48:	88 e1       	ldi	r24, 0x18	; 24
     c4a:	2a 96       	adiw	r28, 0x0a	; 10
     c4c:	8f af       	sts	0x7f, r24
     c4e:	2a 97       	sbiw	r28, 0x0a	; 10
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	2c 96       	adiw	r28, 0x0c	; 12
     c56:	9f af       	sts	0x7f, r25
     c58:	8e af       	sts	0x7e, r24
     c5a:	2c 97       	sbiw	r28, 0x0c	; 12
     c5c:	2d 96       	adiw	r28, 0x0d	; 13
     c5e:	bf ae       	sts	0xbf, r27
     c60:	2d 97       	sbiw	r28, 0x0d	; 13
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	be 01       	movw	r22, r28
     c68:	67 5b       	subi	r22, 0xB7	; 183
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	44 e3       	ldi	r20, 0x34	; 52
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	23 e3       	ldi	r18, 0x33	; 51
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	0f 2e       	mov	r0, r31
     c76:	fa e4       	ldi	r31, 0x4A	; 74
     c78:	ef 2e       	mov	r14, r31
     c7a:	ff 24       	eor	r15, r15
     c7c:	f0 2d       	mov	r31, r0
     c7e:	ec 0e       	add	r14, r28
     c80:	fd 1e       	adc	r15, r29
     c82:	0f 2e       	mov	r0, r31
     c84:	fc e4       	ldi	r31, 0x4C	; 76
     c86:	cf 2e       	mov	r12, r31
     c88:	dd 24       	eor	r13, r13
     c8a:	f0 2d       	mov	r31, r0
     c8c:	cc 0e       	add	r12, r28
     c8e:	dd 1e       	adc	r13, r29
     c90:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     c94:	89 e1       	ldi	r24, 0x19	; 25
     c96:	2e 96       	adiw	r28, 0x0e	; 14
     c98:	8f af       	sts	0x7f, r24
     c9a:	2e 97       	sbiw	r28, 0x0e	; 14
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	60 96       	adiw	r28, 0x10	; 16
     ca2:	9f af       	sts	0x7f, r25
     ca4:	8e af       	sts	0x7e, r24
     ca6:	60 97       	sbiw	r28, 0x10	; 16
     ca8:	61 96       	adiw	r28, 0x11	; 17
     caa:	bf ae       	sts	0xbf, r27
     cac:	61 97       	sbiw	r28, 0x11	; 17
     cae:	8f e0       	ldi	r24, 0x0F	; 15
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	be 01       	movw	r22, r28
     cb4:	63 5b       	subi	r22, 0xB3	; 179
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	44 e3       	ldi	r20, 0x34	; 52
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	23 e3       	ldi	r18, 0x33	; 51
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	0f 2e       	mov	r0, r31
     cc2:	fe e4       	ldi	r31, 0x4E	; 78
     cc4:	ef 2e       	mov	r14, r31
     cc6:	ff 24       	eor	r15, r15
     cc8:	f0 2d       	mov	r31, r0
     cca:	ec 0e       	add	r14, r28
     ccc:	fd 1e       	adc	r15, r29
     cce:	0f 2e       	mov	r0, r31
     cd0:	f0 e5       	ldi	r31, 0x50	; 80
     cd2:	cf 2e       	mov	r12, r31
     cd4:	dd 24       	eor	r13, r13
     cd6:	f0 2d       	mov	r31, r0
     cd8:	cc 0e       	add	r12, r28
     cda:	dd 1e       	adc	r13, r29
     cdc:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     ce0:	8a e1       	ldi	r24, 0x1A	; 26
     ce2:	62 96       	adiw	r28, 0x12	; 18
     ce4:	8f af       	sts	0x7f, r24
     ce6:	62 97       	sbiw	r28, 0x12	; 18
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	64 96       	adiw	r28, 0x14	; 20
     cee:	9f af       	sts	0x7f, r25
     cf0:	8e af       	sts	0x7e, r24
     cf2:	64 97       	sbiw	r28, 0x14	; 20
     cf4:	65 96       	adiw	r28, 0x15	; 21
     cf6:	bf ae       	sts	0xbf, r27
     cf8:	65 97       	sbiw	r28, 0x15	; 21
     cfa:	88 e1       	ldi	r24, 0x18	; 24
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	be 01       	movw	r22, r28
     d00:	6f 5a       	subi	r22, 0xAF	; 175
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	44 e3       	ldi	r20, 0x34	; 52
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	23 e3       	ldi	r18, 0x33	; 51
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	0f 2e       	mov	r0, r31
     d0e:	f2 e5       	ldi	r31, 0x52	; 82
     d10:	ef 2e       	mov	r14, r31
     d12:	ff 24       	eor	r15, r15
     d14:	f0 2d       	mov	r31, r0
     d16:	ec 0e       	add	r14, r28
     d18:	fd 1e       	adc	r15, r29
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f4 e5       	ldi	r31, 0x54	; 84
     d1e:	cf 2e       	mov	r12, r31
     d20:	dd 24       	eor	r13, r13
     d22:	f0 2d       	mov	r31, r0
     d24:	cc 0e       	add	r12, r28
     d26:	dd 1e       	adc	r13, r29
     d28:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     d2c:	8b e1       	ldi	r24, 0x1B	; 27
     d2e:	66 96       	adiw	r28, 0x16	; 22
     d30:	8f af       	sts	0x7f, r24
     d32:	66 97       	sbiw	r28, 0x16	; 22
     d34:	68 96       	adiw	r28, 0x18	; 24
     d36:	3f ae       	sts	0xbf, r19
     d38:	2e ae       	sts	0xbe, r18
     d3a:	68 97       	sbiw	r28, 0x18	; 24
     d3c:	69 96       	adiw	r28, 0x19	; 25
     d3e:	bf ae       	sts	0xbf, r27
     d40:	69 97       	sbiw	r28, 0x19	; 25
     d42:	81 e2       	ldi	r24, 0x21	; 33
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	be 01       	movw	r22, r28
     d48:	6b 5a       	subi	r22, 0xAB	; 171
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	44 e3       	ldi	r20, 0x34	; 52
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	23 e3       	ldi	r18, 0x33	; 51
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	0f 2e       	mov	r0, r31
     d56:	f6 e5       	ldi	r31, 0x56	; 86
     d58:	ef 2e       	mov	r14, r31
     d5a:	ff 24       	eor	r15, r15
     d5c:	f0 2d       	mov	r31, r0
     d5e:	ec 0e       	add	r14, r28
     d60:	fd 1e       	adc	r15, r29
     d62:	0f 2e       	mov	r0, r31
     d64:	f8 e5       	ldi	r31, 0x58	; 88
     d66:	cf 2e       	mov	r12, r31
     d68:	dd 24       	eor	r13, r13
     d6a:	f0 2d       	mov	r31, r0
     d6c:	cc 0e       	add	r12, r28
     d6e:	dd 1e       	adc	r13, r29
     d70:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     d74:	8c e1       	ldi	r24, 0x1C	; 28
     d76:	6a 96       	adiw	r28, 0x1a	; 26
     d78:	8f af       	sts	0x7f, r24
     d7a:	6a 97       	sbiw	r28, 0x1a	; 26
     d7c:	6c 96       	adiw	r28, 0x1c	; 28
     d7e:	5f ae       	sts	0xbf, r21
     d80:	4e ae       	sts	0xbe, r20
     d82:	6c 97       	sbiw	r28, 0x1c	; 28
     d84:	6d 96       	adiw	r28, 0x1d	; 29
     d86:	bf ae       	sts	0xbf, r27
     d88:	6d 97       	sbiw	r28, 0x1d	; 29
     d8a:	8a e2       	ldi	r24, 0x2A	; 42
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	be 01       	movw	r22, r28
     d90:	67 5a       	subi	r22, 0xA7	; 167
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	44 e3       	ldi	r20, 0x34	; 52
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	23 e3       	ldi	r18, 0x33	; 51
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	0f 2e       	mov	r0, r31
     d9e:	fa e5       	ldi	r31, 0x5A	; 90
     da0:	ef 2e       	mov	r14, r31
     da2:	ff 24       	eor	r15, r15
     da4:	f0 2d       	mov	r31, r0
     da6:	ec 0e       	add	r14, r28
     da8:	fd 1e       	adc	r15, r29
     daa:	0f 2e       	mov	r0, r31
     dac:	fc e5       	ldi	r31, 0x5C	; 92
     dae:	cf 2e       	mov	r12, r31
     db0:	dd 24       	eor	r13, r13
     db2:	f0 2d       	mov	r31, r0
     db4:	cc 0e       	add	r12, r28
     db6:	dd 1e       	adc	r13, r29
     db8:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     dbc:	8d e1       	ldi	r24, 0x1D	; 29
     dbe:	6e 96       	adiw	r28, 0x1e	; 30
     dc0:	8f af       	sts	0x7f, r24
     dc2:	6e 97       	sbiw	r28, 0x1e	; 30
     dc4:	a0 96       	adiw	r28, 0x20	; 32
     dc6:	7f ae       	sts	0xbf, r23
     dc8:	6e ae       	sts	0xbe, r22
     dca:	a0 97       	sbiw	r28, 0x20	; 32
     dcc:	a1 96       	adiw	r28, 0x21	; 33
     dce:	bf ae       	sts	0xbf, r27
     dd0:	a1 97       	sbiw	r28, 0x21	; 33
     dd2:	83 e3       	ldi	r24, 0x33	; 51
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	be 01       	movw	r22, r28
     dd8:	63 5a       	subi	r22, 0xA3	; 163
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	44 e3       	ldi	r20, 0x34	; 52
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	23 e3       	ldi	r18, 0x33	; 51
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	0f 2e       	mov	r0, r31
     de6:	fe e5       	ldi	r31, 0x5E	; 94
     de8:	ef 2e       	mov	r14, r31
     dea:	ff 24       	eor	r15, r15
     dec:	f0 2d       	mov	r31, r0
     dee:	ec 0e       	add	r14, r28
     df0:	fd 1e       	adc	r15, r29
     df2:	0f 2e       	mov	r0, r31
     df4:	f0 e6       	ldi	r31, 0x60	; 96
     df6:	cf 2e       	mov	r12, r31
     df8:	dd 24       	eor	r13, r13
     dfa:	f0 2d       	mov	r31, r0
     dfc:	cc 0e       	add	r12, r28
     dfe:	dd 1e       	adc	r13, r29
     e00:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     e04:	81 e2       	ldi	r24, 0x21	; 33
     e06:	a2 96       	adiw	r28, 0x22	; 34
     e08:	8f af       	sts	0x7f, r24
     e0a:	a2 97       	sbiw	r28, 0x22	; 34
     e0c:	a4 96       	adiw	r28, 0x24	; 36
     e0e:	7f ae       	sts	0xbf, r23
     e10:	6e ae       	sts	0xbe, r22
     e12:	a4 97       	sbiw	r28, 0x24	; 36
     e14:	a5 96       	adiw	r28, 0x25	; 37
     e16:	bf ae       	sts	0xbf, r27
     e18:	a5 97       	sbiw	r28, 0x25	; 37
     e1a:	8c e3       	ldi	r24, 0x3C	; 60
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	be 01       	movw	r22, r28
     e20:	6f 59       	subi	r22, 0x9F	; 159
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	4a e3       	ldi	r20, 0x3A	; 58
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	29 e3       	ldi	r18, 0x39	; 57
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	0b e3       	ldi	r16, 0x3B	; 59
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	0f 2e       	mov	r0, r31
     e32:	f2 e6       	ldi	r31, 0x62	; 98
     e34:	ef 2e       	mov	r14, r31
     e36:	ff 24       	eor	r15, r15
     e38:	f0 2d       	mov	r31, r0
     e3a:	ec 0e       	add	r14, r28
     e3c:	fd 1e       	adc	r15, r29
     e3e:	0f 2e       	mov	r0, r31
     e40:	f4 e6       	ldi	r31, 0x64	; 100
     e42:	cf 2e       	mov	r12, r31
     e44:	dd 24       	eor	r13, r13
     e46:	f0 2d       	mov	r31, r0
     e48:	cc 0e       	add	r12, r28
     e4a:	dd 1e       	adc	r13, r29
     e4c:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     e50:	82 e2       	ldi	r24, 0x22	; 34
     e52:	a6 96       	adiw	r28, 0x26	; 38
     e54:	8f af       	sts	0x7f, r24
     e56:	a6 97       	sbiw	r28, 0x26	; 38
     e58:	a8 96       	adiw	r28, 0x28	; 40
     e5a:	5f ae       	sts	0xbf, r21
     e5c:	4e ae       	sts	0xbe, r20
     e5e:	a8 97       	sbiw	r28, 0x28	; 40
     e60:	a9 96       	adiw	r28, 0x29	; 41
     e62:	bf ae       	sts	0xbf, r27
     e64:	a9 97       	sbiw	r28, 0x29	; 41
     e66:	85 e4       	ldi	r24, 0x45	; 69
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	be 01       	movw	r22, r28
     e6c:	6b 59       	subi	r22, 0x9B	; 155
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	4a e3       	ldi	r20, 0x3A	; 58
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	29 e3       	ldi	r18, 0x39	; 57
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	0f 2e       	mov	r0, r31
     e7a:	f6 e6       	ldi	r31, 0x66	; 102
     e7c:	ef 2e       	mov	r14, r31
     e7e:	ff 24       	eor	r15, r15
     e80:	f0 2d       	mov	r31, r0
     e82:	ec 0e       	add	r14, r28
     e84:	fd 1e       	adc	r15, r29
     e86:	0f 2e       	mov	r0, r31
     e88:	f8 e6       	ldi	r31, 0x68	; 104
     e8a:	cf 2e       	mov	r12, r31
     e8c:	dd 24       	eor	r13, r13
     e8e:	f0 2d       	mov	r31, r0
     e90:	cc 0e       	add	r12, r28
     e92:	dd 1e       	adc	r13, r29
     e94:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     e98:	83 e2       	ldi	r24, 0x23	; 35
     e9a:	aa 96       	adiw	r28, 0x2a	; 42
     e9c:	8f af       	sts	0x7f, r24
     e9e:	aa 97       	sbiw	r28, 0x2a	; 42
     ea0:	ac 96       	adiw	r28, 0x2c	; 44
     ea2:	3f ae       	sts	0xbf, r19
     ea4:	2e ae       	sts	0xbe, r18
     ea6:	ac 97       	sbiw	r28, 0x2c	; 44
     ea8:	ad 96       	adiw	r28, 0x2d	; 45
     eaa:	bf ae       	sts	0xbf, r27
     eac:	ad 97       	sbiw	r28, 0x2d	; 45
     eae:	8e e4       	ldi	r24, 0x4E	; 78
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	be 01       	movw	r22, r28
     eb4:	67 59       	subi	r22, 0x97	; 151
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	4a e3       	ldi	r20, 0x3A	; 58
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	29 e3       	ldi	r18, 0x39	; 57
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	0f 2e       	mov	r0, r31
     ec2:	fa e6       	ldi	r31, 0x6A	; 106
     ec4:	ef 2e       	mov	r14, r31
     ec6:	ff 24       	eor	r15, r15
     ec8:	f0 2d       	mov	r31, r0
     eca:	ec 0e       	add	r14, r28
     ecc:	fd 1e       	adc	r15, r29
     ece:	0f 2e       	mov	r0, r31
     ed0:	fc e6       	ldi	r31, 0x6C	; 108
     ed2:	cf 2e       	mov	r12, r31
     ed4:	dd 24       	eor	r13, r13
     ed6:	f0 2d       	mov	r31, r0
     ed8:	cc 0e       	add	r12, r28
     eda:	dd 1e       	adc	r13, r29
     edc:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     ee0:	84 e2       	ldi	r24, 0x24	; 36
     ee2:	ae 96       	adiw	r28, 0x2e	; 46
     ee4:	8f af       	sts	0x7f, r24
     ee6:	ae 97       	sbiw	r28, 0x2e	; 46
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	e0 96       	adiw	r28, 0x30	; 48
     eee:	9f af       	sts	0x7f, r25
     ef0:	8e af       	sts	0x7e, r24
     ef2:	e0 97       	sbiw	r28, 0x30	; 48
     ef4:	e1 96       	adiw	r28, 0x31	; 49
     ef6:	bf ae       	sts	0xbf, r27
     ef8:	e1 97       	sbiw	r28, 0x31	; 49
     efa:	87 e5       	ldi	r24, 0x57	; 87
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	be 01       	movw	r22, r28
     f00:	63 59       	subi	r22, 0x93	; 147
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	4a e3       	ldi	r20, 0x3A	; 58
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	29 e3       	ldi	r18, 0x39	; 57
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	0f 2e       	mov	r0, r31
     f0e:	fe e6       	ldi	r31, 0x6E	; 110
     f10:	ef 2e       	mov	r14, r31
     f12:	ff 24       	eor	r15, r15
     f14:	f0 2d       	mov	r31, r0
     f16:	ec 0e       	add	r14, r28
     f18:	fd 1e       	adc	r15, r29
     f1a:	0f 2e       	mov	r0, r31
     f1c:	f0 e7       	ldi	r31, 0x70	; 112
     f1e:	cf 2e       	mov	r12, r31
     f20:	dd 24       	eor	r13, r13
     f22:	f0 2d       	mov	r31, r0
     f24:	cc 0e       	add	r12, r28
     f26:	dd 1e       	adc	r13, r29
     f28:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     f2c:	85 e2       	ldi	r24, 0x25	; 37
     f2e:	e2 96       	adiw	r28, 0x32	; 50
     f30:	8f af       	sts	0x7f, r24
     f32:	e2 97       	sbiw	r28, 0x32	; 50
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	e4 96       	adiw	r28, 0x34	; 52
     f3a:	9f af       	sts	0x7f, r25
     f3c:	8e af       	sts	0x7e, r24
     f3e:	e4 97       	sbiw	r28, 0x34	; 52
     f40:	e5 96       	adiw	r28, 0x35	; 53
     f42:	bf ae       	sts	0xbf, r27
     f44:	e5 97       	sbiw	r28, 0x35	; 53
     f46:	80 e6       	ldi	r24, 0x60	; 96
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	be 01       	movw	r22, r28
     f4c:	6f 58       	subi	r22, 0x8F	; 143
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	4a e3       	ldi	r20, 0x3A	; 58
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	29 e3       	ldi	r18, 0x39	; 57
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	0f 2e       	mov	r0, r31
     f5a:	f2 e7       	ldi	r31, 0x72	; 114
     f5c:	ef 2e       	mov	r14, r31
     f5e:	ff 24       	eor	r15, r15
     f60:	f0 2d       	mov	r31, r0
     f62:	ec 0e       	add	r14, r28
     f64:	fd 1e       	adc	r15, r29
     f66:	0f 2e       	mov	r0, r31
     f68:	f4 e7       	ldi	r31, 0x74	; 116
     f6a:	cf 2e       	mov	r12, r31
     f6c:	dd 24       	eor	r13, r13
     f6e:	f0 2d       	mov	r31, r0
     f70:	cc 0e       	add	r12, r28
     f72:	dd 1e       	adc	r13, r29
     f74:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     f78:	86 e2       	ldi	r24, 0x26	; 38
     f7a:	e6 96       	adiw	r28, 0x36	; 54
     f7c:	8f af       	sts	0x7f, r24
     f7e:	e6 97       	sbiw	r28, 0x36	; 54
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	e8 96       	adiw	r28, 0x38	; 56
     f86:	9f af       	sts	0x7f, r25
     f88:	8e af       	sts	0x7e, r24
     f8a:	e8 97       	sbiw	r28, 0x38	; 56
     f8c:	e9 96       	adiw	r28, 0x39	; 57
     f8e:	bf ae       	sts	0xbf, r27
     f90:	e9 97       	sbiw	r28, 0x39	; 57
     f92:	89 e6       	ldi	r24, 0x69	; 105
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	be 01       	movw	r22, r28
     f98:	6b 58       	subi	r22, 0x8B	; 139
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	4a e3       	ldi	r20, 0x3A	; 58
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	29 e3       	ldi	r18, 0x39	; 57
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	0f 2e       	mov	r0, r31
     fa6:	f6 e7       	ldi	r31, 0x76	; 118
     fa8:	ef 2e       	mov	r14, r31
     faa:	ff 24       	eor	r15, r15
     fac:	f0 2d       	mov	r31, r0
     fae:	ec 0e       	add	r14, r28
     fb0:	fd 1e       	adc	r15, r29
     fb2:	0f 2e       	mov	r0, r31
     fb4:	f8 e7       	ldi	r31, 0x78	; 120
     fb6:	cf 2e       	mov	r12, r31
     fb8:	dd 24       	eor	r13, r13
     fba:	f0 2d       	mov	r31, r0
     fbc:	cc 0e       	add	r12, r28
     fbe:	dd 1e       	adc	r13, r29
     fc0:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
     fc4:	87 e2       	ldi	r24, 0x27	; 39
     fc6:	ea 96       	adiw	r28, 0x3a	; 58
     fc8:	8f af       	sts	0x7f, r24
     fca:	ea 97       	sbiw	r28, 0x3a	; 58
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	ec 96       	adiw	r28, 0x3c	; 60
     fd2:	9f af       	sts	0x7f, r25
     fd4:	8e af       	sts	0x7e, r24
     fd6:	ec 97       	sbiw	r28, 0x3c	; 60
     fd8:	ed 96       	adiw	r28, 0x3d	; 61
     fda:	bf ae       	sts	0xbf, r27
     fdc:	ed 97       	sbiw	r28, 0x3d	; 61
     fde:	82 e7       	ldi	r24, 0x72	; 114
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	be 01       	movw	r22, r28
     fe4:	67 58       	subi	r22, 0x87	; 135
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	4a e3       	ldi	r20, 0x3A	; 58
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	29 e3       	ldi	r18, 0x39	; 57
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	0f 2e       	mov	r0, r31
     ff2:	fa e7       	ldi	r31, 0x7A	; 122
     ff4:	ef 2e       	mov	r14, r31
     ff6:	ff 24       	eor	r15, r15
     ff8:	f0 2d       	mov	r31, r0
     ffa:	ec 0e       	add	r14, r28
     ffc:	fd 1e       	adc	r15, r29
     ffe:	0f 2e       	mov	r0, r31
    1000:	fc e7       	ldi	r31, 0x7C	; 124
    1002:	cf 2e       	mov	r12, r31
    1004:	dd 24       	eor	r13, r13
    1006:	f0 2d       	mov	r31, r0
    1008:	cc 0e       	add	r12, r28
    100a:	dd 1e       	adc	r13, r29
    100c:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
    1010:	88 e2       	ldi	r24, 0x28	; 40
    1012:	ee 96       	adiw	r28, 0x3e	; 62
    1014:	8f af       	sts	0x7f, r24
    1016:	ee 97       	sbiw	r28, 0x3e	; 62
    1018:	c2 58       	subi	r28, 0x82	; 130
    101a:	df 4f       	sbci	r29, 0xFF	; 255
    101c:	19 82       	std	Y+1, r1	; 0x01
    101e:	18 82       	st	Y, r1
    1020:	ce 57       	subi	r28, 0x7E	; 126
    1022:	d0 40       	sbci	r29, 0x00	; 0
    1024:	c0 58       	subi	r28, 0x80	; 128
    1026:	df 4f       	sbci	r29, 0xFF	; 255
    1028:	b8 82       	st	Y, r11
    102a:	c0 58       	subi	r28, 0x80	; 128
    102c:	d0 40       	sbci	r29, 0x00	; 0
    102e:	8b e7       	ldi	r24, 0x7B	; 123
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	be 01       	movw	r22, r28
    1034:	63 58       	subi	r22, 0x83	; 131
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	4a e3       	ldi	r20, 0x3A	; 58
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	29 e3       	ldi	r18, 0x39	; 57
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	0f 2e       	mov	r0, r31
    1042:	fe e7       	ldi	r31, 0x7E	; 126
    1044:	ef 2e       	mov	r14, r31
    1046:	ff 24       	eor	r15, r15
    1048:	f0 2d       	mov	r31, r0
    104a:	ec 0e       	add	r14, r28
    104c:	fd 1e       	adc	r15, r29
    104e:	cc 24       	eor	r12, r12
    1050:	dd 24       	eor	r13, r13
    1052:	68 94       	set
    1054:	c7 f8       	bld	r12, 7
    1056:	cc 0e       	add	r12, r28
    1058:	dd 1e       	adc	r13, r29
    105a:	0e 94 98 03 	call	0x730	; 0x730 <_ZN3PinC1ERKhRVhS3_S3_RKiRKb>
// hidden

Pin::Pin(const uint8_t &nr, Register::ADDR &direction, Register::ADDR &inState, Register::ADDR &outState, const int &n_addrMask, const bool &n_isAllowed)
: nr(nr), direction(direction), inState(inState), outState(outState), addrMask(n_addrMask), isAllowed(n_isAllowed)
{
    105e:	c0 58       	subi	r28, 0x80	; 128
    1060:	df 4f       	sbci	r29, 0xFF	; 255
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	9f 90       	pop	r9
    1080:	8f 90       	pop	r8
    1082:	7f 90       	pop	r7
    1084:	6f 90       	pop	r6
    1086:	5f 90       	pop	r5
    1088:	4f 90       	pop	r4
    108a:	3f 90       	pop	r3
    108c:	2f 90       	pop	r2
    108e:	08 95       	ret

00001090 <__vector_13>:
char Usart::incomeChar;
bool Usart::newCharReceived;

// definicja wektora przerwan odbioru danych USART
ISR(USART_RXC_vect)
{
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	8f 93       	push	r24
	Usart::incomeChar = UDR;
    109c:	8c b1       	in	r24, 0x0c	; 12
    109e:	80 93 85 01 	sts	0x0185, r24
	Usart::newCharReceived = true;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 84 01 	sts	0x0184, r24
}
    10a8:	8f 91       	pop	r24
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <_ZN5Usart8ScenarioC1Ev>:

Usart::Scenario::Scenario()
{
}
    10b4:	08 95       	ret

000010b6 <_ZN5Usart8ScenarioC1EPFvvERKh>:

Usart::Scenario::Scenario(void (*function)(), const uint8_t &paramsBytes)
    10b6:	fc 01       	movw	r30, r24
: function(function), paramsBytes(paramsBytes)
    10b8:	71 83       	std	Z+1, r23	; 0x01
    10ba:	60 83       	st	Z, r22
    10bc:	da 01       	movw	r26, r20
    10be:	8c 91       	ld	r24, X
    10c0:	82 83       	std	Z+2, r24	; 0x02
{
}
    10c2:	08 95       	ret

000010c4 <_ZN5Usart4initEv>:

void Usart::init()
{
	// wlaczenie transmisji, wlaczenie odbioru, wlaczenie przerwania odbioru
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
    10c4:	88 e9       	ldi	r24, 0x98	; 152
    10c6:	8a b9       	out	0x0a, r24	; 10
	//nastaw 8-bitowej ramki
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
    10c8:	86 e8       	ldi	r24, 0x86	; 134
    10ca:	80 bd       	out	0x20, r24	; 32
	// for 9600 baud at 1MHz
	UBRRL = USART_UBRRL;
    10cc:	8f e5       	ldi	r24, 0x5F	; 95
    10ce:	89 b9       	out	0x09, r24	; 9
	sei();
    10d0:	78 94       	sei
}
    10d2:	08 95       	ret

000010d4 <_ZN5Usart7receiveEv>:
		send(scenarioCode);
	}
}

const char Usart::receive()
{
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	while (!newCharReceived)
    10de:	80 91 84 01 	lds	r24, 0x0184
    10e2:	88 23       	and	r24, r24
    10e4:	49 f4       	brne	.+18     	; 0x10f8 <_ZN5Usart7receiveEv+0x24>
    10e6:	86 e6       	ldi	r24, 0x66	; 102
    10e8:	9e e0       	ldi	r25, 0x0E	; 14
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <_ZN5Usart7receiveEv+0x16>
    10ee:	00 00       	nop
    10f0:	80 91 84 01 	lds	r24, 0x0184
    10f4:	88 23       	and	r24, r24
    10f6:	b9 f3       	breq	.-18     	; 0x10e6 <_ZN5Usart7receiveEv+0x12>
		_delay_ms(USART_SLEEP_TIME);
	Pin::get(22).setHigh();
    10f8:	86 e1       	ldi	r24, 0x16	; 22
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
    1104:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN3Pin7setHighEv>
	char temp = incomeChar;
    1108:	80 91 85 01 	lds	r24, 0x0185
	newCharReceived = false;
    110c:	10 92 84 01 	sts	0x0184, r1
	return temp;
}
    1110:	0f 90       	pop	r0
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <_ZN5Usart4sendEc>:

void Usart::send(char toSend)
{
	while (!(UCSRA & (1<<UDRE)));
    1118:	5d 9b       	sbis	0x0b, 5	; 11
    111a:	fe cf       	rjmp	.-4      	; 0x1118 <_ZN5Usart4sendEc>
	UDR = toSend;
    111c:	8c b9       	out	0x0c, r24	; 12
}
    111e:	08 95       	ret

00001120 <_ZN5Usart3runEv>:
	UBRRL = USART_UBRRL;
	sei();
}

void Usart::run()
{
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	00 d0       	rcall	.+0      	; 0x1126 <_ZN5Usart3runEv+0x6>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	while (true)
	{
		const char scenarioCode = receive();
		const uint8_t &scenarioParams = scenarios[scenarioCode - 32].paramsBytes;
		for (uint8_t i = 0; i < scenarioParams; ++i)
    112a:	0f 2e       	mov	r0, r31
    112c:	fc e8       	ldi	r31, 0x8C	; 140
    112e:	8f 2e       	mov	r8, r31
    1130:	f1 e0       	ldi	r31, 0x01	; 1
    1132:	9f 2e       	mov	r9, r31
    1134:	f0 2d       	mov	r31, r0
    1136:	aa 24       	eor	r10, r10

void Usart::run()
{
	while (true)
	{
		const char scenarioCode = receive();
    1138:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Usart7receiveEv>
    113c:	b8 2e       	mov	r11, r24
		const uint8_t &scenarioParams = scenarios[scenarioCode - 32].paramsBytes;
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0f 2e       	mov	r0, r31
    1142:	f0 ee       	ldi	r31, 0xE0	; 224
    1144:	cf 2e       	mov	r12, r31
    1146:	ff ef       	ldi	r31, 0xFF	; 255
    1148:	df 2e       	mov	r13, r31
    114a:	f0 2d       	mov	r31, r0
    114c:	c8 0e       	add	r12, r24
    114e:	d9 1e       	adc	r13, r25
		for (uint8_t i = 0; i < scenarioParams; ++i)
    1150:	f6 01       	movw	r30, r12
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	ec 0d       	add	r30, r12
    1158:	fd 1d       	adc	r31, r13
    115a:	e8 0d       	add	r30, r8
    115c:	f9 1d       	adc	r31, r9
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	88 23       	and	r24, r24
    1162:	11 f1       	breq	.+68     	; 0x11a8 <_ZN5Usart3runEv+0x88>
    1164:	1a 2d       	mov	r17, r10
    1166:	7f 01       	movw	r14, r30
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	e8 0e       	add	r14, r24
    116e:	f9 1e       	adc	r15, r25
		{
			//send(scenarioParams);
			Pin::get(22 + i).setHigh();
    1170:	01 2f       	mov	r16, r17
    1172:	0a 5e       	subi	r16, 0xEA	; 234
    1174:	0a 83       	std	Y+2, r16	; 0x02
    1176:	ce 01       	movw	r24, r28
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
    117e:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN3Pin7setHighEv>
			params[i] = receive();
    1182:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Usart7receiveEv>
    1186:	e1 2f       	mov	r30, r17
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	e8 57       	subi	r30, 0x78	; 120
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	80 83       	st	Z, r24
			//send(params[i]);
			Pin::get(22 + i).setLow();
    1190:	09 83       	std	Y+1, r16	; 0x01
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3Pin3getERKh>
    119a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN3Pin6setLowEv>
{
	while (true)
	{
		const char scenarioCode = receive();
		const uint8_t &scenarioParams = scenarios[scenarioCode - 32].paramsBytes;
		for (uint8_t i = 0; i < scenarioParams; ++i)
    119e:	1f 5f       	subi	r17, 0xFF	; 255
    11a0:	f7 01       	movw	r30, r14
    11a2:	80 81       	ld	r24, Z
    11a4:	18 17       	cp	r17, r24
    11a6:	20 f3       	brcs	.-56     	; 0x1170 <_ZN5Usart3runEv+0x50>
			params[i] = receive();
			//send(params[i]);
			Pin::get(22 + i).setLow();
		}
		//send(scenarioCode);
		scenarios[scenarioCode - 32].function();
    11a8:	c6 01       	movw	r24, r12
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	c8 0e       	add	r12, r24
    11b0:	d9 1e       	adc	r13, r25
    11b2:	f4 01       	movw	r30, r8
    11b4:	ec 0d       	add	r30, r12
    11b6:	fd 1d       	adc	r31, r13
    11b8:	01 90       	ld	r0, Z+
    11ba:	f0 81       	ld	r31, Z
    11bc:	e0 2d       	mov	r30, r0
    11be:	09 95       	icall
		send(scenarioCode);
    11c0:	8b 2d       	mov	r24, r11
    11c2:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	sei();
}

void Usart::run()
{
	while (true)
    11c6:	b8 cf       	rjmp	.-144    	; 0x1138 <_ZN5Usart3runEv+0x18>

000011c8 <_ZN5Usart4sendEPKc>:
	while (!(UCSRA & (1<<UDRE)));
	UDR = toSend;
}

void Usart::send(const char *toSend)
{
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	ec 01       	movw	r28, r24
	send(128);
    11ce:	80 e8       	ldi	r24, 0x80	; 128
    11d0:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
	while (*toSend != '\0')
    11d4:	88 81       	ld	r24, Y
    11d6:	88 23       	and	r24, r24
    11d8:	31 f0       	breq	.+12     	; 0x11e6 <_ZN5Usart4sendEPKc+0x1e>
{
	while (!(UCSRA & (1<<UDRE)));
	UDR = toSend;
}

void Usart::send(const char *toSend)
    11da:	21 96       	adiw	r28, 0x01	; 1
{
	send(128);
	while (*toSend != '\0')
		send(*toSend++);
    11dc:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
}

void Usart::send(const char *toSend)
{
	send(128);
	while (*toSend != '\0')
    11e0:	89 91       	ld	r24, Y+
    11e2:	88 23       	and	r24, r24
    11e4:	d9 f7       	brne	.-10     	; 0x11dc <_ZN5Usart4sendEPKc+0x14>
		send(*toSend++);
	send('\0');
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5Usart4sendEc>
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <_ZN5Usart12pushFunctionERKNS_8ScenarioEh>:

void Usart::pushFunction(const Scenario &scenario, uint8_t id)
{
	scenarios[id - 32] = scenario;
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	60 52       	subi	r22, 0x20	; 32
    11f6:	70 40       	sbci	r23, 0x00	; 0
    11f8:	db 01       	movw	r26, r22
    11fa:	aa 0f       	add	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	a6 0f       	add	r26, r22
    1200:	b7 1f       	adc	r27, r23
    1202:	a4 57       	subi	r26, 0x74	; 116
    1204:	be 4f       	sbci	r27, 0xFE	; 254
    1206:	e8 2f       	mov	r30, r24
    1208:	f9 2f       	mov	r31, r25
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	01 90       	ld	r0, Z+
    120e:	0d 92       	st	X+, r0
    1210:	81 50       	subi	r24, 0x01	; 1
    1212:	e1 f7       	brne	.-8      	; 0x120c <_ZN5Usart12pushFunctionERKNS_8ScenarioEh+0x1a>
}
    1214:	08 95       	ret

00001216 <_ZN5Usart6getBitERKh>:

const bool &Usart::getBit(const uint8_t &nr)
{
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	return params[nr<<3] & (1 << (nr - (nr<<3>>3)));
}
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0f 90       	pop	r0
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <_ZN5Usart7getBitsERKhS1_>:

const uint32_t &Usart::getBits(const uint8_t &start, const uint8_t &size)
{
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	00 d0       	rcall	.+0      	; 0x1232 <_ZN5Usart7getBitsERKhS1_+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <_ZN5Usart7getBitsERKhS1_+0x8>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	uint32_t bits;
	for (uint8_t i = 0; i < size; ++i)
    1238:	fb 01       	movw	r30, r22
    123a:	90 81       	ld	r25, Z
    123c:	99 23       	and	r25, r25
    123e:	21 f0       	breq	.+8      	; 0x1248 <_ZN5Usart7getBitsERKhS1_+0x1c>
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	89 17       	cp	r24, r25
    1246:	e8 f3       	brcs	.-6      	; 0x1242 <_ZN5Usart7getBitsERKhS1_+0x16>
		bits += (getBit(start + i) << i);
	return bits;
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <__tablejump2__>:
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31

0000125e <__tablejump__>:
    125e:	05 90       	lpm	r0, Z+
    1260:	f4 91       	lpm	r31, Z
    1262:	e0 2d       	mov	r30, r0
    1264:	09 94       	ijmp

00001266 <_exit>:
    1266:	f8 94       	cli

00001268 <__stop_program>:
    1268:	ff cf       	rjmp	.-2      	; 0x1268 <__stop_program>
