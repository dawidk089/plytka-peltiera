
kalorymetr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000070  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000070  000000e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000114  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d3  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010a  00000000  00000000  0000031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000185  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1b c0       	rjmp	.+54     	; 0x6c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRD |= (1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	8c 6f       	ori	r24, 0xFC	; 252
  3c:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
  3e:	82 b3       	in	r24, 0x12	; 18
  40:	8c 6f       	ori	r24, 0xFC	; 252
  42:	82 bb       	out	0x12, r24	; 18
	DDRB |= (1<<PB0);
  44:	b8 9a       	sbi	0x17, 0	; 23
	PORTB |= (1<<PB0);
  46:	c0 9a       	sbi	0x18, 0	; 24

	while(1)
	{
		PORTD ^= (1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
  48:	2c ef       	ldi	r18, 0xFC	; 252
		PORTB ^= (1<<PB0);
  4a:	91 e0       	ldi	r25, 0x01	; 1
	DDRB |= (1<<PB0);
	PORTB |= (1<<PB0);

	while(1)
	{
		PORTD ^= (1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
  4c:	82 b3       	in	r24, 0x12	; 18
  4e:	82 27       	eor	r24, r18
  50:	82 bb       	out	0x12, r24	; 18
		PORTB ^= (1<<PB0);
  52:	88 b3       	in	r24, 0x18	; 24
  54:	89 27       	eor	r24, r25
  56:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	3f ef       	ldi	r19, 0xFF	; 255
  5a:	4f eb       	ldi	r20, 0xBF	; 191
  5c:	81 e2       	ldi	r24, 0x21	; 33
  5e:	31 50       	subi	r19, 0x01	; 1
  60:	40 40       	sbci	r20, 0x00	; 0
  62:	80 40       	sbci	r24, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <__SREG__+0x1f>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>
  68:	00 00       	nop
  6a:	f0 cf       	rjmp	.-32     	; 0x4c <__SREG__+0xd>

0000006c <_exit>:
  6c:	f8 94       	cli

0000006e <__stop_program>:
  6e:	ff cf       	rjmp	.-2      	; 0x6e <__stop_program>
